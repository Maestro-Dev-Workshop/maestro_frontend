var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/About.html",[0,0.28]],["body/components/About.html",[0,0.376,1,1.383,2,0.176,3,0.176,4,1.147,5,1.147,6,1.147,7,0.156,8,3.864,9,3.864,10,0.977,11,1.783,12,1.781,13,1.439,14,5.825,15,1.689,16,5.825,17,0.42,18,0.015,19,0.55,20,1.059,21,0.217,22,0.523,23,5.045,24,1.147,25,1.439,26,1.498,27,0.938,28,1.768,29,1.147,30,0.646,31,1.147,32,1.147,33,1.059,34,1.147,35,1.059,36,1.147,37,1.147,38,1.059,39,1.147,40,0.977,41,1.017,42,1.017,43,1.147,44,1.059,45,1.147,46,0.977,47,1.147,48,1.017,49,1.147,50,1.059,51,1.147,52,1.059,53,1.059,54,1.147,55,0.938,56,1.147,57,1.059,58,1.147,59,1.147,60,1.059,61,1.147,62,1.059,63,1.147,64,1.059,65,1.147,66,0.977,67,1.017,68,1.147,69,1.059,70,1.147,71,0.977,72,1.147,73,1.059,74,1.147,75,1.059,76,1.147,77,1.059,78,1.147,79,1.059,80,1.147,81,1.059,82,1.059,83,1.147,84,1.017,85,1.102,86,0.864,87,0.977,88,1.017,89,1.147,90,1.017,91,1.102,92,1.147,93,0.011,94,0.011]],["title/interfaces/AnswerModel.html",[95,0.716,96,2.748]],["body/interfaces/AnswerModel.html",[2,0.215,3,0.215,7,0.191,18,0.015,21,0.264,93,0.013,94,0.013,95,1.01,96,4.701,97,1.937,98,4.714,99,0.316,100,0.734,101,7.39,102,7.39,103,6.401,104,7.39,105,6.401,106,7.39,107,1.1,108,0.41,109,2.53]],["title/components/App.html",[0,0.224,12,0.845]],["body/components/App.html",[0,0.364,1,1.324,2,0.165,3,0.165,4,1.075,5,1.075,6,1.075,7,0.146,10,0.915,11,1.776,12,1.779,13,1.378,15,1.618,17,0.591,18,0.015,19,0.515,20,1.324,21,0.203,22,0.489,24,1.075,25,1.378,26,1.435,27,0.878,28,1.723,29,1.075,30,0.626,31,1.075,32,1.075,33,0.992,34,1.075,35,0.992,36,1.075,37,1.075,38,0.992,39,1.075,40,0.915,41,0.953,42,0.953,43,1.075,44,0.992,45,1.075,46,0.915,47,1.075,48,0.953,49,1.075,50,0.992,51,1.075,52,0.992,53,0.992,54,1.075,55,0.878,56,1.075,57,0.992,58,1.075,59,1.075,60,0.992,61,1.075,62,0.992,63,1.075,64,0.992,65,1.075,66,0.915,67,0.953,68,1.075,69,0.992,70,1.075,71,0.915,72,1.075,73,0.992,74,1.075,75,0.992,76,1.075,77,0.992,78,1.075,79,1.591,80,1.075,81,0.992,82,0.992,83,1.075,84,0.953,85,1.032,86,0.809,87,0.915,88,0.953,89,1.075,90,0.953,91,1.032,92,1.075,93,0.011,94,0.011,99,0.242,100,0.62,110,3.619,111,2.599,112,6.28,113,5.579,114,5.579,115,6.28,116,5.439,117,4.471,118,0.915,119,0.953,120,5.579,121,0.682,122,4.178,123,2.755,124,1.487,125,4.178]],["title/interceptors/AuthInterceptor.html",[126,3.343,127,2.748]],["body/interceptors/AuthInterceptor.html",[2,0.184,3,0.184,7,0.163,17,0.68,18,0.016,19,0.574,21,0.226,22,0.545,30,0.597,55,0.979,93,0.012,94,0.012,99,0.27,108,0.319,121,0.977,124,1.657,127,4.263,128,4.655,129,4.032,130,1.159,131,5.988,132,1.589,133,4.032,134,4.04,135,3.05,136,4.655,137,1.159,138,1.065,139,4.658,140,5.988,141,6.989,142,2.682,143,6.989,144,4.655,145,5.186,146,0.901,147,2.806,148,1.808,149,5.988,150,5.186,151,4.655,152,3.069,153,4.032,154,5.988,155,1.657,156,4.655,157,2.402,158,1.728,159,1.405,160,2.044,161,5.149,162,4.655,163,4.655,164,4.655,165,4.655,166,4.032,167,4.032,168,1.736,169,4.655,170,4.655,171,4.655,172,4.655,173,4.655,174,4.655,175,4.655,176,4.032,177,4.032,178,4.655,179,4.655,180,4.032,181,4.655,182,3.314,183,3.621,184,2.169]],["title/injectables/AuthService.html",[134,2.231,148,1.165]],["body/injectables/AuthService.html",[2,0.152,3,0.152,7,0.135,17,0.639,18,0.016,19,0.475,21,0.187,22,0.451,30,0.646,55,1.11,71,1.156,84,1.204,86,1.166,93,0.01,94,0.01,99,0.224,100,0.587,107,1.02,108,0.39,111,1.795,118,0.844,119,0.878,121,1.21,130,1.022,134,3.052,137,1.255,138,1.153,146,1.39,147,3.239,148,1.594,155,1.371,159,1.819,160,1.315,161,4.687,168,2.034,185,1.887,186,3.337,187,3.534,188,5.282,189,6.482,190,4.478,191,5.281,192,5.281,193,3.973,194,5.281,195,5.042,196,3.853,197,5.281,198,3.853,199,1.88,200,3.853,201,3.853,202,5.281,203,3.853,204,3.76,205,5.281,206,3.747,207,3.853,208,3.337,209,5.281,210,3.853,211,3.76,212,3.853,213,3.853,214,3.853,215,1.431,216,2.227,217,2.743,218,1.988,219,3.337,220,3.853,221,3.853,222,1.887,223,2.997,224,1.315,225,3.853,226,3.853,227,2.997,228,2.997,229,3.052,230,3.853,231,2.997,232,3.853,233,3.853,234,3.853,235,5.281,236,5.281,237,2.879,238,3.853,239,3.853,240,1.494,241,3.337,242,3.337,243,3.853,244,3.337,245,3.853]],["title/interfaces/ChatMessage.html",[95,0.716,246,2.545]],["body/interfaces/ChatMessage.html",[2,0.227,3,0.227,7,0.202,18,0.015,21,0.28,93,0.013,94,0.013,95,1.069,97,2.05,99,0.334,100,0.759,107,1.085,108,0.388,246,4.504,247,4.481,248,4.989,249,3.886,250,5.858,251,5.858]],["title/components/Chatbot.html",[0,0.224,33,0.916]],["body/components/Chatbot.html",[0,0.276,1,0.929,2,0.101,3,0.101,4,0.656,5,1.224,6,0.656,7,0.089,10,1.169,11,1.703,12,1.699,13,0.967,15,1.135,17,0.595,18,0.016,19,0.315,20,0.929,21,0.124,22,0.299,24,0.656,25,0.967,26,1.007,27,0.537,28,1.373,29,0.656,30,0.474,31,0.656,32,0.656,33,1.442,34,0.656,35,0.606,36,0.656,37,0.656,38,0.606,39,0.656,40,0.559,41,0.582,42,0.582,43,0.656,44,0.606,45,0.656,46,0.559,47,0.656,48,0.582,49,0.656,50,0.606,51,0.656,52,0.606,53,0.606,54,0.656,55,0.537,56,0.656,57,0.606,58,0.656,59,0.656,60,0.606,61,0.656,62,0.606,63,0.656,64,0.606,65,0.656,66,0.559,67,0.582,68,0.656,69,0.606,70,0.656,71,0.559,72,0.656,73,0.606,74,0.656,75,0.606,76,0.656,77,0.606,78,0.656,79,0.606,80,0.656,81,0.606,82,0.606,83,0.656,84,0.582,85,0.631,86,0.494,87,0.559,88,0.582,89,0.656,90,0.582,91,0.631,92,0.656,93,0.008,94,0.008,99,0.276,100,0.435,107,0.647,108,0.337,118,1.385,119,1.442,121,1.198,130,0.758,142,1.034,146,1.033,155,0.908,159,2.198,160,1.625,168,1.548,184,1.824,199,1.548,215,0.948,224,1.625,237,1.392,246,3.139,249,2.457,250,3.045,251,3.703,252,2.211,253,2.457,254,2.931,255,3.914,256,3.914,257,4.761,258,3.52,259,4.761,260,4.761,261,6.075,262,2.332,263,4.761,264,5.338,265,5.338,266,5.338,267,4.623,268,2.409,269,5.477,270,2.752,271,2.263,272,4.761,273,3.914,274,2.581,275,2.552,276,2.552,277,2.552,278,2.552,279,2.552,280,2.552,281,2.552,282,4.623,283,3.801,284,3.39,285,3.286,286,3.39,287,3.914,288,2.263,289,4.761,290,2.787,291,2.787,292,3.914,293,4.761,294,3.914,295,1.738,296,3.914,297,3.914,298,3.914,299,3.914,300,4.761,301,4.761,302,3.914,303,2.552,304,3.39,305,2.552,306,4.761,307,1.683,308,3.914,309,2.552,310,2.552,311,3.914,312,2.552,313,2.681,314,2.552,315,2.552,316,2.931,317,3.914,318,2.263,319,2.552,320,1.817,321,1.189,322,3.39,323,2.211,324,2.211,325,1.985,326,1.985,327,1.392,328,2.552,329,1.683,330,2.552,331,2.552,332,1.282,333,2.211,334,2.211,335,2.552,336,3.914,337,2.552,338,2.552,339,2.552,340,2.755,341,5.338,342,2.552,343,2.552,344,1.392,345,3.914,346,2.552,347,2.552,348,2.552,349,1.985,350,2.552,351,1.817,352,0.948,353,1.985,354,2.552,355,3.39,356,3.045]],["title/injectables/ChatbotService.html",[148,1.165,258,2.545]],["body/injectables/ChatbotService.html",[2,0.193,3,0.193,7,0.171,10,1.558,17,0.669,18,0.016,19,0.602,21,0.237,22,0.572,30,0.615,93,0.012,94,0.012,99,0.283,100,0.686,107,1.056,108,0.329,111,2.276,118,1.07,119,1.114,121,1.105,130,1.195,137,1.195,138,1.099,146,1.195,147,3.111,148,1.864,155,1.738,168,1.791,185,2.393,187,3.879,211,4.396,215,1.814,216,2.824,217,3.478,222,2.393,249,3.787,258,4.071,267,5.348,274,4.691,283,3.478,325,3.8,357,4.231,358,6.175,359,6.175,360,4.885,361,4.396,362,4.691,363,6.175,364,4.885,365,4.885,366,4.885,367,4.885,368,4.885]],["title/components/ConfirmLogout.html",[0,0.224,35,0.916]],["body/components/ConfirmLogout.html",[0,0.357,1,1.289,2,0.158,3,0.158,4,1.033,5,1.033,6,1.033,7,0.141,10,0.879,11,1.771,12,1.768,13,1.342,15,1.575,17,0.511,18,0.015,19,0.495,20,1.289,21,0.195,22,0.47,24,1.033,25,1.342,26,1.397,27,0.844,28,1.696,29,1.033,30,0.613,31,1.033,32,1.033,33,0.953,34,1.033,35,1.565,36,1.925,37,1.033,38,0.953,39,1.033,40,0.879,41,0.915,42,0.915,43,1.033,44,0.953,45,1.033,46,0.879,47,1.033,48,0.915,49,1.033,50,0.953,51,1.033,52,0.953,53,0.953,54,1.033,55,0.844,56,1.033,57,0.953,58,1.033,59,1.033,60,0.953,61,1.033,62,0.953,63,1.033,64,0.953,65,1.033,66,0.879,67,0.915,68,1.033,69,0.953,70,1.033,71,0.879,72,1.033,73,0.953,74,1.033,75,0.953,76,1.033,77,0.953,78,1.033,79,0.953,80,1.033,81,0.953,82,0.953,83,1.033,84,0.915,85,0.992,86,0.777,87,0.879,88,0.915,89,1.033,90,0.915,91,0.992,92,1.033,93,0.011,94,0.011,108,0.289,121,0.886,176,4.704,188,5.524,224,1.854,271,2.321,318,3.558,362,3.581,369,5.331,370,4.788,371,3.478,372,3.356,373,5.431,374,5.431,375,5.711,376,5.359,377,4.015,378,4.015,379,1.967,380,4.704,381,3.343,382,4.704]],["title/components/Contact.html",[0,0.224,38,0.916]],["body/components/Contact.html",[0,0.365,1,1.326,2,0.165,3,0.165,4,1.076,5,1.076,6,1.076,7,0.147,10,0.916,11,1.776,12,1.774,13,1.38,15,1.619,17,0.394,18,0.015,19,0.516,20,0.993,21,0.203,22,0.49,24,1.076,25,1.38,26,1.436,27,0.88,28,1.725,29,1.076,30,0.626,31,1.076,32,1.076,33,0.993,34,1.076,35,0.993,36,1.076,37,1.076,38,1.769,39,1.076,40,0.916,41,0.954,42,0.954,43,1.076,44,1.492,45,1.076,46,0.916,47,1.076,48,1.433,49,1.076,50,0.993,51,1.076,52,0.993,53,0.993,54,1.076,55,0.88,56,1.076,57,0.993,58,1.076,59,1.076,60,0.993,61,1.076,62,0.993,63,1.076,64,1.492,65,1.076,66,0.916,67,0.954,68,1.076,69,0.993,70,1.076,71,0.916,72,1.076,73,0.993,74,1.076,75,0.993,76,1.076,77,0.993,78,1.076,79,0.993,80,1.076,81,0.993,82,0.993,83,1.076,84,0.954,85,1.034,86,0.81,87,0.916,88,0.954,89,1.076,90,0.954,91,1.034,92,1.076,93,0.011,94,0.011,383,3.625,384,5.585,385,5.585,386,3.656,387,3.682,388,3.682,389,5.585,390,5.585,391,5.585,392,4.837,393,5.585,394,4.185,395,5.585,396,5.585,397,5.585]],["title/components/CreationStepTab.html",[0,0.224,40,0.845]],["body/components/CreationStepTab.html",[0,0.325,1,1.141,2,0.133,3,0.133,4,0.866,5,0.866,6,0.866,7,0.118,10,0.738,11,1.747,12,1.744,13,1.188,15,1.394,17,0.452,18,0.016,19,0.415,20,1.141,21,0.164,22,0.395,24,0.866,25,1.188,26,1.236,27,0.708,28,1.572,29,0.866,30,0.559,31,0.866,32,0.866,33,0.8,34,0.866,35,0.8,36,0.866,37,0.866,38,0.8,39,0.866,40,1.338,41,1.577,42,1.786,43,0.866,44,0.8,45,0.866,46,0.738,47,0.866,48,0.768,49,0.866,50,0.8,51,0.866,52,0.8,53,0.8,54,0.866,55,0.708,56,0.866,57,0.8,58,0.866,59,0.866,60,0.8,61,0.866,62,0.8,63,0.866,64,0.8,65,0.866,66,0.738,67,0.768,68,0.866,69,0.8,70,0.866,71,0.738,72,0.866,73,0.8,74,0.866,75,0.8,76,0.866,77,0.8,78,0.866,79,0.8,80,0.866,81,0.8,82,0.8,83,0.866,84,0.768,85,0.832,86,0.652,87,0.738,88,0.768,89,0.866,90,0.768,91,0.832,92,0.866,93,0.009,94,0.009,99,0.195,100,0.534,107,0.83,108,0.326,118,1.227,119,1.278,121,1.096,130,0.93,146,0.652,157,2.481,199,0.977,240,1.864,268,2.959,316,2.959,332,1.836,372,3.056,379,1.65,398,3.771,399,5.991,400,3.998,401,2.917,402,3.45,403,2.959,404,2.959,405,4.807,406,4.807,407,5.605,408,5.605,409,3.762,410,5.605,411,5.605,412,3.771,413,3.368,414,3.368,415,2.221,416,3.368,417,3.368,418,3.368,419,3.368,420,3.368,421,3.368,422,3.368,423,3.368,424,4.807,425,4.163,426,6.112,427,5.294,428,3.368,429,4.807,430,3.368,431,3.368,432,2.917]],["title/interfaces/ExamModel.html",[95,0.716,433,3.002]],["body/interfaces/ExamModel.html",[2,0.224,3,0.224,7,0.199,17,0.535,18,0.015,21,0.276,93,0.013,94,0.013,95,1.055,97,2.023,99,0.33,100,0.753,107,0.984,108,0.386,138,1.206,433,5.272,434,4.923,435,2.559,436,4.944,437,4.944,438,4.088,439,3.737,440,4.923]],["title/classes/ExamSettings.html",[22,0.452,441,2.545]],["body/classes/ExamSettings.html",[0,0.255,2,0.117,3,0.117,7,0.104,11,0.651,12,0.651,13,0.735,15,0.863,17,0.626,18,0.016,19,0.367,20,0.706,21,0.144,22,0.612,40,0.962,41,0.678,42,1.001,46,0.962,66,0.651,67,1.402,93,0.008,94,0.008,99,0.173,100,0.488,107,0.709,108,0.343,109,1.858,118,1.263,119,1.315,121,0.941,124,1.059,135,2.116,137,0.576,142,2.116,147,1.862,155,1.059,158,1.105,159,0.898,160,1.782,168,1.672,184,3,215,1.105,224,1.499,240,1.703,253,2.267,262,1.457,270,3.018,290,2.118,295,2.319,313,3.12,321,1.386,332,1.71,340,3.527,352,1.939,398,3.354,400,1.719,403,1.831,441,3.802,442,2.118,443,4.056,444,4.056,445,2.118,446,4.105,447,5.007,448,4.105,449,3.718,450,2.975,451,2.975,452,3.718,453,2.975,454,2.975,455,2.704,456,1.719,457,1.457,458,1.719,459,1.961,460,3.443,461,1.831,462,2.314,463,2.314,464,1.719,465,1.719,466,1.831,467,1.961,468,1.961,469,1.961,470,1.961,471,1.961,472,1.961,473,3.443,474,1.961,475,1.622,476,1.961,477,1.719,478,1.961,479,2.314,480,3.417,481,2.314,482,3.417,483,2.314,484,3.417,485,3.417,486,2.314,487,2.314,488,3.417,489,2.314,490,1.719,491,4.062,492,4.062,493,3.127,494,1.719,495,3.417,496,3.417,497,2.314,498,3.417,499,2.539,500,2.118,501,3.417,502,2.314,503,3.127,504,2.267,505,3.417,506,2.314,507,3.417,508,2.314,509,2.314,510,4.485,511,1.961,512,2.118,513,3.417,514,2.314,515,2.314,516,2.118,517,2.118,518,2.314,519,3.963,520,2.314,521,2.314,522,4.062,523,2.314,524,3.417,525,3.417,526,3.417,527,3.127,528,4.485,529,3.417,530,3.718,531,3.417,532,3.127,533,2.314,534,2.314,535,3.127,536,1.831,537,2.314,538,2.314]],["title/interfaces/ExerciseModel.html",[95,0.716,539,3.002]],["body/interfaces/ExerciseModel.html",[2,0.224,3,0.224,7,0.199,17,0.535,18,0.015,21,0.276,93,0.013,94,0.013,95,1.055,97,2.023,99,0.33,100,0.753,107,0.984,108,0.386,138,1.206,435,2.559,436,4.944,437,4.944,438,4.088,439,3.737,440,4.923,539,5.272,540,4.923]],["title/injectables/ExerciseService.html",[148,1.165,541,3.002]],["body/injectables/ExerciseService.html",[2,0.192,3,0.192,7,0.17,17,0.689,18,0.016,19,0.599,21,0.236,22,0.569,30,0.673,93,0.012,94,0.012,96,3.458,99,0.282,100,0.684,107,1.017,108,0.36,111,2.263,118,1.064,119,1.107,121,1.158,130,1.191,132,1.658,137,1.307,138,1.201,146,1.191,147,3.105,148,1.858,152,3.203,155,1.729,158,1.803,159,2.039,168,1.784,185,2.379,187,3.355,222,2.379,435,2.1,541,4.786,542,4.207,543,5.253,544,6.153,545,5.329,546,3.778,547,5.055,548,6.153,549,6.153,550,4.857,551,6.153,552,7.1,553,4.857,554,6.153,555,4.857,556,2.99,557,3.778,558,4.857,559,4.857]],["title/classes/ExerciseSettings.html",[22,0.452,460,2.545]],["body/classes/ExerciseSettings.html",[0,0.258,2,0.119,3,0.119,7,0.106,11,0.661,12,0.661,13,0.746,15,0.876,17,0.629,18,0.016,19,0.372,20,0.717,21,0.147,22,0.617,40,0.973,41,0.689,42,1.013,46,0.973,66,0.661,67,1.411,93,0.009,94,0.009,99,0.175,100,0.494,107,0.716,108,0.33,109,1.875,118,1.154,119,1.201,121,0.859,124,1.075,135,2.135,137,0.585,142,2.135,147,1.883,155,1.075,158,1.121,159,0.912,160,1.798,168,1.684,184,3.016,215,1.121,224,1.516,240,1.171,253,2.292,262,1.479,270,3.045,290,2.15,295,2.34,313,3.129,321,1.407,332,1.725,340,3.543,352,1.956,398,3.167,400,1.746,403,1.859,441,3.474,442,2.15,443,3.83,444,3.83,445,2.15,446,4.135,447,5.035,448,4.135,449,2.15,452,3.751,455,2.734,456,1.746,457,1.479,458,1.746,459,1.991,460,3.83,461,1.859,462,2.349,463,2.349,464,1.746,465,1.746,466,1.859,467,1.991,468,1.991,469,1.991,470,1.991,471,1.991,472,1.991,473,3.474,474,1.991,475,1.647,476,1.991,477,1.746,478,1.991,479,2.349,480,3.455,481,2.349,482,3.455,483,2.349,484,3.455,485,3.455,486,2.349,487,2.349,488,3.455,489,2.349,490,1.746,491,4.098,492,4.098,493,3.162,494,1.746,495,3.455,496,3.455,497,2.349,498,3.455,499,2.567,500,2.15,501,3.455,502,2.349,503,3.162,504,2.292,505,3.455,506,2.349,507,3.455,508,2.349,509,2.349,510,4.518,511,1.991,512,2.15,513,3.455,514,2.349,515,2.349,516,2.15,517,2.15,518,2.349,519,3.984,520,2.349,521,2.349,522,4.098,523,2.349,524,3.455,525,3.455,526,3.455,527,3.162,528,4.518,529,3.455,530,3.751,531,3.455,532,3.162,533,2.349,534,2.349,535,3.162,536,1.859,537,2.349,538,2.349,560,3.02,561,3.02,562,3.02]],["title/components/Features.html",[0,0.224,44,0.916]],["body/components/Features.html",[0,0.339,1,1.203,2,0.143,3,0.143,4,0.933,5,0.933,6,0.933,7,0.127,10,0.795,11,1.758,12,1.755,13,1.252,15,1.469,17,0.341,18,0.015,19,0.447,20,0.862,21,0.176,22,0.425,24,0.933,25,1.252,26,1.303,27,0.763,28,1.625,29,0.933,30,0.582,31,0.933,32,0.933,33,0.862,34,0.933,35,0.862,36,0.933,37,0.933,38,0.862,39,0.933,40,0.795,41,0.828,42,0.828,43,0.933,44,1.711,45,0.933,46,0.795,47,0.933,48,0.828,49,0.933,50,0.862,51,0.933,52,0.862,53,0.862,54,0.933,55,0.763,56,0.933,57,0.862,58,0.933,59,0.933,60,0.862,61,0.933,62,1.386,63,0.933,64,0.862,65,0.933,66,0.795,67,0.828,68,0.933,69,0.862,70,0.933,71,0.795,72,0.933,73,0.862,74,0.933,75,0.862,76,0.933,77,0.862,78,0.933,79,0.862,80,0.933,81,0.862,82,0.862,83,0.933,84,0.828,85,0.897,86,0.703,87,0.795,88,0.828,89,0.933,90,0.828,91,0.897,92,0.933,93,0.01,94,0.01,386,3.754,388,4.753,504,2.615,563,3.144,564,5.068,565,5.068,566,5.068,567,5.068,568,5.068,569,4.915,570,5.068,571,5.068,572,3.119,573,4.389,574,4.389,575,3.341,576,5.068,577,4.389,578,3.341,579,3.341,580,5.068,581,5.473,582,4.389,583,5.068,584,5.068,585,5.068,586,5.068,587,3.341,588,5.068,589,5.068,590,6.319,591,6.319,592,5.068,593,5.068,594,5.068,595,5.068,596,5.068,597,4.389,598,5.068,599,4.389,600,5.068,601,5.068,602,3.119,603,5.068,604,5.068,605,3.942,606,5.068,607,4.389,608,5.068,609,5.068,610,3.341,611,5.068,612,5.068,613,5.068]],["title/directives/FileTypeDirective.html",[27,0.811,88,0.88]],["body/directives/FileTypeDirective.html",[2,0.16,3,0.16,7,0.232,10,0.889,11,1.198,17,0.515,18,0.016,19,0.5,21,0.197,22,0.476,27,1.15,30,0.405,87,0.889,88,1.248,93,0.011,94,0.011,99,0.236,107,0.743,108,0.368,118,1.45,119,1.248,121,1.162,130,1.059,137,0.786,138,0.722,146,0.786,160,2.113,168,1.177,199,1.177,208,3.516,224,1.868,240,2.121,268,3.368,271,3.163,307,2.677,316,4.077,318,3.578,332,1.792,334,4.739,352,2.032,376,5.379,404,3.368,439,2.095,614,6.306,615,3.516,616,6.915,617,5.472,618,5.361,619,6.19,620,6.19,621,5.472,622,4.739,623,4.06,624,5.472,625,5.472,626,3.163,627,5.472,628,4.739,629,6.624,630,4.06,631,4.739,632,4.739,633,5.472,634,4.739,635,4.06,636,6.624,637,5.472,638,6.624,639,4.06,640,5.472,641,4.06,642,4.697,643,5.472,644,5.472,645,5.472,646,4.06,647,4.06,648,3.158,649,4.06,650,4.06,651,4.06,652,4.06,653,4.739,654,4.06,655,4.06,656,4.06,657,4.06,658,4.06,659,4.06,660,4.06,661,3.158,662,4.06,663,4.06,664,4.06,665,2.095]],["title/components/Header.html",[0,0.224,46,0.845]],["body/components/Header.html",[0,0.34,1,1.21,2,0.144,3,0.144,4,0.941,5,0.941,6,0.941,7,0.128,10,0.802,11,1.759,12,1.756,13,1.26,17,0.627,18,0.016,19,0.451,20,1.21,21,0.178,22,0.429,24,0.941,25,1.26,26,1.311,27,0.77,28,1.631,29,0.941,30,0.632,31,0.941,32,0.941,33,0.869,34,0.941,35,1.715,36,1.311,37,0.941,38,0.869,39,0.941,40,0.802,41,0.835,42,0.835,43,0.941,44,0.869,45,0.941,46,1.512,47,0.941,48,1.337,49,0.941,50,0.869,51,0.941,52,0.869,53,0.869,54,0.941,55,0.77,56,0.941,57,0.869,58,0.941,59,0.941,60,0.869,61,0.941,62,0.869,63,0.941,64,0.869,65,0.941,66,0.802,67,0.835,68,0.941,69,0.869,70,0.941,71,0.802,72,0.941,73,0.869,74,0.941,75,1.392,76,0.941,77,0.869,78,0.941,79,0.869,80,0.941,81,0.869,82,0.869,83,0.941,84,0.835,85,0.905,86,0.709,87,0.802,88,0.835,89,0.941,90,0.835,91,0.905,92,0.941,93,0.01,94,0.01,99,0.212,100,0.567,108,0.195,118,0.802,119,0.835,121,1.088,123,2.414,124,1.303,130,0.987,132,1.249,133,3.171,134,3.666,135,2.87,137,0.709,138,0.651,139,3.965,146,1.135,158,1.359,159,1.105,180,3.171,188,4.562,199,1.701,332,1.669,370,2.848,372,3.198,379,1.793,386,3.458,404,3.138,666,3.171,667,4.562,668,5.865,669,5.098,670,5.865,671,6.342,672,6.342,673,5.098,674,3.661,675,3.661,676,3.661,677,5.098,678,2.848,679,3.661,680,5.098,681,3.661,682,4.415]],["title/components/Home.html",[0,0.224,48,0.88]],["body/components/Home.html",[0,0.339,1,1.202,2,0.143,3,0.143,4,0.932,5,0.932,6,0.932,7,0.127,10,0.794,11,1.758,12,1.755,13,1.251,15,1.468,17,0.664,18,0.016,19,0.447,20,1.202,21,0.176,22,0.425,24,0.932,25,1.251,26,1.302,27,0.762,28,1.624,29,0.932,30,0.662,31,0.932,32,0.932,33,0.86,34,0.932,35,0.86,36,0.932,37,0.932,38,1.677,39,0.932,40,0.794,41,0.826,42,0.826,43,0.932,44,1.677,45,0.932,46,0.794,47,0.932,48,1.569,49,0.932,50,1.499,51,0.932,52,0.86,53,0.86,54,0.932,55,0.762,56,0.932,57,0.86,58,0.932,59,0.932,60,0.86,61,0.932,62,0.86,63,0.932,64,1.677,65,0.932,66,0.794,67,0.826,68,0.932,69,0.86,70,0.932,71,0.794,72,0.932,73,0.86,74,0.932,75,0.86,76,0.932,77,0.86,78,0.932,79,0.86,80,0.932,81,0.86,82,0.86,83,0.932,84,0.826,85,0.896,86,0.702,87,0.794,88,0.826,89,0.932,90,0.826,91,0.896,92,0.932,93,0.01,94,0.01,99,0.21,108,0.27,121,0.952,124,1.29,130,0.98,132,1.728,135,2.789,137,0.98,138,0.901,146,0.98,159,1.528,183,2.819,199,1.692,295,1.61,379,1.775,409,3.887,683,3.139,684,5.063,685,5.063,686,5.063,687,1.871,688,5.834,689,6.315,690,3.625,691,3.625,692,5.063,693,6.315,694,3.625,695,5.063,696,3.625,697,3.625,698,3.625,699,3.625,700,3.625,701,3.625]],["title/injectables/HttpBaseService.html",[148,1.165,216,2.231]],["body/injectables/HttpBaseService.html",[2,0.158,3,0.158,7,0.14,17,0.62,18,0.016,19,0.493,21,0.194,22,0.469,30,0.656,93,0.01,94,0.01,99,0.232,100,0.603,107,1.045,108,0.393,111,1.865,116,5.322,118,1.187,119,1.236,121,1.183,130,1.049,137,1.428,138,1.172,146,1.332,147,3.171,148,1.636,152,2.639,155,1.424,159,2.142,160,1.366,161,4.78,166,3.467,167,3.467,168,1.996,185,1.961,187,3.35,215,1.486,216,3.133,222,1.961,224,1.366,241,3.467,543,4.78,547,2.85,556,2.464,557,3.114,702,6.391,703,3.467,704,5.42,705,6.586,706,5.42,707,5.42,708,5.42,709,4.003,710,6.586,711,6.586,712,5.42,713,4.003,714,4.003,715,6.586,716,5.42,717,7.38,718,4.003,719,5.42,720,4.003,721,5.42,722,4.003,723,5.42,724,4.003,725,4.003,726,6.586,727,6.586,728,4.003,729,4.003,730,4.003]],["title/components/Landing.html",[0,0.224,50,0.916]],["body/components/Landing.html",[0,0.33,1,1.164,2,0.137,3,0.137,4,0.891,5,0.891,6,0.891,7,0.121,10,0.758,11,1.751,12,1.748,13,1.211,15,1.422,17,0.535,18,0.016,19,0.427,20,1.164,21,0.168,22,0.406,24,0.891,25,1.211,26,1.261,27,0.728,28,1.592,29,0.891,30,0.617,31,0.891,32,0.891,33,0.822,34,0.891,35,0.822,36,0.891,37,0.891,38,1.351,39,0.891,40,0.758,41,0.79,42,0.79,43,0.891,44,1.351,45,0.891,46,0.758,47,0.891,48,1.298,49,0.891,50,1.61,51,0.891,52,0.822,53,0.822,54,0.891,55,0.728,56,0.891,57,0.822,58,0.891,59,0.891,60,0.822,61,0.891,62,0.822,63,0.891,64,1.351,65,0.891,66,0.758,67,0.79,68,0.891,69,0.822,70,0.891,71,0.758,72,0.891,73,0.822,74,0.891,75,0.822,76,0.891,77,0.822,78,0.891,79,0.822,80,0.891,81,0.822,82,0.822,83,0.891,84,0.79,85,0.856,86,0.67,87,0.758,88,0.79,89,0.891,90,0.79,91,0.856,92,0.891,93,0.009,94,0.009,99,0.201,108,0.261,121,1.138,124,1.233,130,0.949,132,1.182,135,2.748,137,0.67,138,0.616,146,1.264,158,1.286,199,1.894,224,1.182,271,2.834,288,2.834,318,3.29,372,3.103,376,4.427,379,1.696,386,3.698,388,4.081,572,3.018,579,3.233,582,4.247,605,3.814,607,4.247,687,1.787,731,3,732,4.903,733,4.903,734,6.19,735,6.19,736,6.19,737,6.19,738,6.19,739,5.692,740,4.903,741,3.464,742,3.464,743,3.464,744,3.464,745,3.464,746,3.464,747,3.464,748,3.464,749,3.464,750,3.464,751,4.247,752,4.903,753,3.814,754,4.903,755,4.903,756,4.903,757,3.491,758,3.814,759,3.814,760,3.491,761,4.247,762,4.903]],["title/components/LessonPage.html",[0,0.224,52,0.916]],["body/components/LessonPage.html",[0,0.141,1,0.424,2,0.039,3,0.039,4,0.257,5,0.257,6,0.257,7,0.035,10,0.219,11,1.464,12,1.454,13,0.442,15,0.519,17,0.489,18,0.016,19,0.123,20,0.424,21,0.049,22,0.117,24,0.257,25,0.442,26,0.46,27,0.21,28,0.758,29,0.257,30,0.459,31,0.257,32,0.257,33,0.7,34,0.257,35,0.238,36,0.257,37,0.257,38,0.238,39,0.257,40,0.219,41,0.228,42,0.228,43,0.257,44,0.238,45,0.257,46,0.646,47,0.257,48,0.228,49,0.257,50,0.238,51,0.257,52,0.7,53,0.969,54,0.257,55,0.21,56,0.257,57,0.238,58,0.257,59,0.257,60,0.238,61,0.257,62,0.893,63,0.257,64,0.238,65,0.257,66,0.219,67,0.772,68,0.257,69,0.7,70,0.257,71,0.219,72,0.257,73,0.424,74,0.257,75,0.238,76,0.257,77,1.508,78,0.257,79,0.238,80,0.257,81,0.238,82,1.192,83,0.257,84,0.228,85,0.247,86,0.194,87,0.219,88,0.228,89,0.257,90,0.228,91,0.247,92,0.257,93,0.003,94,0.003,99,0.058,100,0.199,107,0.593,108,0.322,117,3.698,118,0.955,119,0.995,121,1,123,0.66,130,0.346,132,0.342,137,0.79,138,0.669,142,1.654,146,0.934,155,0.356,157,0.923,158,0.372,160,2.144,168,1.456,182,1.273,184,1.578,199,1.265,215,0.372,223,0.778,224,0.342,237,0.546,240,2.533,246,1.598,249,0.923,250,1.391,251,1.391,258,1.944,262,0.49,269,2.553,270,1.958,274,2.48,283,1.273,284,0.867,291,2.099,295,1.504,304,1.549,313,2.89,322,1.549,323,0.867,324,0.867,325,0.778,327,0.546,332,1.88,333,0.867,344,0.546,349,0.778,352,0.372,353,0.778,355,1.549,362,0.66,402,1.492,409,1.815,435,2.249,436,2.692,437,2.234,452,1.273,455,1.815,456,0.578,457,0.49,458,0.578,459,1.179,464,1.401,465,1.034,466,1.101,467,0.66,468,0.66,469,0.66,470,0.66,471,0.66,472,0.66,473,1.179,474,0.66,475,2.051,476,0.66,477,1.034,478,0.66,494,3.542,499,1.034,504,3.019,512,0.712,516,0.712,517,0.712,527,0.712,530,0.712,556,1.815,578,3.039,587,3.785,597,2.099,602,1.815,610,0.66,622,0.867,642,1.179,665,0.923,757,0.712,760,0.712,761,0.867,763,5.376,764,4.829,765,0.867,766,1.788,767,1.788,768,2.424,769,1.726,770,1.815,771,3.388,772,1.788,773,1.788,774,1.788,775,2.948,776,2.948,777,2.948,778,1.788,779,1.788,780,2.948,781,1.001,782,1.788,783,1.788,784,1.001,785,1.001,786,1.788,787,1.001,788,1.788,789,1.001,790,1.886,791,1.001,792,1.001,793,1.001,794,1.001,795,1.788,796,1.001,797,1.001,798,1.788,799,1.001,800,1.001,801,1.001,802,1.001,803,1.001,804,3.761,805,1.788,806,1.788,807,1.001,808,1.391,809,1.001,810,1.001,811,1.001,812,1.001,813,1.001,814,1.001,815,1.001,816,1.001,817,0.778,818,0.867,819,1.549,820,1.788,821,5.02,822,2.424,823,2.948,824,1.001,825,3.585,826,4.083,827,1.788,828,1.001,829,1.001,830,1.001,831,1.001,832,1.001,833,1.001,834,3.394,835,1.788,836,2.424,837,1.001,838,1.788,839,1.788,840,1.001,841,1.001,842,1.001,843,1.001,844,1.001,845,2.424,846,1.001,847,1.001,848,0.867,849,1.001,850,1.001,851,1.788,852,2.948,853,3.536,854,2.424,855,4.083,856,1.001,857,4.083,858,1.704,859,1.034,860,5.741,861,3.785,862,5.741,863,1.001,864,5.741,865,3.13,866,1.001,867,2.412,868,1.001,869,2.635,870,1.001,871,2.424,872,1.001,873,1.788,874,1.001,875,1.788,876,1.001,877,1.001,878,1.788,879,1.001,880,1.001,881,1.788,882,1.001,883,1.001,884,2.424,885,1.001,886,1.001,887,1.401,888,2.424,889,2.948,890,2.424,891,1.788,892,1.001,893,1.001,894,1.001,895,1.001,896,2.948,897,1.001,898,1.001,899,1.001,900,1.001,901,1.001,902,2.424,903,1.001,904,1.001,905,1.001,906,1.001,907,1.001,908,1.001,909,1.788,910,1.788,911,2.553,912,0.867,913,1.001,914,1.001,915,1.001,916,1.001,917,1.001,918,1.001,919,1.001,920,1.001,921,2.424,922,1.001,923,1.001,924,1.001,925,1.001,926,1.001,927,1.001,928,1.001,929,1.001,930,1.001,931,1.001,932,1.001,933,1.001,934,2.934,935,1.001,936,1.001,937,2.424,938,0.778,939,1.001,940,2.424,941,1.001,942,2.424,943,1.001,944,1.001,945,1.001,946,1.788,947,1.001,948,2.099,949,1.001,950,1.001,951,1.391,952,1.001,953,0.867,954,1.001,955,1.001,956,1.001,957,1.001,958,1.001,959,1.001,960,1.391,961,0.778,962,2.424,963,3.388,964,1.391,965,1.001,966,1.001,967,1.001,968,1.788,969,1.001,970,1.001,971,1.001,972,2.099,973,1.001,974,3.258,975,1.001,976,1.001,977,1.001,978,1.001,979,1.001,980,2.948,981,1.788,982,0.66,983,1.001,984,1.001,985,1.001,986,1.549,987,1.788,988,1.001,989,1.788,990,3.388,991,1.001,992,1.788,993,2.948,994,1.788,995,1.001,996,1.001,997,1.001,998,4.363,999,1.001,1000,1.788,1001,1.001,1002,1.001,1003,1.001,1004,0.778,1005,0.867,1006,1.001,1007,3.388,1008,1.788,1009,1.788,1010,2.099,1011,3.388,1012,1.001,1013,1.001,1014,1.001,1015,0.867,1016,1.001,1017,1.788,1018,1.001,1019,1.001,1020,1.001,1021,1.001,1022,1.001,1023,1.001,1024,1.001,1025,1.788,1026,2.948,1027,1.001,1028,1.001,1029,3.761,1030,1.001,1031,1.001,1032,1.001,1033,2.424,1034,1.001,1035,1.001,1036,1.001,1037,1.001,1038,1.001,1039,0.867,1040,1.549,1041,0.867,1042,1.788,1043,1.001,1044,2.424,1045,1.001,1046,1.001,1047,1.001,1048,1.001,1049,1.001,1050,1.001,1051,0.778,1052,1.001,1053,1.001,1054,2.948,1055,1.788,1056,1.001,1057,1.788,1058,1.788,1059,1.788,1060,1.549,1061,1.788,1062,1.001,1063,1.001,1064,1.788,1065,1.001,1066,0.778,1067,1.391,1068,1.001,1069,2.099,1070,1.001,1071,2.099,1072,1.788,1073,0.867,1074,1.001,1075,2.424,1076,1.001,1077,2.424,1078,1.788,1079,2.424,1080,1.788,1081,2.424,1082,2.424,1083,1.001,1084,2.424,1085,2.424,1086,2.424,1087,1.001,1088,1.788,1089,1.001,1090,1.001,1091,1.001,1092,1.001,1093,5.194,1094,1.788,1095,1.788,1096,1.788,1097,2.948,1098,1.788,1099,1.788,1100,1.788,1101,1.549,1102,1.549,1103,2.948,1104,1.788]],["title/injectables/LessonService.html",[148,1.165,770,2.376]],["body/injectables/LessonService.html",[2,0.135,3,0.135,7,0.12,17,0.579,18,0.016,19,0.421,21,0.166,22,0.4,30,0.707,67,0.779,93,0.009,94,0.009,99,0.198,100,0.54,105,5.329,107,1.099,108,0.378,111,1.592,118,0.748,119,0.779,121,1.178,130,0.94,137,1.374,138,1.263,146,1.374,147,3.277,148,1.466,155,1.216,168,2.059,185,1.674,187,3.354,211,3.458,215,1.269,216,1.975,217,2.433,222,1.674,240,2.618,361,4.627,362,4.886,437,4.83,439,3.485,494,2.807,504,2.506,587,2.253,770,2.99,834,2.658,853,2.96,911,5.329,1105,2.96,1106,4.857,1107,4.857,1108,4.857,1109,4.857,1110,4.857,1111,4.857,1112,4.857,1113,4.857,1114,4.857,1115,3.418,1116,5.329,1117,4.857,1118,3.418,1119,4.857,1120,3.418,1121,4.857,1122,3.418,1123,4.857,1124,6.153,1125,3.418,1126,4.857,1127,6.153,1128,6.149,1129,4.015,1130,3.418,1131,4.857,1132,6.153,1133,3.418,1134,4.857,1135,3.418,1136,3.418,1137,3.418,1138,3.418,1139,4.857,1140,3.418,1141,3.418,1142,3.418,1143,3.418,1144,3.418,1145,3.418,1146,3.418,1147,4.857,1148,3.418,1149,3.418]],["title/components/Login.html",[0,0.224,55,0.811]],["body/components/Login.html",[0,0.301,1,1.033,2,0.116,3,0.116,4,0.755,5,0.755,6,0.755,7,0.103,10,0.643,11,1.727,12,1.723,13,1.075,17,0.539,18,0.016,19,0.362,20,1.033,21,0.143,22,0.344,24,0.755,25,1.075,26,1.119,27,0.617,28,1.474,29,0.755,30,0.571,31,0.755,32,0.755,33,0.697,34,0.755,35,0.697,36,0.755,37,0.755,38,0.697,39,0.755,40,0.643,41,0.67,42,0.67,43,0.755,44,0.697,45,0.755,46,0.643,47,0.755,48,0.67,49,0.755,50,0.697,51,0.755,52,0.697,53,0.697,54,0.755,55,1.347,56,0.755,57,0.697,58,0.755,59,0.755,60,0.697,61,0.755,62,0.697,63,0.755,64,0.697,65,0.755,66,0.643,67,0.67,68,0.755,69,0.697,70,0.755,71,0.643,72,0.755,73,0.697,74,0.755,75,0.697,76,0.755,77,0.697,78,0.755,79,0.697,80,0.755,81,0.697,82,0.697,83,0.755,84,0.67,85,0.726,86,1.421,87,0.643,88,0.67,89,0.755,90,0.67,91,0.726,92,0.755,93,0.008,94,0.008,99,0.17,100,0.484,107,0.704,108,0.341,118,1.34,119,1.395,121,1.154,124,1.045,130,0.842,132,1.485,134,3.313,135,2.596,137,0.569,138,0.523,142,2.1,146,0.842,159,0.887,160,1.003,199,1.262,215,1.091,224,1.485,229,4.282,231,3.385,237,2.372,242,2.544,244,2.544,253,2.675,262,2.539,307,2.869,313,2.197,320,2.091,321,1.369,332,0.962,340,2.246,344,2.826,352,1.925,386,3.494,387,2.869,412,1.601,415,4.034,490,3.313,579,2.869,661,3.385,678,2.285,687,1.516,753,3.385,982,1.937,1150,2.544,1151,4.351,1152,4.489,1153,4.489,1154,4.489,1155,4.963,1156,4.351,1157,2.937,1158,2.937,1159,3.769,1160,2.937,1161,4.76,1162,3.769,1163,2.937,1164,2.937,1165,2.937,1166,3.769,1167,2.937,1168,2.937,1169,4.489,1170,1.808,1171,2.544,1172,2.544,1173,2.285,1174,2.544,1175,2.544,1176,2.544,1177,2.937,1178,2.937,1179,2.544,1180,2.544,1181,2.937,1182,2.544,1183,2.937,1184,2.937,1185,2.937,1186,2.937,1187,2.937,1188,2.937,1189,2.285,1190,2.937,1191,4.351,1192,3.385,1193,3.769,1194,3.769,1195,3.769,1196,3.769,1197,2.544,1198,2.544,1199,3.769,1200,3.769,1201,3.769,1202,4.351,1203,2.544,1204,2.544]],["title/interfaces/LoginPayload.html",[95,0.716,1205,2.376]],["body/interfaces/LoginPayload.html",[2,0.213,3,0.213,7,0.189,17,0.509,18,0.016,21,0.358,30,0.539,86,1.463,93,0.013,94,0.013,95,1.369,97,1.925,99,0.314,100,0.731,107,1.094,108,0.35,109,1.925,190,3.566,193,3.566,206,3.127,218,3.394,229,4.368,249,2.791,344,2.949,1205,4.049,1206,3.566,1207,3.566,1208,3.851,1209,3.329,1210,3.851,1211,3.329,1212,3.127]],["title/interfaces/LoginResponse.html",[95,0.716,206,2.231]],["body/interfaces/LoginResponse.html",[2,0.21,3,0.21,7,0.187,17,0.501,18,0.016,21,0.356,30,0.531,86,1.262,93,0.013,94,0.013,95,1.362,97,1.897,99,0.309,100,0.725,107,1.092,108,0.375,109,1.897,190,4.838,193,4.838,206,3.768,218,3.787,229,3.768,249,2.751,344,4.001,1205,3.281,1206,3.515,1207,3.515,1208,3.795,1209,3.281,1210,3.795,1211,3.281,1212,3.081]],["title/pipes/MarkdownPipe.html",[254,2.376,327,2.104]],["body/pipes/MarkdownPipe.html",[2,0.192,3,0.192,7,0.17,10,1.066,17,0.668,18,0.016,19,0.6,21,0.236,22,0.57,25,1.67,30,0.674,93,0.012,94,0.012,100,0.541,107,0.918,108,0.259,118,1.066,119,1.541,121,1.005,130,0.942,137,0.942,138,0.866,146,0.942,157,2.511,158,1.807,159,1.86,160,1.661,168,1.786,224,2.102,240,2.62,254,3.792,327,3.359,332,2.52,404,3.792,1040,5.854,1213,4.215,1214,5.854,1215,4.215,1216,5.058,1217,4.866,1218,6.16,1219,4.866,1220,6.759,1221,6.16,1222,6.759,1223,6.16,1224,6.16,1225,6.16,1226,4.866,1227,6.16,1228,6.16,1229,4.215,1230,3.785,1231,4.866,1232,4.215,1233,4.866,1234,4.866,1235,4.866]],["title/components/NamingUpload.html",[0,0.224,57,0.916]],["body/components/NamingUpload.html",[0,0.197,1,0.806,2,0.084,3,0.084,4,0.547,5,0.547,6,0.547,7,0.25,10,0.466,11,1.662,12,1.657,13,0.526,15,0.617,17,0.556,18,0.016,19,0.262,20,0.505,24,0.547,25,0.839,26,0.873,27,0.447,28,1.243,29,0.547,30,0.713,31,0.547,32,0.547,33,0.505,34,0.547,35,0.505,36,0.547,37,0.547,38,0.505,39,0.547,40,0.927,41,0.774,42,0.966,43,0.547,44,0.505,45,0.547,46,0.927,47,0.547,48,0.485,49,0.547,50,0.505,51,0.547,52,0.505,53,0.505,54,0.547,55,0.447,56,0.547,57,1.005,58,1.243,59,0.547,60,0.505,61,0.547,62,0.505,63,0.547,64,0.505,65,0.547,66,0.466,67,0.485,68,0.547,69,0.505,70,0.547,71,0.466,72,0.547,73,0.505,74,0.547,75,0.505,76,0.547,77,0.505,78,0.547,79,0.505,80,0.547,81,0.505,82,0.505,83,0.547,84,0.485,85,0.526,86,0.412,87,0.466,88,0.485,89,0.547,90,0.485,91,0.526,92,0.547,93,0.007,94,0.007,99,0.246,100,0.377,107,0.461,108,0.345,118,1.233,119,1.284,121,1.144,124,0.757,130,0.657,132,0.726,135,1.959,137,1.187,138,1.091,142,1.716,146,1.187,159,1.025,160,0.726,168,1.228,184,2.623,199,1.713,204,1.515,215,0.79,224,1.65,237,1.16,240,0.825,253,1.752,262,1.663,285,2.09,288,2.448,295,2.147,313,2.6,321,0.991,329,3.712,332,0.697,340,3.416,351,1.515,352,1.573,356,1.655,361,1.515,387,2.238,398,3.864,400,1.23,403,1.31,415,1.403,456,1.23,457,1.042,458,1.23,464,1.962,465,1.23,475,1.16,490,2.794,499,1.23,503,2.417,572,2.976,573,2.94,574,2.94,575,4.044,578,1.403,579,2.238,626,1.23,631,2.94,632,5.615,642,3.712,653,1.843,687,1.098,861,1.403,865,1.851,867,1.515,948,4.936,1170,2.607,1189,3.295,1236,5.046,1237,5.513,1238,1.843,1239,2.128,1240,2.128,1241,3.395,1242,2.417,1243,3.395,1244,3.395,1245,3.395,1246,3.395,1247,3.395,1248,3.395,1249,3.395,1250,3.395,1251,3.395,1252,2.128,1253,4.235,1254,2.128,1255,4.834,1256,2.128,1257,2.128,1258,5.629,1259,2.128,1260,2.128,1261,2.128,1262,2.128,1263,2.128,1264,2.128,1265,2.128,1266,2.128,1267,3.395,1268,2.128,1269,2.128,1270,2.128,1271,2.128,1272,1.843,1273,2.128,1274,2.128,1275,1.403,1276,1.843,1277,2.128,1278,2.128,1279,2.128,1280,2.128,1281,4.834,1282,2.128,1283,2.128,1284,2.128,1285,4.834,1286,2.128,1287,2.128,1288,2.128,1289,2.128,1290,2.128,1291,2.128,1292,4.574,1293,3.395,1294,3.395,1295,2.128,1296,3.395,1297,2.128,1298,2.128,1299,2.128,1300,2.128,1301,2.128,1302,2.128,1303,2.128,1304,3.668,1305,1.843,1306,1.655,1307,2.128,1308,2.128,1309,2.128,1310,4.834,1311,2.128,1312,2.128,1313,2.128,1314,4.875,1315,2.128,1316,2.128,1317,2.128,1318,2.128,1319,3.395,1320,2.128,1321,2.128,1322,2.128,1323,2.128,1324,2.128,1325,1.515,1326,3.295,1327,2.128,1328,3.015,1329,3.015,1330,2.128,1331,2.128,1332,3.395,1333,3.395,1334,2.128,1335,2.417,1336,2.94,1337,3.395,1338,3.395,1339,3.395,1340,3.395,1341,3.395,1342,3.395,1343,2.94,1344,2.128]],["title/components/NotFound.html",[0,0.224,60,0.916]],["body/components/NotFound.html",[0,0.357,1,1.291,2,0.159,3,0.159,4,1.034,5,1.034,6,1.034,7,0.141,10,0.881,11,1.771,12,1.769,13,1.343,15,1.577,17,0.579,18,0.015,19,0.496,20,1.291,21,0.195,22,0.471,24,1.034,25,1.343,26,1.398,27,0.845,28,1.697,29,1.034,30,0.658,31,1.034,32,1.034,33,0.955,34,1.034,35,0.955,36,1.034,37,1.034,38,0.955,39,1.034,40,0.881,41,0.917,42,0.917,43,1.034,44,0.955,45,1.034,46,0.881,47,1.034,48,1.404,49,1.034,50,0.955,51,1.034,52,0.955,53,0.955,54,1.034,55,0.845,56,1.034,57,0.955,58,1.034,59,1.034,60,1.566,61,1.034,62,0.955,63,1.034,64,0.955,65,1.034,66,0.881,67,0.917,68,1.034,69,0.955,70,1.034,71,0.881,72,1.034,73,0.955,74,1.034,75,0.955,76,1.034,77,0.955,78,1.034,79,0.955,80,1.034,81,0.955,82,0.955,83,1.034,84,0.917,85,0.994,86,0.778,87,0.881,88,0.917,89,1.034,90,0.917,91,0.994,92,1.034,93,0.011,94,0.011,99,0.233,108,0.214,121,0.887,124,1.431,130,1.052,132,1.373,135,2.879,137,0.778,138,0.715,146,0.778,158,1.493,182,3.871,199,1.166,372,3.358,379,1.97,687,2.075,951,5.133,1192,4.229,1345,5.335,1346,4.792,1347,3.483,1348,5.437,1349,5.437,1350,6.599,1351,4.022,1352,4.022,1353,4.022,1354,5.437]],["title/injectables/NotificationService.html",[148,1.165,1275,2.545]],["body/injectables/NotificationService.html",[2,0.224,3,0.169,7,0.15,17,0.402,18,0.016,19,0.527,21,0.275,22,0.501,30,0.633,93,0.011,94,0.011,99,0.248,100,0.63,107,1.03,108,0.404,111,1.992,118,1.541,119,1.604,121,1.203,123,2.819,130,1.097,137,1.23,138,1.252,146,1.309,148,1.71,159,1.918,177,5.858,185,2.094,199,1.961,222,2.094,249,3.278,352,1.588,439,3.865,1212,2.471,1275,3.735,1355,3.326,1356,6.353,1357,5.665,1358,5.665,1359,5.665,1360,4.276,1361,5.665,1362,5.261,1363,5.738,1364,7.768,1365,4.276,1366,5.665,1367,5.665,1368,4.276,1369,5.665,1370,5.665,1371,4.276,1372,5.665,1373,4.276,1374,5.858,1375,4.276,1376,4.276,1377,3.326,1378,4.276,1379,4.276,1380,4.276,1381,4.276,1382,4.276,1383,4.276,1384,4.276,1385,4.276,1386,4.276,1387,4.276]],["title/directives/PasswordValidator.html",[27,0.811,90,0.88]],["body/directives/PasswordValidator.html",[2,0.195,3,0.195,7,0.173,10,1.08,11,1.36,17,0.584,18,0.016,19,0.608,21,0.24,22,0.578,27,1.306,30,0.491,87,1.08,90,1.628,91,1.535,93,0.012,94,0.012,99,0.286,108,0.263,121,0.805,130,1.202,137,0.955,138,0.877,146,0.955,157,3.206,160,2.321,168,1.972,240,2.853,321,2.298,332,2.227,493,4.423,1388,5.38,1389,4.271,1390,5.89,1391,4.832,1392,6.212,1393,7.139,1394,4.932,1395,4.932,1396,6.801,1397,6.212,1398,4.271,1399,4.932,1400,4.271,1401,4.932,1402,4.932,1403,6.212,1404,4.932,1405,4.932,1406,3.836,1407,4.932,1408,4.932,1409,6.212,1410,4.932,1411,6.212,1412,4.932,1413,4.932]],["title/interfaces/Plan.html",[95,0.716,1414,2.376]],["body/interfaces/Plan.html",[2,0.213,3,0.213,7,0.189,18,0.015,21,0.319,30,0.734,93,0.013,94,0.013,95,1.219,97,1.921,99,0.313,100,0.73,107,1.066,108,0.402,109,1.921,435,2.515,439,4.079,1414,4.536,1415,4.199,1416,6.382,1417,6.382,1418,6.382,1419,3.322,1420,4.675,1421,4.675,1422,4.675]],["title/components/Practice.html",[0,0.224,62,0.916]],["body/components/Practice.html",[0,0.248,1,0.816,2,0.085,3,0.085,4,0.556,5,0.556,6,0.556,7,0.076,10,0.473,11,1.671,12,1.666,13,0.849,15,0.997,17,0.533,18,0.016,19,0.266,20,0.816,21,0.105,22,0.253,24,0.556,25,0.849,26,0.884,27,0.454,28,1.254,29,0.556,30,0.565,31,0.556,32,0.556,33,0.513,34,0.556,35,0.513,36,0.556,37,0.556,38,0.513,39,0.556,40,0.473,41,0.493,42,0.493,43,0.556,44,0.513,45,0.556,46,0.473,47,0.556,48,0.493,49,0.556,50,0.513,51,0.556,52,0.513,53,0.513,54,0.556,55,0.454,56,0.556,57,0.513,58,0.556,59,0.556,60,0.513,61,0.556,62,1.346,63,0.556,64,0.513,65,0.556,66,0.473,67,1.449,68,0.556,69,0.513,70,0.556,71,0.473,72,0.556,73,0.513,74,0.556,75,0.513,76,0.556,77,0.513,78,0.556,79,0.513,80,0.556,81,0.513,82,0.513,83,0.556,84,0.493,85,0.534,86,0.418,87,0.473,88,0.493,89,0.556,90,0.493,91,0.534,92,0.556,93,0.007,94,0.007,99,0.125,100,0.382,103,2.978,107,0.663,108,0.354,118,0.937,119,0.976,121,1.148,130,0.665,137,0.828,138,0.761,142,2.157,146,1.03,147,2.068,153,1.872,155,0.769,159,1.292,160,1.935,168,1.414,184,1.994,199,1.414,215,0.803,240,2.064,253,2.209,254,2.635,262,2.096,268,2.116,270,2.474,271,1.987,282,3.707,285,2.116,286,1.872,291,2.448,295,1.527,313,2.068,316,3.002,318,2.819,321,1.007,326,1.682,327,1.179,332,0.708,340,2.209,352,0.803,353,1.682,380,1.872,381,1.331,402,1.331,435,1.817,437,2.822,438,1.874,459,1.425,477,1.25,494,1.25,504,1.116,511,2.267,545,4.224,602,1.331,610,1.425,642,2.822,665,1.774,760,1.539,769,3.79,770,3.002,808,2.674,817,1.682,819,2.978,858,2.819,859,1.987,861,3.216,865,1.179,887,3.277,982,1.425,1005,1.872,1015,2.978,1066,2.674,1067,2.674,1069,1.872,1071,3.707,1073,1.872,1101,1.872,1102,1.872,1116,3.707,1128,2.978,1129,2.474,1242,1.539,1423,1.872,1424,3.438,1425,3.438,1426,4.28,1427,3.438,1428,3.438,1429,5.669,1430,3.438,1431,4.28,1432,4.28,1433,4.28,1434,2.162,1435,2.162,1436,2.162,1437,2.162,1438,2.162,1439,2.162,1440,2.162,1441,2.162,1442,2.162,1443,2.162,1444,2.162,1445,2.162,1446,3.438,1447,2.162,1448,2.162,1449,2.162,1450,2.162,1451,2.162,1452,2.162,1453,2.162,1454,3.438,1455,4.28,1456,4.28,1457,3.438,1458,2.162,1459,2.162,1460,2.162,1461,2.162,1462,2.162,1463,3.438,1464,2.162,1465,4.28,1466,4.28,1467,4.878,1468,2.162,1469,2.162,1470,2.162,1471,2.162,1472,3.438,1473,2.162,1474,4.878,1475,5.669,1476,3.438,1477,2.162,1478,2.162,1479,3.438,1480,5.669,1481,1.539,1482,1.539,1483,2.162,1484,3.438,1485,2.162,1486,2.162,1487,2.162,1488,2.162,1489,4.28,1490,2.162,1491,2.162,1492,2.162,1493,2.162,1494,2.162,1495,2.162,1496,2.162,1497,2.162,1498,2.162,1499,2.162,1500,2.162,1501,4.878,1502,3.438,1503,2.162,1504,2.162,1505,2.162,1506,2.162,1507,3.438,1508,2.162,1509,2.162,1510,2.162,1511,1.872,1512,2.162,1513,2.162,1514,2.162,1515,3.707,1516,5.323,1517,3.438,1518,3.438,1519,2.162,1520,3.438,1521,2.162,1522,2.162,1523,2.162,1524,2.162,1525,2.162,1526,2.162,1527,2.162,1528,2.162,1529,2.162,1530,1.872,1531,2.162,1532,2.162,1533,4.878,1534,3.438,1535,3.438]],["title/components/Pricing.html",[0,0.224,64,0.916]],["body/components/Pricing.html",[0,0.327,1,1.149,2,0.134,3,0.134,4,0.874,5,0.874,6,0.874,7,0.119,10,0.744,11,1.749,12,1.746,13,1.196,15,1.403,17,0.32,18,0.015,19,0.419,20,0.807,21,0.165,22,0.398,24,0.874,25,1.196,26,1.244,27,0.715,28,1.578,29,0.874,30,0.561,31,0.874,32,0.874,33,0.807,34,0.874,35,0.807,36,0.874,37,0.874,38,0.807,39,0.874,40,0.744,41,0.775,42,0.775,43,0.874,44,1.646,45,0.874,46,0.744,47,0.874,48,0.775,49,0.874,50,0.807,51,0.874,52,0.807,53,0.807,54,0.874,55,0.715,56,0.874,57,0.807,58,0.874,59,0.874,60,0.807,61,0.874,62,0.807,63,0.874,64,1.6,65,0.874,66,0.744,67,0.775,68,0.874,69,0.807,70,0.874,71,0.744,72,0.874,73,0.807,74,0.874,75,0.807,76,0.874,77,0.807,78,0.874,79,0.807,80,0.874,81,0.807,82,0.807,83,0.874,84,0.775,85,0.84,86,0.658,87,0.744,88,0.775,89,0.874,90,0.775,91,0.84,92,0.874,93,0.009,94,0.009,231,5.691,288,2.797,329,3.19,381,3.778,386,2.638,387,3.19,475,2.638,536,2.978,569,3.764,572,4.15,575,4.047,579,4.929,634,4.191,751,4.191,757,3.445,758,3.764,759,4.774,964,4.774,1041,4.191,1051,3.764,1193,4.191,1314,4.191,1335,3.445,1406,3.764,1515,4.191,1536,2.944,1537,4.839,1538,4.839,1539,4.839,1540,4.839,1541,4.839,1542,6.138,1543,4.839,1544,4.839,1545,6.138,1546,4.839,1547,4.839,1548,7.476,1549,4.839,1550,6.741,1551,4.191,1552,4.191,1553,4.839,1554,6.138,1555,4.839,1556,4.839,1557,4.839,1558,4.839,1559,4.839,1560,4.839,1561,4.191,1562,4.839,1563,4.191,1564,4.839,1565,6.138,1566,4.839,1567,4.839,1568,4.191,1569,4.839,1570,4.839,1571,4.839]],["title/interfaces/QuestionModel.html",[95,0.716,438,2.104]],["body/interfaces/QuestionModel.html",[2,0.183,3,0.183,7,0.162,18,0.016,21,0.339,93,0.012,94,0.012,95,1.227,97,1.651,99,0.269,100,0.664,107,1.093,108,0.419,109,2.352,138,1.315,240,3.048,412,3.938,435,2.567,438,3.257,602,4.446,626,3.453,665,2.394,858,3.453,859,3.82,865,3.257,887,2.681,1129,2.681,1481,5.142,1482,5.142,1572,3.058,1573,4.602,1574,4.762,1575,3.608,1576,3.608]],["title/interfaces/QuestionOption.html",[95,0.716,1573,2.545]],["body/interfaces/QuestionOption.html",[2,0.192,3,0.192,7,0.17,18,0.016,21,0.345,93,0.012,94,0.012,95,1.254,97,1.729,99,0.282,100,0.684,107,1.093,108,0.41,109,2.705,240,2.901,412,3.994,435,2.594,438,2.648,602,3.787,626,3.556,665,2.507,858,3.556,859,3.904,865,3.994,887,2.808,1129,2.808,1481,4.381,1482,4.381,1572,3.203,1573,4.453,1574,4.453,1575,5.522,1576,5.522]],["title/components/QuestionSettings.html",[0,0.224,66,0.845]],["body/components/QuestionSettings.html",[0,0.249,1,0.82,2,0.086,3,0.086,4,0.56,5,0.56,6,0.56,7,0.076,10,0.477,11,1.673,12,1.667,13,0.854,15,1.002,17,0.561,18,0.016,19,0.268,20,0.82,21,0.106,22,0.504,24,0.56,25,0.854,26,0.889,27,0.458,28,1.259,29,0.56,30,0.567,31,0.56,32,0.56,33,0.517,34,0.56,35,0.517,36,0.56,37,0.56,38,0.517,39,0.56,40,1.072,41,0.788,42,0.98,43,0.56,44,0.517,45,0.56,46,1.072,47,0.56,48,0.496,49,0.56,50,0.517,51,0.56,52,0.517,53,1.268,54,0.56,55,0.458,56,0.56,57,0.517,58,0.56,59,0.56,60,0.517,61,0.56,62,1.268,63,0.56,64,0.517,65,0.56,66,1.072,67,1.569,68,0.56,69,0.517,70,0.56,71,0.477,72,0.56,73,0.517,74,0.56,75,0.517,76,0.56,77,0.517,78,0.56,79,0.517,80,0.56,81,0.517,82,1.02,83,0.56,84,0.496,85,0.538,86,0.421,87,0.477,88,0.496,89,0.56,90,0.496,91,0.538,92,0.56,93,0.007,94,0.007,99,0.126,100,0.384,107,0.584,108,0.303,109,1.23,118,1.169,119,1.218,121,1.039,124,0.775,130,0.669,132,0.743,135,2.304,137,0.948,138,0.765,142,2.164,146,0.832,147,1.465,155,0.775,158,0.808,159,0.657,160,1.467,168,1.42,184,2.649,199,1.247,215,0.808,224,1.671,240,0.844,253,2.219,262,2.106,270,3.087,290,1.55,295,1.909,313,2.916,321,1.014,332,1.408,340,3.191,352,1.596,362,3.228,381,3.806,398,3.559,400,1.258,403,1.34,436,2.279,441,3.749,443,4.304,444,4.304,445,1.55,446,4.048,447,3.808,448,2.461,449,1.55,452,2.461,455,3.014,456,1.258,457,1.066,458,1.258,459,1.435,460,3.749,461,2.128,462,2.689,463,2.689,464,2.485,465,1.998,466,2.646,467,1.435,468,1.435,469,1.435,470,1.435,471,1.435,472,1.435,473,2.835,474,1.435,475,1.187,476,1.435,477,1.258,478,1.435,479,2.689,480,2.689,481,1.693,482,2.689,483,1.693,484,2.689,485,2.689,486,2.689,487,1.693,488,2.689,489,1.693,490,2.83,491,3.344,492,3.344,493,2.461,494,2.485,495,2.689,496,2.689,497,1.693,498,2.689,499,1.998,500,4.535,501,2.689,502,1.693,503,2.461,504,3.498,505,2.689,506,1.693,507,2.689,508,1.693,509,1.693,510,3.808,511,1.435,512,1.55,513,2.689,514,1.693,515,1.693,516,1.55,517,1.55,518,1.693,519,3.5,520,1.693,521,1.693,522,3.344,523,1.693,524,2.689,525,2.689,526,2.689,527,2.461,528,3.808,529,2.689,530,3.061,531,2.689,532,2.461,533,1.693,534,1.693,535,2.461,536,2.646,537,1.693,538,1.693,626,2.83,642,2.279,665,2.527,687,1.123,858,3.574,859,2.83,887,2.83,964,2.689,986,2.994,1577,3.456,1578,3.456,1579,3.456,1580,2.177,1581,2.177,1582,2.177,1583,2.177,1584,2.177,1585,2.177,1586,2.177,1587,2.994,1588,3.456,1589,3.456]],["title/interfaces/SaveQuestionData.html",[95,0.716,1129,2.231]],["body/interfaces/SaveQuestionData.html",[2,0.185,3,0.185,7,0.164,18,0.016,21,0.34,93,0.012,94,0.012,95,1.232,97,1.666,99,0.272,100,0.668,107,1.089,108,0.421,109,2.362,138,1.319,195,4.674,240,3.051,412,3.276,435,2.572,438,2.552,602,4.458,626,3.473,665,2.415,858,3.473,859,3.836,865,3.276,887,2.705,1129,3.473,1481,5.156,1482,5.156,1572,3.086,1573,3.962,1574,4.775,1575,3.641,1576,3.641]],["title/components/Sidebar.html",[0,0.224,69,0.916]],["body/components/Sidebar.html",[0,0.325,1,1.138,2,0.132,3,0.132,4,0.863,5,0.863,6,0.863,7,0.117,10,0.735,11,1.747,12,1.744,13,1.184,15,1.39,17,0.451,18,0.016,19,0.413,20,1.138,21,0.163,22,0.393,24,0.863,25,1.184,26,1.233,27,0.705,28,1.569,29,0.863,30,0.643,31,0.863,32,0.863,33,0.796,34,0.863,35,0.796,36,0.863,37,0.863,38,0.796,39,0.863,40,0.735,41,0.765,42,0.765,43,0.863,44,0.796,45,0.863,46,0.735,47,0.863,48,0.765,49,0.863,50,0.796,51,0.863,52,0.796,53,0.796,54,0.863,55,0.705,56,0.863,57,0.796,58,0.863,59,0.863,60,0.796,61,0.863,62,0.796,63,0.863,64,0.796,65,0.863,66,0.735,67,0.765,68,0.863,69,1.593,70,0.863,71,0.735,72,0.863,73,1.328,74,0.863,75,0.796,76,0.863,77,1.328,78,0.863,79,0.796,80,0.863,81,0.796,82,1.532,83,0.863,84,0.765,85,0.829,86,0.649,87,0.735,88,0.765,89,0.863,90,0.765,91,0.829,92,0.863,93,0.009,94,0.009,99,0.195,107,0.977,108,0.389,121,1.095,124,1.194,130,0.928,137,0.928,138,0.853,146,1.083,160,1.145,199,1.622,268,2.951,271,2.771,285,3.756,291,2.389,316,3.443,318,2.771,435,2.082,494,2.771,504,2.474,587,3.688,667,4.35,769,3.982,790,3.729,960,3.729,961,3.729,972,4.152,974,4.152,1010,4.152,1060,2.906,1192,3.729,1590,2.906,1591,4.794,1592,4.794,1593,6.101,1594,4.794,1595,4.794,1596,5.593,1597,3.355,1598,3.355,1599,3.355,1600,3.355,1601,4.794,1602,3.355,1603,4.794,1604,3.355,1605,3.355,1606,3.355,1607,6.101,1608,3.355,1609,3.355,1610,4.794,1611,4.794,1612,4.794]],["title/components/Signup.html",[0,0.224,71,0.845]],["body/components/Signup.html",[0,0.277,1,0.931,2,0.101,3,0.101,4,0.658,5,0.658,6,0.658,7,0.09,10,0.56,11,1.703,12,1.699,13,0.969,17,0.542,18,0.016,19,0.315,20,0.931,21,0.124,22,0.3,24,0.658,25,0.969,26,1.008,27,0.538,28,1.374,29,0.658,30,0.719,31,0.658,32,0.658,33,0.607,34,0.658,35,0.607,36,0.658,37,0.658,38,0.607,39,0.658,40,0.56,41,0.583,42,0.583,43,0.658,44,0.607,45,0.658,46,0.56,47,0.658,48,0.583,49,0.658,50,0.607,51,0.658,52,0.607,53,0.607,54,0.658,55,0.538,56,0.658,57,0.607,58,0.658,59,0.658,60,0.607,61,0.658,62,0.607,63,0.658,64,0.607,65,0.658,66,0.56,67,0.583,68,0.658,69,0.607,70,0.658,71,1.331,72,0.658,73,1.131,74,0.658,75,0.607,76,0.658,77,0.607,78,0.658,79,0.607,80,0.658,81,0.607,82,0.607,83,0.658,84,0.583,85,0.632,86,1.365,87,0.56,88,0.583,89,0.658,90,1.218,91,0.632,92,0.658,93,0.008,94,0.008,99,0.148,100,0.436,107,0.783,108,0.364,118,1.386,119,1.443,121,1.177,124,0.91,130,0.759,132,0.873,134,3.089,135,2.463,137,0.495,138,0.455,142,1.931,146,0.759,158,0.95,183,1.989,199,1.137,215,0.95,227,1.989,228,1.989,229,4.21,237,2.137,253,2.46,262,2.335,288,1.478,307,3.523,313,2.021,320,1.821,321,1.192,332,0.838,340,2.023,349,3.049,352,1.77,382,4.128,386,3.56,412,1.394,415,4.414,446,2.791,477,3.331,490,3.089,577,3.395,605,3.049,661,3.049,678,1.989,687,1.32,760,3.805,982,1.686,1152,4.128,1153,4.128,1154,4.128,1155,4.628,1159,3.395,1161,5.207,1162,3.395,1166,3.395,1169,4.128,1170,1.574,1171,2.215,1172,2.215,1173,1.989,1174,2.215,1175,2.215,1176,2.215,1179,2.215,1180,2.215,1182,3.395,1189,3.049,1194,3.395,1195,3.395,1196,3.395,1197,2.215,1198,2.215,1199,3.395,1200,3.395,1201,3.395,1203,2.215,1204,2.215,1328,2.791,1329,1.821,1390,2.215,1406,3.049,1613,2.215,1614,3.92,1615,4.767,1616,4.767,1617,4.767,1618,4.767,1619,3.92,1620,2.558,1621,2.558,1622,2.558,1623,2.558,1624,2.558,1625,2.558,1626,3.92,1627,2.558,1628,2.558,1629,3.92,1630,2.558,1631,2.558,1632,2.558,1633,2.558,1634,2.558,1635,2.558,1636,2.558,1637,2.558,1638,3.92,1639,2.558,1640,2.558,1641,2.558,1642,2.558,1643,3.92,1644,2.558,1645,3.92,1646,3.92,1647,3.92,1648,3.92,1649,3.92,1650,3.92,1651,3.92,1652,3.92,1653,2.558,1654,2.558,1655,3.92,1656,3.92,1657,3.92,1658,3.92,1659,2.558,1660,2.558]],["title/interfaces/SignupPayload.html",[95,0.716,1209,2.376]],["body/interfaces/SignupPayload.html",[2,0.207,3,0.207,7,0.184,17,0.494,18,0.016,21,0.355,30,0.728,86,1.451,93,0.013,94,0.013,95,1.355,97,1.87,99,0.305,100,0.718,107,1.101,108,0.389,109,1.87,190,3.464,193,3.464,206,3.037,218,3.335,229,4.333,249,2.711,344,2.865,1205,3.234,1206,3.464,1207,3.464,1208,3.741,1209,3.978,1210,5.198,1211,3.234,1212,3.037]],["title/components/Subjects.html",[0,0.224,73,0.916]],["body/components/Subjects.html",[0,0.277,1,0.933,2,0.101,3,0.101,4,0.66,5,0.66,6,0.66,7,0.09,10,0.562,11,1.704,12,1.7,13,0.972,15,1.14,17,0.573,18,0.016,19,0.316,20,0.933,21,0.125,22,0.301,24,0.66,25,0.972,26,1.011,27,0.54,28,1.377,29,0.66,30,0.712,31,0.66,32,0.66,33,0.609,34,0.66,35,0.609,36,0.66,37,0.66,38,0.609,39,0.66,40,0.562,41,0.585,42,0.585,43,0.66,44,0.609,45,0.66,46,1.173,47,0.66,48,0.585,49,0.66,50,0.609,51,0.66,52,0.609,53,0.933,54,0.66,55,0.54,56,0.66,57,0.609,58,0.66,59,0.66,60,0.609,61,0.66,62,0.933,63,0.66,64,0.609,65,0.66,66,0.562,67,0.897,68,0.66,69,0.609,70,0.66,71,0.562,72,0.66,73,1.757,74,0.66,75,0.609,76,0.66,77,0.609,78,0.66,79,0.609,80,0.66,81,0.609,82,1.134,83,0.66,84,0.585,85,0.634,86,0.497,87,0.562,88,0.585,89,0.66,90,0.585,91,0.634,92,0.66,93,0.008,94,0.008,99,0.149,100,0.437,108,0.285,118,1.046,119,1.09,121,0.993,124,0.914,130,0.761,132,0.876,135,2.467,137,0.761,138,0.7,142,1.04,146,0.761,157,2.029,158,0.953,159,0.775,184,1.832,199,1.386,215,0.953,224,2.409,237,1.4,283,2.8,285,2.42,288,1.484,295,2.378,329,4.015,351,1.828,352,0.953,372,2.605,379,1.258,388,2.593,402,2.941,409,3.296,435,2.231,455,3.296,456,1.484,457,1.258,458,1.484,461,1.581,464,2.762,465,2.273,466,2.941,519,4.024,535,2.8,569,3.059,572,2.42,610,3.531,628,5.662,665,1.325,667,3.717,687,1.325,753,3.059,757,2.8,759,3.059,825,3.059,938,1.997,948,4.512,953,3.406,1004,1.997,1051,3.059,1170,1.581,1236,1.828,1325,1.828,1326,1.997,1328,1.828,1329,1.828,1335,2.8,1551,3.406,1661,2.224,1662,3.932,1663,3.932,1664,4.779,1665,3.932,1666,3.932,1667,3.932,1668,5.085,1669,2.568,1670,2.568,1671,6.538,1672,6.538,1673,6.538,1674,3.932,1675,6.538,1676,6.538,1677,6.538,1678,6.538,1679,3.932,1680,3.932,1681,3.932,1682,3.406,1683,2.568,1684,2.568,1685,2.568,1686,2.568,1687,2.568,1688,2.568,1689,2.568,1690,2.224,1691,2.224,1692,6.338,1693,5.773,1694,2.224,1695,2.568,1696,2.568,1697,3.406,1698,2.568,1699,2.568,1700,2.568,1701,3.932,1702,3.932,1703,3.932,1704,3.932,1705,3.932,1706,3.932,1707,3.932]],["title/injectables/SubjectsService.html",[148,1.165,457,1.891]],["body/injectables/SubjectsService.html",[2,0.129,3,0.129,7,0.224,17,0.518,18,0.016,19,0.402,21,0.159,22,0.383,30,0.732,53,0.775,93,0.009,94,0.009,99,0.189,100,0.523,107,1.104,108,0.381,109,1.96,111,1.522,118,1.029,119,1.072,121,1.198,130,0.91,137,1.383,138,1.271,146,1.404,147,3.31,148,1.419,155,1.162,160,1.115,168,2.103,185,1.6,187,3.286,211,3.347,215,1.213,216,1.888,217,2.325,222,1.6,224,1.115,313,1.993,361,4.994,439,2.843,448,4.994,449,4.291,457,2.303,500,2.325,504,1.685,519,3.931,575,3.632,578,3.1,610,4.211,1708,2.828,1709,4.702,1710,4.702,1711,4.702,1712,4.702,1713,6.026,1714,4.702,1715,4.702,1716,4.702,1717,4.702,1718,4.702,1719,4.702,1720,3.266,1721,4.702,1722,7.42,1723,3.266,1724,4.702,1725,3.266,1726,4.702,1727,3.266,1728,3.266,1729,4.702,1730,3.266,1731,4.702,1732,3.266,1733,4.702,1734,6.026,1735,3.266,1736,4.702,1737,3.266,1738,4.702,1739,3.266,1740,3.266,1741,3.266,1742,3.266,1743,5.509,1744,3.266,1745,3.266,1746,3.266,1747,3.266,1748,3.266,1749,5.509,1750,3.266,1751,3.266,1752,4.702,1753,3.266,1754,3.266,1755,4.702,1756,3.266]],["title/components/Subscription.html",[0,0.224,75,0.916]],["body/components/Subscription.html",[0,0.338,1,1.199,2,0.143,3,0.143,4,0.93,5,0.93,6,0.93,7,0.127,10,0.791,11,1.757,12,1.754,17,0.593,18,0.016,19,0.445,20,1.199,21,0.176,22,0.423,24,0.93,25,1.248,26,1.299,27,0.76,28,1.622,29,0.93,30,0.661,31,0.93,32,0.93,33,0.858,34,0.93,35,0.858,36,0.93,37,0.93,38,0.858,39,0.93,40,0.791,41,0.824,42,0.824,43,0.93,44,0.858,45,0.93,46,0.791,47,0.93,48,0.824,49,0.93,50,0.858,51,0.93,52,0.858,53,0.858,54,0.93,55,0.76,56,0.93,57,0.858,58,0.93,59,0.93,60,0.858,61,0.93,62,0.858,63,0.93,64,0.858,65,0.93,66,0.791,67,0.824,68,0.93,69,0.858,70,0.93,71,0.791,72,0.93,73,0.858,74,0.93,75,1.632,76,0.93,77,0.858,78,0.93,79,0.858,80,0.93,81,0.858,82,0.858,83,0.93,84,0.824,85,0.893,86,0.7,87,0.791,88,0.824,89,0.93,90,0.824,91,0.893,92,0.93,93,0.01,94,0.01,99,0.21,100,0.562,107,0.791,108,0.269,118,1.106,119,1.152,121,1.151,123,3.841,130,0.978,132,1.234,137,0.978,138,0.899,146,1.221,157,2.607,158,1.342,159,1.759,199,1.829,332,1.655,372,3.176,379,1.77,402,3.586,404,3.11,409,3.882,435,1.234,519,3.586,758,4.531,1374,4.376,1414,2.225,1419,2.225,1530,5.463,1757,3.13,1758,6.307,1759,5.053,1760,3.13,1761,4.159,1762,5.053,1763,4.376,1764,3.615,1765,3.615,1766,5.053,1767,3.615,1768,3.615,1769,3.615,1770,3.615,1771,3.615,1772,3.615,1773,3.615,1774,5.825,1775,3.615,1776,3.615,1777,3.615,1778,3.615]],["title/guards/SubscriptionGuard.html",[1779,3.002,1780,3.002]],["body/guards/SubscriptionGuard.html",[2,0.205,3,0.205,7,0.182,17,0.684,18,0.016,19,0.64,21,0.252,22,0.608,30,0.517,93,0.012,94,0.012,99,0.301,108,0.276,111,2.419,121,1.046,124,1.847,130,1.241,132,2.189,135,3.125,137,1.005,138,0.923,146,1.005,148,1.936,155,1.847,157,2.679,159,1.936,168,2.018,222,2.542,313,2.2,332,1.7,818,4.495,1760,4.495,1761,4.794,1763,5.555,1780,4.989,1781,5.191,1782,4.495,1783,7.609,1784,5.191,1785,5.191,1786,5.191,1787,5.191,1788,5.191,1789,5.191,1790,5.191]],["title/injectables/SubscriptionService.html",[148,1.165,1761,2.545]],["body/injectables/SubscriptionService.html",[2,0.183,3,0.183,7,0.163,17,0.68,18,0.016,19,0.573,21,0.226,22,0.544,30,0.596,93,0.012,94,0.012,99,0.27,100,0.665,107,0.949,108,0.352,111,2.165,118,1.017,119,1.059,121,1.207,130,1.158,132,1.586,137,1.158,138,1.064,146,1.352,147,3.265,148,1.806,152,3.064,155,1.654,158,1.725,159,1.997,168,2.025,185,2.276,187,3.261,222,2.276,375,6.049,546,3.614,547,4.972,556,2.86,557,3.614,982,3.944,1414,2.86,1419,2.86,1761,3.944,1791,4.024,1792,5.728,1793,6.984,1794,6.984,1795,5.981,1796,4.647,1797,4.647,1798,4.647,1799,5.981,1800,4.647,1801,5.981,1802,5.981,1803,4.647,1804,4.647,1805,4.647,1806,4.647,1807,4.647]],["title/interfaces/SubscriptionStatus.html",[95,0.716,1419,2.376]],["body/interfaces/SubscriptionStatus.html",[2,0.216,3,0.216,7,0.192,18,0.015,21,0.322,30,0.546,93,0.013,94,0.013,95,1.23,97,1.95,99,0.318,100,0.737,107,1.069,108,0.394,109,2.537,435,1.87,439,3.678,1414,4.843,1415,4.261,1416,4.744,1417,4.744,1418,4.744,1419,4.08,1420,6.414,1421,6.414,1422,6.414]],["title/components/Subtopic.html",[0,0.224,77,0.916]],["body/components/Subtopic.html",[0,0.344,1,1.228,2,0.148,3,0.148,4,0.962,5,0.962,6,0.962,7,0.131,10,0.819,11,1.762,12,1.759,13,1.279,15,1.501,17,0.558,18,0.016,19,0.461,20,1.228,21,0.182,22,0.438,24,0.962,25,1.279,26,1.331,27,0.786,28,1.646,29,0.962,30,0.591,31,0.962,32,0.962,33,0.888,34,0.962,35,0.888,36,0.962,37,0.962,38,0.888,39,0.962,40,0.819,41,0.853,42,0.853,43,0.962,44,0.888,45,0.962,46,0.819,47,0.962,48,0.853,49,0.962,50,0.888,51,0.962,52,0.888,53,0.888,54,0.962,55,0.786,56,0.962,57,0.888,58,0.962,59,0.962,60,0.888,61,0.962,62,0.888,63,0.962,64,0.888,65,0.962,66,0.819,67,0.853,68,0.962,69,0.888,70,0.962,71,0.819,72,0.962,73,0.888,74,0.962,75,0.888,76,0.962,77,1.65,78,0.962,79,0.888,80,0.962,81,0.888,82,0.888,83,0.962,84,0.853,85,0.924,86,0.724,87,0.819,88,0.853,89,0.962,90,0.853,91,0.924,92,0.962,93,0.01,94,0.01,99,0.217,108,0.316,121,1.096,130,1.002,142,2.404,146,1.002,199,1.501,254,3.652,268,3.185,271,2.991,316,3.652,318,2.991,326,2.91,327,2.039,435,1.766,769,4.224,1066,4.025,1067,4.025,1216,2.663,1808,3.24,1809,5.175,1810,5.175,1811,6.401,1812,6.401,1813,5.933,1814,5.933,1815,3.741,1816,3.741,1817,3.741,1818,3.741,1819,3.741,1820,3.741,1821,3.24,1822,5.175,1823,5.175,1824,3.741,1825,5.175,1826,6.401]],["title/interfaces/SubtopicModel.html",[95,0.716,1827,3.002]],["body/interfaces/SubtopicModel.html",[2,0.218,3,0.218,7,0.193,18,0.015,21,0.268,93,0.013,94,0.013,95,1.023,97,1.962,99,0.32,100,0.74,107,1.093,108,0.405,109,2.544,117,5.284,412,3.006,435,2.533,587,4.894,834,5.774,1216,3.925,1827,5.176,1828,4.775,1829,6.428]],["title/components/Toast.html",[0,0.224,79,0.916]],["body/components/Toast.html",[0,0.323,1,1.129,2,0.219,3,0.131,4,0.854,5,0.854,6,0.854,7,0.116,10,0.727,11,1.745,12,1.742,13,1.176,17,0.523,18,0.016,19,0.409,20,1.129,21,0.161,22,0.389,24,0.854,25,1.176,26,1.224,27,0.698,28,1.562,29,0.854,30,0.605,31,0.854,32,0.854,33,0.788,34,0.854,35,0.788,36,0.854,37,0.854,38,0.788,39,0.854,40,0.727,41,0.757,42,0.757,43,0.854,44,0.788,45,0.854,46,0.727,47,0.854,48,0.757,49,0.854,50,0.788,51,0.854,52,0.788,53,0.788,54,0.854,55,0.698,56,0.854,57,0.788,58,0.854,59,0.854,60,0.788,61,0.854,62,0.788,63,0.854,64,0.788,65,0.854,66,0.727,67,0.757,68,0.854,69,0.788,70,0.854,71,0.727,72,0.854,73,0.788,74,0.854,75,0.788,76,0.854,77,0.788,78,0.854,79,1.588,80,0.854,81,0.788,82,0.788,83,0.854,84,0.757,85,0.82,86,0.643,87,0.727,88,0.757,89,0.854,90,0.757,91,0.82,92,0.854,93,0.009,94,0.009,99,0.193,100,0.529,108,0.367,118,0.727,119,0.757,121,1.091,130,0.921,132,1.133,137,0.643,138,0.591,146,0.643,199,0.963,332,1.989,352,1.767,372,3.032,379,1.626,404,2.929,412,2.594,425,6.102,427,4.121,432,6.102,442,3.959,867,3.388,869,5.203,1212,2.75,1242,4.323,1275,4.542,1276,2.876,1343,4.121,1363,5,1377,3.701,1391,3.701,1682,4.121,1830,2.876,1831,4.758,1832,4.758,1833,6.073,1834,3.32,1835,3.32,1836,3.32,1837,5.561,1838,4.758,1839,4.758,1840,4.758,1841,4.758,1842,4.758,1843,4.758,1844,4.758,1845,4.758,1846,4.758,1847,4.758,1848,4.758,1849,4.758,1850,4.758,1851,4.758,1852,7.174,1853,4.758,1854,4.758,1855,3.32,1856,3.32,1857,3.32,1858,3.32,1859,3.32,1860,3.32,1861,3.32,1862,3.32,1863,3.32]],["title/interfaces/TopicModel.html",[95,0.716,1864,2.748]],["body/interfaces/TopicModel.html",[2,0.219,3,0.219,7,0.194,18,0.015,21,0.27,93,0.013,94,0.013,95,1.03,97,1.975,99,0.322,100,0.743,107,1.079,108,0.405,109,2.751,117,5.296,435,2.539,825,5.786,865,4.056,1829,6.442,1864,4.756,1865,4.806]],["title/components/TopicPreferences.html",[0,0.224,81,0.916]],["body/components/TopicPreferences.html",[0,0.236,1,0.768,2,0.079,3,0.079,4,0.515,5,0.515,6,0.515,7,0.07,10,0.439,11,1.655,12,1.649,13,0.799,15,0.938,17,0.564,18,0.016,19,0.247,20,0.768,21,0.097,22,0.235,24,0.515,25,0.799,26,0.832,27,0.421,28,1.201,29,0.515,30,0.721,31,0.515,32,0.515,33,0.476,34,0.515,35,0.476,36,0.515,37,0.515,38,0.476,39,0.515,40,1.022,41,0.738,42,0.927,43,0.515,44,0.966,45,0.515,46,1.022,47,0.515,48,0.457,49,0.515,50,0.476,51,0.515,52,0.476,53,1.51,54,0.515,55,0.421,56,0.515,57,0.476,58,0.515,59,0.515,60,0.476,61,0.515,62,0.476,63,0.515,64,0.476,65,0.515,66,0.439,67,0.457,68,0.515,69,0.476,70,0.515,71,0.439,72,0.515,73,0.476,74,0.515,75,0.476,76,0.515,77,0.476,78,0.515,79,0.476,80,0.515,81,1.108,82,1.574,83,0.515,84,0.457,85,0.495,86,0.388,87,0.439,88,0.457,89,0.515,90,0.457,91,0.495,92,0.515,93,0.006,94,0.006,99,0.116,100,0.36,107,0.634,108,0.32,109,0.713,118,1.262,119,1.314,121,1.082,124,0.713,130,0.904,132,0.684,135,2.22,137,0.787,138,0.575,142,2.076,146,0.787,157,1.669,158,0.744,159,0.605,160,1.388,168,0.938,184,2.553,199,1.354,204,1.426,215,0.744,237,2.794,253,2.099,262,1.992,270,2.962,285,1.991,288,2.351,295,0.89,307,1.321,313,3.088,320,1.426,321,0.934,329,2.133,332,0.656,340,2.828,351,1.426,352,1.51,356,1.558,381,1.991,386,1.764,387,2.133,388,3.613,398,3.674,400,1.158,402,2.504,403,1.233,409,2.874,415,2.682,435,2.362,436,2.133,455,2.874,456,1.158,457,0.981,458,1.158,461,1.233,464,2.351,465,1.87,466,2.504,467,1.321,468,1.321,469,1.321,470,1.321,471,1.321,472,1.321,473,1.321,474,1.321,475,2.218,476,1.321,477,1.158,478,1.321,490,2.699,499,1.158,536,1.991,578,4.443,581,4.438,599,2.801,687,1.034,770,2.874,790,2.516,808,2.516,817,1.558,861,2.133,865,3.852,867,2.303,869,2.516,934,1.735,938,1.558,960,3.164,961,2.516,1004,1.558,1161,3.164,1170,2.504,1304,1.735,1305,1.735,1306,2.516,1325,2.303,1326,3.164,1328,2.896,1329,2.896,1336,1.735,1511,2.801,1552,2.801,1690,3.523,1691,1.735,1694,2.801,1697,1.735,1864,2.896,1866,4.797,1867,4.797,1868,1.558,1869,3.235,1870,3.235,1871,4.068,1872,4.068,1873,4.068,1874,3.235,1875,3.235,1876,2.004,1877,2.004,1878,3.235,1879,2.004,1880,2.004,1881,3.235,1882,2.004,1883,2.004,1884,6.835,1885,6.835,1886,6.835,1887,3.235,1888,5.479,1889,2.303,1890,3.235,1891,2.516,1892,3.235,1893,3.235,1894,3.235,1895,3.235,1896,3.235,1897,2.004,1898,2.004,1899,2.004,1900,2.004,1901,2.004,1902,2.004,1903,5.124,1904,2.004,1905,2.004,1906,2.004,1907,2.004,1908,2.004,1909,2.004,1910,2.004,1911,2.004,1912,2.004,1913,2.004,1914,2.004,1915,2.004,1916,4.669,1917,2.004,1918,2.004,1919,2.004,1920,2.004,1921,2.004,1922,2.004,1923,2.004,1924,1.735,1925,2.004,1926,2.004,1927,3.235,1928,3.235,1929,3.235,1930,3.235]],["title/interfaces/UserModel.html",[95,0.716,218,1.992]],["body/interfaces/UserModel.html",[2,0.223,3,0.223,7,0.198,18,0.015,21,0.275,86,1.449,93,0.013,94,0.013,95,1.05,97,2.014,99,0.328,100,0.751,107,1.096,108,0.399,218,3.488,227,5.824,228,5.824,435,2.555,1931,4.901]],["title/injectables/UserService.html",[148,1.165,1932,3.002]],["body/injectables/UserService.html",[2,0.178,3,0.178,7,0.158,17,0.65,18,0.016,19,0.557,21,0.22,22,0.53,30,0.651,93,0.011,94,0.011,99,0.262,100,0.654,107,0.615,108,0.368,111,2.108,118,1.287,119,1.34,121,1.22,130,1.138,132,1.544,137,1.264,138,1.162,146,1.338,147,3.17,148,1.775,152,2.983,155,1.61,158,1.68,159,2.217,168,1.894,185,2.216,187,3.205,199,1.705,204,4.185,218,3.568,219,3.918,222,2.216,224,2.006,344,2.466,546,3.519,547,4.922,1792,5.656,1932,4.573,1933,3.918,1934,6.53,1935,6.914,1936,6.914,1937,5.879,1938,5.879,1939,5.879,1940,4.524,1941,4.524,1942,5.879,1943,4.524,1944,5.879,1945,6.53,1946,4.524,1947,5.879,1948,4.524,1949,5.879,1950,4.524,1951,4.524,1952,4.524,1953,4.524,1954,4.524]],["title/components/VerifyEmail.html",[0,0.224,84,0.88]],["body/components/VerifyEmail.html",[0,0.371,1,1.358,2,0.171,3,0.171,4,1.116,5,1.116,6,1.116,7,0.152,10,0.95,11,1.78,12,1.778,13,1.414,15,1.659,17,0.408,18,0.015,19,0.535,20,1.03,21,0.211,22,0.508,23,4.955,24,1.116,25,1.414,26,1.471,27,0.912,28,1.75,29,1.116,30,0.638,31,1.116,32,1.116,33,1.03,34,1.116,35,1.03,36,1.116,37,1.116,38,1.03,39,1.116,40,0.95,41,0.99,42,0.99,43,1.116,44,1.03,45,1.116,46,0.95,47,1.116,48,0.99,49,1.116,50,1.03,51,1.116,52,1.03,53,1.03,54,1.116,55,0.912,56,1.116,57,1.03,58,1.116,59,1.116,60,1.03,61,1.116,62,1.03,63,1.116,64,1.03,65,1.116,66,0.95,67,0.99,68,1.116,69,1.03,70,1.116,71,0.95,72,1.116,73,1.03,74,1.116,75,1.03,76,1.116,77,1.03,78,1.116,79,1.03,80,1.116,81,1.03,82,1.03,83,1.116,84,1.551,85,1.878,86,1.369,87,0.95,88,0.99,89,1.116,90,0.99,91,1.072,92,1.116,93,0.011,94,0.011,1955,3.759,1956,3.376,1957,3.759,1958,5.722,1959,5.722]],["title/interfaces/VerifyEmailResponse.html",[95,0.716,1211,2.376]],["body/interfaces/VerifyEmailResponse.html",[2,0.213,3,0.213,7,0.189,17,0.509,18,0.016,21,0.358,30,0.539,86,1.273,93,0.013,94,0.013,95,1.369,97,1.925,99,0.314,100,0.731,107,1.086,108,0.35,109,2.523,190,3.566,193,3.566,206,3.127,218,3.394,229,3.802,249,3.806,344,2.949,1205,3.329,1206,3.566,1207,3.566,1208,3.851,1209,3.329,1210,3.851,1211,4.049,1212,4.263]],["title/coverage.html",[1960,4.579]],["body/coverage.html",[0,0.454,7,0.104,8,2.562,9,2.562,12,0.648,18,0.016,22,0.512,27,0.919,33,0.702,35,0.702,38,0.702,40,0.648,42,0.997,44,0.702,46,0.648,48,0.674,50,0.702,52,0.702,55,0.622,57,0.702,60,0.702,62,0.702,64,0.702,66,0.648,69,0.702,71,0.648,73,0.702,75,0.702,77,0.702,79,0.702,81,0.702,82,0.702,84,0.674,88,0.674,90,0.674,93,0.008,94,0.008,95,1.397,96,2.106,98,2.562,108,0.342,110,2.562,126,2.562,127,2.106,129,2.562,134,1.71,148,2.104,186,2.562,206,1.71,216,1.71,218,1.526,224,1.009,246,1.95,247,3.402,248,2.562,252,2.562,254,1.821,258,1.95,274,1.95,295,3.627,327,1.613,357,2.562,369,2.562,370,2.301,371,2.562,383,2.562,398,3.624,399,2.562,400,1.71,401,2.562,433,2.301,434,2.562,438,1.613,441,1.95,443,3.431,444,3.431,445,3.705,457,1.449,460,1.95,539,2.301,540,2.562,541,2.301,542,2.562,556,2.692,563,2.562,614,2.562,615,2.562,648,2.301,666,2.562,683,2.562,702,2.562,703,2.562,731,2.562,763,2.562,764,2.301,765,2.562,770,1.821,1105,2.562,1129,1.71,1150,2.562,1205,1.821,1206,3.791,1207,3.791,1209,1.821,1211,1.821,1214,2.562,1215,2.562,1236,2.106,1237,2.301,1238,2.562,1275,1.95,1345,2.562,1346,2.301,1347,2.562,1355,3.402,1362,2.301,1388,2.562,1389,2.562,1414,1.821,1415,3.402,1419,1.821,1423,2.562,1536,2.562,1572,3.791,1573,1.95,1574,1.95,1590,2.562,1613,2.562,1661,2.562,1668,2.301,1708,2.562,1757,2.562,1761,1.95,1779,2.301,1780,2.301,1782,2.562,1791,2.562,1808,2.562,1827,2.301,1828,2.562,1830,2.562,1864,2.106,1865,2.562,1866,3.114,1867,3.114,1868,3.402,1931,2.562,1932,2.301,1933,2.562,1955,2.562,1956,2.301,1957,2.562,1960,2.562,1961,2.958,1962,2.958,1963,2.958,1964,2.562,1965,6.136,1966,2.562,1967,7.573,1968,2.562,1969,2.106,1970,4.374,1971,6.424,1972,2.562,1973,2.562,1974,2.562,1975,6.647,1976,6.647,1977,6.136,1978,2.562,1979,6.136,1980,6.647,1981,2.562,1982,2.958,1983,6.136,1984,4.374,1985,2.958,1986,2.958,1987,2.958,1988,2.958,1989,2.958,1990,4.374,1991,2.958,1992,2.958,1993,2.958,1994,2.562,1995,2.562,1996,2.958,1997,2.562,1998,2.562,1999,2.958,2000,2.958]],["title/dependencies.html",[2001,2.783,2002,4.025]],["body/dependencies.html",[18,0.016,19,0.707,93,0.013,94,0.013,124,2.041,155,2.041,321,2.672,379,2.809,1216,5.175,1229,4.967,1230,4.461,1232,5.901,1821,4.967,2002,4.967,2003,7.79,2004,5.735,2005,5.735,2006,5.735,2007,5.735,2008,5.735,2009,5.735,2010,5.735,2011,5.735,2012,5.735,2013,5.735,2014,5.735]],["title/miscellaneous/functions.html",[2015,1.978,2016,4.025]],["body/miscellaneous/functions.html",[7,0.259,18,0.014,30,0.598,93,0.014,94,0.014,99,0.348,108,0.32,137,1.162,138,1.068,439,3.612,618,6.061,626,4.045,648,5.444,1994,5.199,1995,6.061,2015,3.695,2016,5.199,2017,6.002,2018,6.002]],["title/index.html",[99,0.224,2019,3.86]],["body/index.html",[0,0.387,1,1.125,3,0.187,18,0.012,87,1.038,93,0.012,94,0.012,118,1.327,182,3.375,224,1.618,392,4.106,499,2.74,511,4.794,532,3.375,536,4.11,575,3.126,848,4.106,912,4.106,1213,4.106,1230,3.688,1292,6.441,1335,3.375,1561,4.106,1563,4.106,1587,4.106,1889,3.375,1924,4.106,2020,4.741,2021,6.677,2022,6.059,2023,7.037,2024,7.271,2025,4.106,2026,4.741,2027,6.059,2028,6.677,2029,4.106,2030,7.437,2031,7.437,2032,4.741,2033,6.059,2034,4.741,2035,4.741,2036,4.741,2037,6.059,2038,4.741,2039,4.741,2040,4.741,2041,4.741,2042,6.059,2043,6.059,2044,4.741,2045,4.741,2046,4.741,2047,4.741,2048,4.741,2049,4.741,2050,4.741,2051,4.741,2052,6.677,2053,4.741,2054,4.741,2055,4.741,2056,4.741,2057,4.741,2058,4.106,2059,4.741,2060,4.741,2061,4.741,2062,6.059,2063,6.677,2064,4.741,2065,4.741,2066,4.741,2067,4.741,2068,4.741,2069,4.741,2070,6.677,2071,4.741,2072,4.741,2073,6.059,2074,4.741,2075,4.741,2076,4.741,2077,4.741,2078,4.741,2079,4.741,2080,4.741,2081,4.741,2082,4.741,2083,4.741,2084,4.741]],["title/modules.html",[1891,4.113]],["body/modules.html",[18,0.014,93,0.014,94,0.014,1891,4.934]],["title/overview.html",[1889,3.764]],["body/overview.html",[1,1.452,18,0.014,87,1.339,93,0.014,94,0.014,97,2.177,185,2.996,295,2.716,327,3.335,442,4.355,475,3.858,861,4.665,1568,5.298,1779,4.758,1889,4.355,2085,6.117,2086,6.117]],["title/properties.html",[100,0.517,2001,2.783]],["body/properties.html",[18,0.015,93,0.014,94,0.014,100,0.7,2025,5.453,2087,6.296]],["title/routes.html",[1969,3.764]],["body/routes.html",[18,0.014,93,0.014,94,0.014,1969,4.516]],["title/miscellaneous/typealiases.html",[2015,1.978,2088,4.648]],["body/miscellaneous/typealiases.html",[2,0.223,18,0.015,82,1.604,93,0.013,94,0.013,99,0.328,108,0.399,195,5.622,247,4.402,274,4.457,352,2.101,398,3.085,665,2.92,858,3.907,859,3.271,887,3.271,1212,3.271,1355,4.402,1362,5.258,1377,4.402,1572,3.731,1574,4.457,1668,5.258,1866,4.029,1867,4.029,1868,5.258,1978,5.854,1981,4.901,2015,3.483,2089,5.659,2090,5.659,2091,5.659,2092,5.659,2093,5.659,2094,5.659]],["title/miscellaneous/variables.html",[2015,1.978,2095,4.025]],["body/miscellaneous/variables.html",[18,0.016,41,0.86,48,0.86,53,0.896,55,0.793,71,0.826,85,0.932,86,0.73,93,0.01,94,0.01,99,0.219,108,0.359,118,1.476,119,1.537,127,2.687,139,2.935,142,1.529,145,3.268,150,3.268,160,1.777,168,1.094,184,2.426,223,2.935,313,1.6,332,1.705,352,1.933,381,2.323,443,2.488,444,2.488,461,2.323,543,4.05,556,3.955,572,2.323,682,4.509,764,2.935,948,4.575,951,2.935,1039,4.509,1170,2.323,1173,4.05,1236,3.706,1237,2.935,1242,2.687,1272,3.268,1306,2.935,1325,2.687,1346,2.935,1363,2.935,1391,2.935,1398,3.268,1400,3.268,1866,2.687,1867,2.687,1956,2.935,1964,3.268,1966,4.509,1968,3.268,1969,4.243,1972,3.268,1973,4.509,1974,4.509,1997,3.268,1998,3.268,2015,2.323,2029,3.268,2058,4.509,2095,3.268,2096,3.774,2097,3.774,2098,3.774,2099,3.774,2100,3.774,2101,3.774,2102,3.774,2103,3.774,2104,3.774,2105,3.774,2106,3.774,2107,3.774,2108,3.774,2109,3.774,2110,3.774,2111,3.774,2112,3.774,2113,3.774,2114,3.774,2115,3.774,2116,3.774,2117,3.774,2118,3.774,2119,3.774,2120,3.774,2121,7.551,2122,7.551,2123,3.774,2124,3.774,2125,3.774,2126,3.774,2127,3.774,2128,3.774,2129,3.774,2130,3.774,2131,3.774,2132,3.774,2133,3.774,2134,3.774,2135,3.774,2136,3.774,2137,3.774,2138,3.774,2139,3.774,2140,5.96,2141,3.774,2142,3.774,2143,3.774,2144,3.774,2145,3.774,2146,3.774,2147,3.774,2148,3.774,2149,3.774,2150,3.774,2151,3.774,2152,3.774,2153,3.774,2154,3.774,2155,3.774]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":295,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Home.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{},"coverage.html":{},"overview.html":{}}}],["0.0.0",{"_index":2087,"title":{},"body":{"properties.html":{}}}],["0.16.22",{"_index":2005,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1967,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1984,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1986,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1985,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1991,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1987,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1990,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1988,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1970,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1989,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1971,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1976,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1977,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1980,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1975,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1983,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1982,"title":{},"body":{"coverage.html":{}}}],["0/per",{"_index":1547,"title":{},"body":{"components/Pricing.html":{}}}],["01t12:00:00z",{"_index":1677,"title":{},"body":{"components/Subjects.html":{}}}],["1",{"_index":861,"title":{},"body":{"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/TopicPreferences.html":{},"overview.html":{}}}],["1.3.1",{"_index":2012,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":628,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/Subjects.html":{}}}],["100",{"_index":1051,"title":{},"body":{"components/LessonPage.html":{},"components/Pricing.html":{},"components/Subjects.html":{}}}],["1024",{"_index":629,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["10mb",{"_index":634,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/Pricing.html":{}}}],["14.1.0",{"_index":2006,"title":{},"body":{"dependencies.html":{}}}],["15,000/per",{"_index":1566,"title":{},"body":{"components/Pricing.html":{}}}],["16",{"_index":2086,"title":{},"body":{"overview.html":{}}}],["1_000",{"_index":1296,"title":{},"body":{"components/NamingUpload.html":{}}}],["1_000_000",{"_index":1293,"title":{},"body":{"components/NamingUpload.html":{}}}],["2",{"_index":475,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"overview.html":{}}}],["2.0.3",{"_index":2007,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":2014,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1564,"title":{},"body":{"components/Pricing.html":{}}}],["20.0.0",{"_index":2008,"title":{},"body":{"dependencies.html":{}}}],["20.1.0",{"_index":2003,"title":{},"body":{"dependencies.html":{}}}],["20.1.5",{"_index":2026,"title":{},"body":{"index.html":{}}}],["2025",{"_index":395,"title":{},"body":{"components/Contact.html":{}}}],["20mb",{"_index":1571,"title":{},"body":{"components/Pricing.html":{}}}],["25",{"_index":1568,"title":{},"body":{"components/Pricing.html":{},"overview.html":{}}}],["250",{"_index":431,"title":{},"body":{"components/CreationStepTab.html":{}}}],["2500",{"_index":1372,"title":{},"body":{"injectables/NotificationService.html":{}}}],["25mb",{"_index":1340,"title":{},"body":{"components/NamingUpload.html":{}}}],["2dkap",{"_index":1672,"title":{},"body":{"components/Subjects.html":{}}}],["3",{"_index":867,"title":{},"body":{"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{}}}],["30",{"_index":1679,"title":{},"body":{"components/Subjects.html":{}}}],["3mb",{"_index":1555,"title":{},"body":{"components/Pricing.html":{}}}],["4",{"_index":869,"title":{},"body":{"components/LessonPage.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{}}}],["4/7",{"_index":1993,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":1366,"title":{},"body":{"injectables/NotificationService.html":{}}}],["401",{"_index":172,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["404",{"_index":1354,"title":{},"body":{"components/NotFound.html":{}}}],["5",{"_index":1552,"title":{},"body":{"components/Pricing.html":{},"components/TopicPreferences.html":{}}}],["50",{"_index":1682,"title":{},"body":{"components/Subjects.html":{},"components/Toast.html":{}}}],["500",{"_index":432,"title":{},"body":{"components/CreationStepTab.html":{},"components/Toast.html":{}}}],["5000",{"_index":1369,"title":{},"body":{"injectables/NotificationService.html":{}}}],["57",{"_index":1992,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1892,"title":{},"body":{"components/TopicPreferences.html":{}}}],["6000/per",{"_index":1558,"title":{},"body":{"components/Pricing.html":{}}}],["7",{"_index":1894,"title":{},"body":{"components/TopicPreferences.html":{}}}],["7.8.0",{"_index":2009,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1406,"title":{},"body":{"directives/PasswordValidator.html":{},"components/Pricing.html":{},"components/Signup.html":{}}}],["800",{"_index":428,"title":{},"body":{"components/CreationStepTab.html":{}}}],["9",{"_index":2085,"title":{},"body":{"overview.html":{}}}],["900",{"_index":430,"title":{},"body":{"components/CreationStepTab.html":{}}}],["_timer",{"_index":1356,"title":{},"body":{"injectables/NotificationService.html":{}}}],["a2m90",{"_index":1886,"title":{},"body":{"components/TopicPreferences.html":{}}}],["about'},{'name",{"_index":31,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["about.css",{"_index":16,"title":{},"body":{"components/About.html":{}}}],["about.html",{"_index":14,"title":{},"body":{"components/About.html":{}}}],["abstractcontrol",{"_index":1393,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["access",{"_index":1193,"title":{},"body":{"components/Login.html":{},"components/Pricing.html":{}}}],["accessors",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["account",{"_index":1658,"title":{},"body":{"components/Signup.html":{}}}],["active",{"_index":410,"title":{},"body":{"components/CreationStepTab.html":{}}}],["activities",{"_index":909,"title":{},"body":{"components/LessonPage.html":{}}}],["actual_component",{"_index":92,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["actually",{"_index":1506,"title":{},"body":{"components/Practice.html":{}}}],["adapt",{"_index":609,"title":{},"body":{"components/Features.html":{}}}],["added",{"_index":1289,"title":{},"body":{"components/NamingUpload.html":{}}}],["addfiles",{"_index":1244,"title":{},"body":{"components/NamingUpload.html":{}}}],["addfiles(filelist",{"_index":1252,"title":{},"body":{"components/NamingUpload.html":{}}}],["additional",{"_index":2079,"title":{},"body":{"index.html":{}}}],["address",{"_index":1194,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["africa",{"_index":925,"title":{},"body":{"components/LessonPage.html":{}}}],["afterviewinit",{"_index":319,"title":{},"body":{"components/Chatbot.html":{}}}],["again",{"_index":1329,"title":{},"body":{"components/NamingUpload.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["ai",{"_index":605,"title":{},"body":{"components/Features.html":{},"components/Landing.html":{},"components/Signup.html":{}}}],["alert(\"at",{"_index":1911,"title":{},"body":{"components/TopicPreferences.html":{}}}],["alert(\"choose",{"_index":498,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["alert(\"exam",{"_index":508,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["alert(\"exercise",{"_index":502,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["alert(\"failed",{"_index":1690,"title":{},"body":{"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["alert(\"first",{"_index":1637,"title":{},"body":{"components/Signup.html":{}}}],["alert(\"learning",{"_index":1913,"title":{},"body":{"components/TopicPreferences.html":{}}}],["alert(\"valid",{"_index":1177,"title":{},"body":{"components/Login.html":{}}}],["alert('invalid",{"_index":1190,"title":{},"body":{"components/Login.html":{}}}],["alert('signup",{"_index":1643,"title":{},"body":{"components/Signup.html":{}}}],["alias",{"_index":1979,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2089,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":624,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["allowedtypes.includes(file.type",{"_index":1277,"title":{},"body":{"components/NamingUpload.html":{}}}],["allsubtopicsread",{"_index":1061,"title":{},"body":{"components/LessonPage.html":{}}}],["alongside",{"_index":1589,"title":{},"body":{"components/QuestionSettings.html":{}}}],["altering",{"_index":917,"title":{},"body":{"components/LessonPage.html":{}}}],["amazon",{"_index":877,"title":{},"body":{"components/LessonPage.html":{}}}],["america",{"_index":927,"title":{},"body":{"components/LessonPage.html":{}}}],["angular",{"_index":2023,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":379,"title":{},"body":{"components/ConfirmLogout.html":{},"components/CreationStepTab.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/NotFound.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Toast.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":152,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["angular/compiler",{"_index":2004,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":19,"title":{},"body":{"components/About.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":321,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":1229,"title":{},"body":{"pipes/MarkdownPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":124,"title":{},"body":{"components/App.html":{},"interceptors/AuthInterceptor.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"guards/SubscriptionGuard.html":{},"components/TopicPreferences.html":{},"dependencies.html":{}}}],["answer",{"_index":911,"title":{},"body":{"components/LessonPage.html":{},"injectables/LessonService.html":{}}}],["answermodel",{"_index":96,"title":{"interfaces/AnswerModel.html":{}},"body":{"interfaces/AnswerModel.html":{},"injectables/ExerciseService.html":{},"coverage.html":{}}}],["answers",{"_index":1532,"title":{},"body":{"components/Practice.html":{}}}],["api",{"_index":1173,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{},"miscellaneous/variables.html":{}}}],["api/users",{"_index":1947,"title":{},"body":{"injectables/UserService.html":{}}}],["apiurl",{"_index":543,"title":{},"body":{"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":12,"title":{"components/App.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["app.css",{"_index":114,"title":{},"body":{"components/App.html":{}}}],["app.html",{"_index":113,"title":{},"body":{"components/App.html":{}}}],["appconfig",{"_index":1966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appfiletype",{"_index":616,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["appfiletype]'},{'name",{"_index":89,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["application",{"_index":2037,"title":{},"body":{"index.html":{}}}],["application/pdf','image/png",{"_index":627,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["applicationconfig",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apppasswordvalidator",{"_index":91,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["arctic",{"_index":905,"title":{},"body":{"components/LessonPage.html":{}}}],["areas",{"_index":612,"title":{},"body":{"components/Features.html":{}}}],["arguments",{"_index":641,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["array",{"_index":452,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["array.isarray(topic.subtopics",{"_index":1062,"title":{},"body":{"components/LessonPage.html":{}}}],["artifacts",{"_index":2055,"title":{},"body":{"index.html":{}}}],["asia",{"_index":924,"title":{},"body":{"components/LessonPage.html":{}}}],["asked",{"_index":1511,"title":{},"body":{"components/Practice.html":{},"components/TopicPreferences.html":{}}}],["assesment",{"_index":1893,"title":{},"body":{"components/TopicPreferences.html":{}}}],["assistant",{"_index":349,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{},"components/Signup.html":{}}}],["assuming",{"_index":476,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["async",{"_index":1508,"title":{},"body":{"components/Practice.html":{}}}],["atlantic",{"_index":874,"title":{},"body":{"components/LessonPage.html":{}}}],["auth",{"_index":139,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Header.html":{},"miscellaneous/variables.html":{}}}],["authinterceptor",{"_index":127,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"interceptors/AuthInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorization",{"_index":166,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/HttpBaseService.html":{}}}],["authreq",{"_index":163,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["authservice",{"_index":134,"title":{"injectables/AuthService.html":{}},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Header.html":{},"components/Login.html":{},"components/Signup.html":{},"coverage.html":{}}}],["automatically",{"_index":2038,"title":{},"body":{"index.html":{}}}],["autoresize",{"_index":1427,"title":{},"body":{"components/Practice.html":{}}}],["autoresize(event",{"_index":1440,"title":{},"body":{"components/Practice.html":{}}}],["autoscrolleffect",{"_index":257,"title":{},"body":{"components/Chatbot.html":{}}}],["available",{"_index":2049,"title":{},"body":{"index.html":{}}}],["b",{"_index":1298,"title":{},"body":{"components/NamingUpload.html":{}}}],["back",{"_index":1192,"title":{},"body":{"components/Login.html":{},"components/NotFound.html":{},"components/Sidebar.html":{}}}],["backend",{"_index":1306,"title":{},"body":{"components/NamingUpload.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["base.service",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/LessonService.html":{},"injectables/SubjectsService.html":{}}}],["base.service.ts",{"_index":703,"title":{},"body":{"injectables/HttpBaseService.html":{},"coverage.html":{}}}],["base.service.ts:11",{"_index":722,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:12",{"_index":724,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:14",{"_index":714,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:21",{"_index":713,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:25",{"_index":718,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:29",{"_index":720,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["base.service.ts:33",{"_index":709,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["based",{"_index":806,"title":{},"body":{"components/LessonPage.html":{}}}],["baseurl",{"_index":1792,"title":{},"body":{"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["basics",{"_index":828,"title":{},"body":{"components/LessonPage.html":{}}}],["bearer",{"_index":167,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/HttpBaseService.html":{}}}],["before",{"_index":290,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["behaviorsubject",{"_index":1950,"title":{},"body":{"injectables/UserService.html":{}}}],["behaviorsubject(null",{"_index":1949,"title":{},"body":{"injectables/UserService.html":{}}}],["berlin",{"_index":868,"title":{},"body":{"components/LessonPage.html":{}}}],["between",{"_index":831,"title":{},"body":{"components/LessonPage.html":{}}}],["bg",{"_index":425,"title":{},"body":{"components/CreationStepTab.html":{},"components/Toast.html":{}}}],["bgcolour",{"_index":407,"title":{},"body":{"components/CreationStepTab.html":{}}}],["biodiversity",{"_index":920,"title":{},"body":{"components/LessonPage.html":{}}}],["blue",{"_index":427,"title":{},"body":{"components/CreationStepTab.html":{},"components/Toast.html":{}}}],["body",{"_index":717,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["boolean",{"_index":109,"title":{},"body":{"interfaces/AnswerModel.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/Plan.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"interfaces/SignupPayload.html":{},"injectables/SubjectsService.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["bottom",{"_index":1839,"title":{},"body":{"components/Toast.html":{}}}],["break",{"_index":992,"title":{},"body":{"components/LessonPage.html":{}}}],["brief_description",{"_index":1829,"title":{},"body":{"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{}}}],["bro",{"_index":1510,"title":{},"body":{"components/Practice.html":{}}}],["browser",{"_index":1230,"title":{},"body":{"pipes/MarkdownPipe.html":{},"dependencies.html":{},"index.html":{}}}],["build",{"_index":2052,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":2053,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":633,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["calculate",{"_index":1043,"title":{},"body":{"components/LessonPage.html":{}}}],["call",{"_index":1174,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["canactivate",{"_index":1783,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["cancel",{"_index":375,"title":{},"body":{"components/ConfirmLogout.html":{},"injectables/SubscriptionService.html":{}}}],["cancellogout",{"_index":671,"title":{},"body":{"components/Header.html":{}}}],["capital",{"_index":838,"title":{},"body":{"components/LessonPage.html":{}}}],["capitalizefirstletter",{"_index":772,"title":{},"body":{"components/LessonPage.html":{}}}],["capitalizefirstletter(currentview.type",{"_index":1094,"title":{},"body":{"components/LessonPage.html":{}}}],["capitalizefirstletter(str",{"_index":783,"title":{},"body":{"components/LessonPage.html":{}}}],["capitals",{"_index":837,"title":{},"body":{"components/LessonPage.html":{}}}],["caps",{"_index":1073,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["catcherror",{"_index":153,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Practice.html":{}}}],["catcherror((err",{"_index":170,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["catcherror(err",{"_index":1500,"title":{},"body":{"components/Practice.html":{}}}],["categorized",{"_index":1704,"title":{},"body":{"components/Subjects.html":{}}}],["cdr",{"_index":466,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["center",{"_index":1844,"title":{},"body":{"components/Toast.html":{}}}],["challenge",{"_index":603,"title":{},"body":{"components/Features.html":{}}}],["change",{"_index":622,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/LessonPage.html":{}}}],["changedetectorref",{"_index":455,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["changeprogress",{"_index":1431,"title":{},"body":{"components/Practice.html":{}}}],["changequestion",{"_index":1432,"title":{},"body":{"components/Practice.html":{}}}],["changes",{"_index":286,"title":{},"body":{"components/Chatbot.html":{},"components/Practice.html":{}}}],["changesubtopic",{"_index":773,"title":{},"body":{"components/LessonPage.html":{}}}],["changesubtopic(event",{"_index":786,"title":{},"body":{"components/LessonPage.html":{}}}],["characters",{"_index":1655,"title":{},"body":{"components/Signup.html":{}}}],["chat",{"_index":355,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["chatbot",{"_index":33,"title":{"components/Chatbot.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["chatbot'},{'name",{"_index":34,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["chatbot.css",{"_index":256,"title":{},"body":{"components/Chatbot.html":{}}}],["chatbot.html",{"_index":255,"title":{},"body":{"components/Chatbot.html":{}}}],["chatbot/chatbot",{"_index":814,"title":{},"body":{"components/LessonPage.html":{}}}],["chatbotservice",{"_index":258,"title":{"injectables/ChatbotService.html":{}},"body":{"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/LessonPage.html":{},"coverage.html":{}}}],["chatcontainer",{"_index":259,"title":{},"body":{"components/Chatbot.html":{}}}],["chathistory",{"_index":269,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["chatmessage",{"_index":246,"title":{"interfaces/ChatMessage.html":{}},"body":{"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"components/LessonPage.html":{},"coverage.html":{}}}],["chatmetadata",{"_index":274,"title":{},"body":{"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/LessonPage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["chatopen",{"_index":768,"title":{},"body":{"components/LessonPage.html":{}}}],["check",{"_index":1012,"title":{},"body":{"components/LessonPage.html":{}}}],["checkfortopiccompleteness",{"_index":774,"title":{},"body":{"components/LessonPage.html":{}}}],["checkfortopiccompleteness(topic_id",{"_index":788,"title":{},"body":{"components/LessonPage.html":{}}}],["choice",{"_index":859,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"miscellaneous/typealiases.html":{}}}],["choose",{"_index":1587,"title":{},"body":{"components/QuestionSettings.html":{},"index.html":{}}}],["city",{"_index":839,"title":{},"body":{"components/LessonPage.html":{}}}],["class",{"_index":22,"title":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{}},"body":{"components/About.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["classes",{"_index":442,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Toast.html":{},"overview.html":{}}}],["clear",{"_index":177,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/NotificationService.html":{}}}],["cleartimeout(this._timer",{"_index":1380,"title":{},"body":{"injectables/NotificationService.html":{}}}],["cli",{"_index":2024,"title":{},"body":{"index.html":{}}}],["climate",{"_index":889,"title":{},"body":{"components/LessonPage.html":{}}}],["climates",{"_index":850,"title":{},"body":{"components/LessonPage.html":{}}}],["close",{"_index":1833,"title":{},"body":{"components/Toast.html":{}}}],["closechat",{"_index":272,"title":{},"body":{"components/Chatbot.html":{}}}],["code",{"_index":2042,"title":{},"body":{"index.html":{}}}],["collect",{"_index":509,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["come",{"_index":2075,"title":{},"body":{"index.html":{}}}],["command",{"_index":2070,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":372,"title":{},"body":{"components/ConfirmLogout.html":{},"components/CreationStepTab.html":{},"components/Header.html":{},"components/Landing.html":{},"components/NotFound.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Toast.html":{}}}],["companion",{"_index":389,"title":{},"body":{"components/Contact.html":{}}}],["compile",{"_index":2054,"title":{},"body":{"index.html":{}}}],["complete",{"_index":532,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"index.html":{}}}],["completed",{"_index":825,"title":{},"body":{"components/LessonPage.html":{},"components/Subjects.html":{},"interfaces/TopicModel.html":{}}}],["completed}/${total",{"_index":1053,"title":{},"body":{"components/LessonPage.html":{}}}],["completion",{"_index":1678,"title":{},"body":{"components/Subjects.html":{}}}],["complex",{"_index":577,"title":{},"body":{"components/Features.html":{},"components/Signup.html":{}}}],["complexity",{"_index":586,"title":{},"body":{"components/Features.html":{}}}],["component",{"_index":0,"title":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":29,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["components",{"_index":1,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"index.html":{},"overview.html":{}}}],["comprehension",{"_index":571,"title":{},"body":{"components/Features.html":{}}}],["computed",{"_index":1837,"title":{},"body":{"components/Toast.html":{}}}],["concepts",{"_index":600,"title":{},"body":{"components/Features.html":{}}}],["confirm",{"_index":36,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["confirm(\"are",{"_index":1473,"title":{},"body":{"components/Practice.html":{}}}],["confirmlogout",{"_index":35,"title":{"components/ConfirmLogout.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["confirmpassword",{"_index":1210,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["consistent",{"_index":1559,"title":{},"body":{"components/Pricing.html":{}}}],["console.error(\"error",{"_index":533,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["console.error(\"failed",{"_index":529,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["console.error('error",{"_index":1326,"title":{},"body":{"components/NamingUpload.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["console.error('failed",{"_index":1005,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["console.error('login",{"_index":1188,"title":{},"body":{"components/Login.html":{}}}],["console.error('signup",{"_index":1644,"title":{},"body":{"components/Signup.html":{}}}],["console.error(`error",{"_index":353,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{},"components/Practice.html":{}}}],["console.error(`failed",{"_index":1025,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(\"chat",{"_index":1089,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(\"generation",{"_index":523,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["console.log(\"lesson",{"_index":1923,"title":{},"body":{"components/TopicPreferences.html":{}}}],["console.log(\"progress",{"_index":1048,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(\"session",{"_index":526,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["console.log(\"topics",{"_index":1920,"title":{},"body":{"components/TopicPreferences.html":{}}}],["console.log('files",{"_index":1309,"title":{},"body":{"components/NamingUpload.html":{}}}],["console.log('logged",{"_index":1186,"title":{},"body":{"components/Login.html":{}}}],["console.log('login",{"_index":1181,"title":{},"body":{"components/Login.html":{}}}],["console.log('signup",{"_index":1642,"title":{},"body":{"components/Signup.html":{}}}],["console.log('stage",{"_index":1310,"title":{},"body":{"components/NamingUpload.html":{}}}],["console.log('subject",{"_index":1307,"title":{},"body":{"components/NamingUpload.html":{}}}],["console.log('unauthorized",{"_index":173,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["console.log(`progress",{"_index":1052,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(`selected",{"_index":1608,"title":{},"body":{"components/Sidebar.html":{}}}],["console.log(ingestresponse",{"_index":1318,"title":{},"body":{"components/NamingUpload.html":{}}}],["console.log(labelresponse",{"_index":1322,"title":{},"body":{"components/NamingUpload.html":{}}}],["console.log(questiondata",{"_index":1518,"title":{},"body":{"components/Practice.html":{}}}],["console.log(response",{"_index":351,"title":{},"body":{"components/Chatbot.html":{},"components/NamingUpload.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["console.log(selectedtopics",{"_index":1914,"title":{},"body":{"components/TopicPreferences.html":{}}}],["console.log(this.content",{"_index":1605,"title":{},"body":{"components/Sidebar.html":{}}}],["console.log(this.currentmessage",{"_index":342,"title":{},"body":{"components/Chatbot.html":{}}}],["console.log(this.currentview",{"_index":1028,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(this.currentview()?.content?.questions.find((q",{"_index":1470,"title":{},"body":{"components/Practice.html":{}}}],["console.log(this.learningstyle",{"_index":1915,"title":{},"body":{"components/TopicPreferences.html":{}}}],["console.log(this.question",{"_index":1460,"title":{},"body":{"components/Practice.html":{}}}],["console.log(this.subjects",{"_index":1689,"title":{},"body":{"components/Subjects.html":{}}}],["console.log(this.topics",{"_index":1907,"title":{},"body":{"components/TopicPreferences.html":{}}}],["console.log(topic.exercise",{"_index":976,"title":{},"body":{"components/LessonPage.html":{}}}],["console.log(value",{"_index":1494,"title":{},"body":{"components/Practice.html":{}}}],["const",{"_index":160,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"injectables/SubjectsService.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":132,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/ExerciseService.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["constructor(auth",{"_index":133,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Header.html":{}}}],["constructor(cdr",{"_index":781,"title":{},"body":{"components/LessonPage.html":{}}}],["constructor(http",{"_index":546,"title":{},"body":{"injectables/ExerciseService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["constructor(notify",{"_index":1834,"title":{},"body":{"components/Toast.html":{}}}],["constructor(private",{"_index":158,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Header.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"pipes/MarkdownPipe.html":{},"components/NotFound.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["constructor(public",{"_index":1859,"title":{},"body":{"components/Toast.html":{}}}],["constructor(router",{"_index":687,"title":{},"body":{"components/Home.html":{},"components/Landing.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["constructor(subsvc",{"_index":1760,"title":{},"body":{"components/Subscription.html":{},"guards/SubscriptionGuard.html":{}}}],["contact",{"_index":38,"title":{"components/Contact.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["contact'},{'name",{"_index":39,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["contact.css",{"_index":385,"title":{},"body":{"components/Contact.html":{}}}],["contact.html",{"_index":384,"title":{},"body":{"components/Contact.html":{}}}],["contact/contact",{"_index":699,"title":{},"body":{"components/Home.html":{}}}],["content",{"_index":587,"title":{},"body":{"components/Features.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Sidebar.html":{},"interfaces/SubtopicModel.html":{}}}],["content().exam",{"_index":1612,"title":{},"body":{"components/Sidebar.html":{}}}],["content().topics",{"_index":1610,"title":{},"body":{"components/Sidebar.html":{}}}],["context",{"_index":331,"title":{},"body":{"components/Chatbot.html":{}}}],["continent",{"_index":923,"title":{},"body":{"components/LessonPage.html":{}}}],["contributing",{"_index":918,"title":{},"body":{"components/LessonPage.html":{}}}],["control",{"_index":1395,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["control.get('confirmpassword')?.value",{"_index":1412,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["control.get('password')?.value",{"_index":1410,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["control.value",{"_index":1401,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["copy",{"_index":394,"title":{},"body":{"components/Contact.html":{}}}],["core/models/chat",{"_index":322,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["core/models/question.model",{"_index":1453,"title":{},"body":{"components/Practice.html":{}}}],["core/models/subject.model",{"_index":1685,"title":{},"body":{"components/Subjects.html":{}}}],["core/models/subscription.model",{"_index":1771,"title":{},"body":{"components/Subscription.html":{}}}],["core/models/topic.model",{"_index":1901,"title":{},"body":{"components/TopicPreferences.html":{}}}],["core/services/auth.service",{"_index":678,"title":{},"body":{"components/Header.html":{},"components/Login.html":{},"components/Signup.html":{}}}],["core/services/chatbot.service",{"_index":324,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["core/services/lesson.service",{"_index":817,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"components/TopicPreferences.html":{}}}],["core/services/notification.service",{"_index":1276,"title":{},"body":{"components/NamingUpload.html":{},"components/Toast.html":{}}}],["core/services/subjects.service",{"_index":458,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["core/services/subscription.service",{"_index":1770,"title":{},"body":{"components/Subscription.html":{}}}],["correct",{"_index":1575,"title":{},"body":{"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{}}}],["correctcount",{"_index":1475,"title":{},"body":{"components/Practice.html":{}}}],["correctoptions",{"_index":101,"title":{},"body":{"interfaces/AnswerModel.html":{}}}],["count",{"_index":1033,"title":{},"body":{"components/LessonPage.html":{}}}],["counterintuitive",{"_index":1505,"title":{},"body":{"components/Practice.html":{}}}],["country",{"_index":841,"title":{},"body":{"components/LessonPage.html":{}}}],["course",{"_index":1888,"title":{},"body":{"components/TopicPreferences.html":{}}}],["coverage",{"_index":1960,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpw",{"_index":1411,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["crafted",{"_index":756,"title":{},"body":{"components/Landing.html":{}}}],["create",{"_index":329,"title":{},"body":{"components/Chatbot.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["create/${sessionid}/topic",{"_index":1324,"title":{},"body":{"components/NamingUpload.html":{}}}],["create/${subject.id}/question",{"_index":1699,"title":{},"body":{"components/Subjects.html":{}}}],["create/${subject.id}/topic",{"_index":1698,"title":{},"body":{"components/Subjects.html":{}}}],["create/${this.subjectid}/question",{"_index":1925,"title":{},"body":{"components/TopicPreferences.html":{}}}],["create/:sessionid/question",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create/:sessionid/topic",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create/creation",{"_index":399,"title":{},"body":{"components/CreationStepTab.html":{},"coverage.html":{}}}],["create/naming",{"_index":1236,"title":{},"body":{"components/NamingUpload.html":{},"components/Subjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create/question",{"_index":443,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create/topic",{"_index":1866,"title":{},"body":{"components/TopicPreferences.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["created_at",{"_index":1675,"title":{},"body":{"components/Subjects.html":{}}}],["creates",{"_index":595,"title":{},"body":{"components/Features.html":{}}}],["createsubject",{"_index":1709,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["createsubject(name",{"_index":1719,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["creating",{"_index":1331,"title":{},"body":{"components/NamingUpload.html":{}}}],["creation",{"_index":41,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"miscellaneous/variables.html":{}}}],["creationsteptab",{"_index":40,"title":{"components/CreationStepTab.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["credentials",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["cultures",{"_index":900,"title":{},"body":{"components/LessonPage.html":{}}}],["curious",{"_index":1549,"title":{},"body":{"components/Pricing.html":{}}}],["current",{"_index":804,"title":{},"body":{"components/LessonPage.html":{}}}],["currentindex",{"_index":1069,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["currentmessage",{"_index":260,"title":{},"body":{"components/Chatbot.html":{}}}],["currenttopic",{"_index":1813,"title":{},"body":{"components/Subtopic.html":{}}}],["currenttopic().title",{"_index":1825,"title":{},"body":{"components/Subtopic.html":{}}}],["currentuser",{"_index":1934,"title":{},"body":{"injectables/UserService.html":{}}}],["currentview",{"_index":769,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subtopic.html":{}}}],["currentview().content.score",{"_index":1533,"title":{},"body":{"components/Practice.html":{}}}],["currentview().content.title",{"_index":1826,"title":{},"body":{"components/Subtopic.html":{}}}],["currentview.content.questions.length",{"_index":1097,"title":{},"body":{"components/LessonPage.html":{}}}],["currentview.content.score",{"_index":1103,"title":{},"body":{"components/LessonPage.html":{}}}],["currentview.type",{"_index":1093,"title":{},"body":{"components/LessonPage.html":{}}}],["customize",{"_index":754,"title":{},"body":{"components/Landing.html":{}}}],["cycle",{"_index":930,"title":{},"body":{"components/LessonPage.html":{}}}],["cyclequestion",{"_index":1428,"title":{},"body":{"components/Practice.html":{}}}],["cyclequestion(direction",{"_index":1442,"title":{},"body":{"components/Practice.html":{}}}],["cyclesubtopic",{"_index":1814,"title":{},"body":{"components/Subtopic.html":{}}}],["daidj2d",{"_index":1885,"title":{},"body":{"components/TopicPreferences.html":{}}}],["dashboard",{"_index":682,"title":{},"body":{"components/Header.html":{},"miscellaneous/variables.html":{}}}],["dashboard/subscription",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"components/NamingUpload.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["date(\"2023",{"_index":1676,"title":{},"body":{"components/Subjects.html":{}}}],["date().tolocalestring",{"_index":345,"title":{},"body":{"components/Chatbot.html":{}}}],["decorators",{"_index":307,"title":{},"body":{"components/Chatbot.html":{},"directives/FileTypeDirective.html":{},"components/Login.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["default",{"_index":118,"title":{},"body":{"components/App.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defer",{"_index":296,"title":{},"body":{"components/Chatbot.html":{}}}],["defined",{"_index":121,"title":{},"body":{"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["definition",{"_index":1887,"title":{},"body":{"components/TopicPreferences.html":{}}}],["deforestation",{"_index":913,"title":{},"body":{"components/LessonPage.html":{}}}],["delete",{"_index":704,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["delete(endpoint",{"_index":708,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["dependencies",{"_index":2002,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployed",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describe",{"_index":881,"title":{},"body":{"components/LessonPage.html":{}}}],["desert",{"_index":906,"title":{},"body":{"components/LessonPage.html":{}}}],["designed",{"_index":568,"title":{},"body":{"components/Features.html":{}}}],["detailed",{"_index":2081,"title":{},"body":{"index.html":{}}}],["dev",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":2027,"title":{},"body":{"index.html":{}}}],["direction",{"_index":1067,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"components/Subtopic.html":{}}}],["directive",{"_index":27,"title":{"directives/FileTypeDirective.html":{},"directives/PasswordValidator.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["directives",{"_index":87,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"index.html":{},"overview.html":{}}}],["directly",{"_index":537,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["directory",{"_index":2057,"title":{},"body":{"index.html":{}}}],["display",{"_index":805,"title":{},"body":{"components/LessonPage.html":{}}}],["dist",{"_index":2056,"title":{},"body":{"index.html":{}}}],["distinct",{"_index":892,"title":{},"body":{"components/LessonPage.html":{}}}],["dksda",{"_index":1884,"title":{},"body":{"components/TopicPreferences.html":{}}}],["document",{"_index":1694,"title":{},"body":{"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["documentation",{"_index":1961,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":1314,"title":{},"body":{"components/NamingUpload.html":{},"components/Pricing.html":{}}}],["docx",{"_index":574,"title":{},"body":{"components/Features.html":{},"components/NamingUpload.html":{}}}],["doesn't",{"_index":1514,"title":{},"body":{"components/Practice.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["domsanitizer",{"_index":1228,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["don’t",{"_index":287,"title":{},"body":{"components/Chatbot.html":{}}}],["dragevent",{"_index":1258,"title":{},"body":{"components/NamingUpload.html":{}}}],["driven",{"_index":606,"title":{},"body":{"components/Features.html":{}}}],["durationdays",{"_index":1416,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["during",{"_index":534,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["e.g",{"_index":334,"title":{},"body":{"components/Chatbot.html":{},"directives/FileTypeDirective.html":{}}}],["e1",{"_index":921,"title":{},"body":{"components/LessonPage.html":{}}}],["e2e",{"_index":2072,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":2074,"title":{},"body":{"index.html":{}}}],["each",{"_index":964,"title":{},"body":{"components/LessonPage.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{}}}],["earth",{"_index":873,"title":{},"body":{"components/LessonPage.html":{}}}],["easy",{"_index":569,"title":{},"body":{"components/Features.html":{},"components/Pricing.html":{},"components/Subjects.html":{}}}],["ecosystems",{"_index":851,"title":{},"body":{"components/LessonPage.html":{}}}],["effect",{"_index":282,"title":{},"body":{"components/Chatbot.html":{},"components/Practice.html":{}}}],["el",{"_index":336,"title":{},"body":{"components/Chatbot.html":{}}}],["el.scrollheight",{"_index":339,"title":{},"body":{"components/Chatbot.html":{}}}],["el.scrolltop",{"_index":338,"title":{},"body":{"components/Chatbot.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["elementref",{"_index":306,"title":{},"body":{"components/Chatbot.html":{}}}],["email",{"_index":86,"title":{},"body":{"components/About.html":{},"components/App.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"miscellaneous/variables.html":{}}}],["email').then(m",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email.css",{"_index":1959,"title":{},"body":{"components/VerifyEmail.html":{}}}],["email.html",{"_index":1958,"title":{},"body":{"components/VerifyEmail.html":{}}}],["email.ts",{"_index":1957,"title":{},"body":{"components/VerifyEmail.html":{},"coverage.html":{}}}],["email/verify",{"_index":1956,"title":{},"body":{"components/VerifyEmail.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailctrl",{"_index":1152,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.errors?.['email",{"_index":1198,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.errors?.['required",{"_index":1197,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.errors?.[\\'email",{"_index":1204,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.errors?.[\\'required",{"_index":1203,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.invalid",{"_index":1195,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emailctrl.touched",{"_index":1196,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["emits",{"_index":636,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["empty",{"_index":503,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{}}}],["end",{"_index":1292,"title":{},"body":{"components/NamingUpload.html":{},"index.html":{}}}],["endless",{"_index":593,"title":{},"body":{"components/Features.html":{}}}],["endpoint",{"_index":711,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["engaging",{"_index":589,"title":{},"body":{"components/Features.html":{}}}],["environment",{"_index":556,"title":{},"body":{"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.apiurl",{"_index":721,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["environment.apiurl}/exercises",{"_index":554,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["environment.apiurl}/subscriptions",{"_index":1802,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["environments",{"_index":833,"title":{},"body":{"components/LessonPage.html":{}}}],["environments/environment",{"_index":557,"title":{},"body":{"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/SubscriptionService.html":{}}}],["err",{"_index":184,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["err.error?.message",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err.status",{"_index":171,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["err.statustext",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":352,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error('method",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["error('subject",{"_index":950,"title":{},"body":{"components/LessonPage.html":{}}}],["error(err",{"_index":937,"title":{},"body":{"components/LessonPage.html":{}}}],["error.interceptor.ts",{"_index":1973,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["essay",{"_index":887,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"miscellaneous/typealiases.html":{}}}],["essay_answer",{"_index":1481,"title":{},"body":{"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{}}}],["essay_feedback",{"_index":1482,"title":{},"body":{"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{}}}],["essaycalls",{"_index":1476,"title":{},"body":{"components/Practice.html":{}}}],["essaycalls.push",{"_index":1490,"title":{},"body":{"components/Practice.html":{}}}],["et1",{"_index":852,"title":{},"body":{"components/LessonPage.html":{}}}],["et2",{"_index":902,"title":{},"body":{"components/LessonPage.html":{}}}],["europe",{"_index":928,"title":{},"body":{"components/LessonPage.html":{}}}],["ev",{"_index":646,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["ev.target",{"_index":651,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["event",{"_index":642,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{}}}],["event.direction",{"_index":1068,"title":{},"body":{"components/LessonPage.html":{}}}],["event.id",{"_index":1011,"title":{},"body":{"components/LessonPage.html":{}}}],["event.id).subscribe",{"_index":1020,"title":{},"body":{"components/LessonPage.html":{}}}],["event.target.checked",{"_index":480,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["event.target.value",{"_index":485,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["event.type",{"_index":1007,"title":{},"body":{"components/LessonPage.html":{}}}],["eventemitter",{"_index":376,"title":{},"body":{"components/ConfirmLogout.html":{},"directives/FileTypeDirective.html":{},"components/Landing.html":{}}}],["everything",{"_index":983,"title":{},"body":{"components/LessonPage.html":{}}}],["exactly",{"_index":1038,"title":{},"body":{"components/LessonPage.html":{}}}],["exam",{"_index":504,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"injectables/SubjectsService.html":{}}}],["exam_id",{"_index":1149,"title":{},"body":{"injectables/LessonService.html":{}}}],["exam_preference",{"_index":1753,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["examid",{"_index":1127,"title":{},"body":{"injectables/LessonService.html":{}}}],["exammodel",{"_index":433,"title":{"interfaces/ExamModel.html":{}},"body":{"interfaces/ExamModel.html":{},"coverage.html":{}}}],["example",{"_index":2030,"title":{},"body":{"index.html":{}}}],["exams",{"_index":608,"title":{},"body":{"components/Features.html":{}}}],["examsettings",{"_index":441,"title":{"classes/ExamSettings.html":{}},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"coverage.html":{}}}],["examvalidated",{"_index":492,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["execute",{"_index":2064,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":494,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{}}}],["exercise.id",{"_index":1014,"title":{},"body":{"components/LessonPage.html":{}}}],["exercise_id",{"_index":1146,"title":{},"body":{"injectables/LessonService.html":{}}}],["exercise_preference",{"_index":1751,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["exercisecompleted",{"_index":1433,"title":{},"body":{"components/Practice.html":{}}}],["exerciseid",{"_index":1132,"title":{},"body":{"injectables/LessonService.html":{}}}],["exercisemodel",{"_index":539,"title":{"interfaces/ExerciseModel.html":{}},"body":{"interfaces/ExerciseModel.html":{},"coverage.html":{}}}],["exercises",{"_index":500,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{}}}],["exerciseservice",{"_index":541,"title":{"injectables/ExerciseService.html":{}},"body":{"injectables/ExerciseService.html":{},"coverage.html":{}}}],["exercisesettings",{"_index":460,"title":{"classes/ExerciseSettings.html":{}},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"coverage.html":{}}}],["exercisevalidated",{"_index":491,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["exists",{"_index":292,"title":{},"body":{"components/Chatbot.html":{}}}],["expanded",{"_index":822,"title":{},"body":{"components/LessonPage.html":{}}}],["experience",{"_index":566,"title":{},"body":{"components/Features.html":{}}}],["expiresat",{"_index":1421,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["explain",{"_index":908,"title":{},"body":{"components/LessonPage.html":{}}}],["explanation",{"_index":1576,"title":{},"body":{"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{}}}],["export",{"_index":21,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["extract",{"_index":467,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["f",{"_index":653,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/NamingUpload.html":{}}}],["failed",{"_index":1189,"title":{},"body":{"components/Login.html":{},"components/NamingUpload.html":{},"components/Signup.html":{}}}],["fallback",{"_index":997,"title":{},"body":{"components/LessonPage.html":{}}}],["false",{"_index":313,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["faqs",{"_index":1896,"title":{},"body":{"components/TopicPreferences.html":{}}}],["features",{"_index":44,"title":{"components/Features.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["features'},{'name",{"_index":45,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["features.css",{"_index":565,"title":{},"body":{"components/Features.html":{}}}],["features.html",{"_index":564,"title":{},"body":{"components/Features.html":{}}}],["features/features",{"_index":697,"title":{},"body":{"components/Home.html":{}}}],["feeback",{"_index":102,"title":{},"body":{"interfaces/AnswerModel.html":{}}}],["feedback",{"_index":1534,"title":{},"body":{"components/Practice.html":{}}}],["fetch",{"_index":934,"title":{},"body":{"components/LessonPage.html":{},"components/TopicPreferences.html":{}}}],["fetching",{"_index":938,"title":{},"body":{"components/LessonPage.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["fetchprofile",{"_index":1935,"title":{},"body":{"injectables/UserService.html":{}}}],["fields",{"_index":495,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["file(s",{"_index":1288,"title":{},"body":{"components/NamingUpload.html":{}}}],["file.name",{"_index":1342,"title":{},"body":{"components/NamingUpload.html":{}}}],["file.size",{"_index":1291,"title":{},"body":{"components/NamingUpload.html":{}}}],["fileerror",{"_index":619,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["filelist",{"_index":1253,"title":{},"body":{"components/NamingUpload.html":{}}}],["fileok",{"_index":620,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["files",{"_index":575,"title":{},"body":{"components/Features.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"injectables/SubjectsService.html":{},"index.html":{}}}],["files.foreach((file",{"_index":1744,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["files.length",{"_index":1341,"title":{},"body":{"components/NamingUpload.html":{}}}],["filetypedirective",{"_index":88,"title":{"directives/FileTypeDirective.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["final",{"_index":1526,"title":{},"body":{"components/Practice.html":{}}}],["finally",{"_index":978,"title":{},"body":{"components/LessonPage.html":{}}}],["find",{"_index":1705,"title":{},"body":{"components/Subjects.html":{}}}],["find((exercise",{"_index":1013,"title":{},"body":{"components/LessonPage.html":{}}}],["find((subtopic",{"_index":1009,"title":{},"body":{"components/LessonPage.html":{}}}],["find((topic",{"_index":1021,"title":{},"body":{"components/LessonPage.html":{}}}],["finish",{"_index":517,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["first",{"_index":760,"title":{},"body":{"components/Landing.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/Signup.html":{}}}],["first_name",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"components/Signup.html":{},"interfaces/UserModel.html":{}}}],["firstname",{"_index":1615,"title":{},"body":{"components/Signup.html":{}}}],["firstnamectrl",{"_index":1616,"title":{},"body":{"components/Signup.html":{}}}],["firstnamectrl.invalid",{"_index":1649,"title":{},"body":{"components/Signup.html":{}}}],["firstnamectrl.touched",{"_index":1650,"title":{},"body":{"components/Signup.html":{}}}],["firsttopic",{"_index":1000,"title":{},"body":{"components/LessonPage.html":{}}}],["firsttopic.subtopics.length",{"_index":1002,"title":{},"body":{"components/LessonPage.html":{}}}],["firsttopic.subtopics[0].id",{"_index":1003,"title":{},"body":{"components/LessonPage.html":{}}}],["fixed",{"_index":1838,"title":{},"body":{"components/Toast.html":{}}}],["flatmap((topic",{"_index":1008,"title":{},"body":{"components/LessonPage.html":{}}}],["flex",{"_index":1842,"title":{},"body":{"components/Toast.html":{}}}],["flexibility",{"_index":1562,"title":{},"body":{"components/Pricing.html":{}}}],["flexible",{"_index":1540,"title":{},"body":{"components/Pricing.html":{}}}],["flow",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus",{"_index":1928,"title":{},"body":{"components/TopicPreferences.html":{}}}],["focuses",{"_index":846,"title":{},"body":{"components/LessonPage.html":{}}}],["following",{"_index":2069,"title":{},"body":{"index.html":{}}}],["forget",{"_index":592,"title":{},"body":{"components/Features.html":{}}}],["forkjoin",{"_index":459,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{}}}],["forkjoin(essaycalls.length",{"_index":1524,"title":{},"body":{"components/Practice.html":{}}}],["forkjoin(requests).subscribe",{"_index":521,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["forkjoin(topicrequests",{"_index":977,"title":{},"body":{"components/LessonPage.html":{}}}],["format",{"_index":1199,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["formatfilesize",{"_index":1245,"title":{},"body":{"components/NamingUpload.html":{}}}],["formatfilesize(file",{"_index":1255,"title":{},"body":{"components/NamingUpload.html":{}}}],["formdata",{"_index":1743,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["formdata.append('files",{"_index":1745,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["formsmodule",{"_index":253,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["found",{"_index":951,"title":{},"body":{"components/LessonPage.html":{},"components/NotFound.html":{},"miscellaneous/variables.html":{}}}],["found').then(m",{"_index":2154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found'},{'name",{"_index":61,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["found.css",{"_index":1349,"title":{},"body":{"components/NotFound.html":{}}}],["found.html",{"_index":1348,"title":{},"body":{"components/NotFound.html":{}}}],["found.ts",{"_index":1347,"title":{},"body":{"components/NotFound.html":{},"coverage.html":{}}}],["found.ts:11",{"_index":1351,"title":{},"body":{"components/NotFound.html":{}}}],["found.ts:13",{"_index":1352,"title":{},"body":{"components/NotFound.html":{}}}],["found/not",{"_index":1346,"title":{},"body":{"components/NotFound.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fraction",{"_index":1045,"title":{},"body":{"components/LessonPage.html":{}}}],["fraction).subscribe",{"_index":1047,"title":{},"body":{"components/LessonPage.html":{}}}],["framework",{"_index":2076,"title":{},"body":{"index.html":{}}}],["france",{"_index":856,"title":{},"body":{"components/LessonPage.html":{}}}],["free",{"_index":1542,"title":{},"body":{"components/Pricing.html":{}}}],["frequently",{"_index":1895,"title":{},"body":{"components/TopicPreferences.html":{}}}],["function",{"_index":1996,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2016,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":762,"title":{},"body":{"components/Landing.html":{}}}],["generate",{"_index":536,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"index.html":{}}}],["generated",{"_index":1924,"title":{},"body":{"components/TopicPreferences.html":{},"index.html":{}}}],["generateexam",{"_index":1710,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generateexam(sessionid",{"_index":1721,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generateexercise",{"_index":1711,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generateexercise(sessionid",{"_index":1724,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generatelesson",{"_index":1712,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generatelesson(sessionid",{"_index":1726,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["generating",{"_index":1336,"title":{},"body":{"components/NamingUpload.html":{},"components/TopicPreferences.html":{}}}],["generation",{"_index":535,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{}}}],["geography",{"_index":821,"title":{},"body":{"components/LessonPage.html":{}}}],["get(endpoint",{"_index":712,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["getaccesstoken",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["getallsubjects",{"_index":1713,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["getallsubtopics",{"_index":1106,"title":{},"body":{"injectables/LessonService.html":{}}}],["getallsubtopics(topicid",{"_index":1114,"title":{},"body":{"injectables/LessonService.html":{}}}],["getalltopics",{"_index":1107,"title":{},"body":{"injectables/LessonService.html":{}}}],["getalltopics(sessionid",{"_index":1117,"title":{},"body":{"injectables/LessonService.html":{}}}],["getchathistory",{"_index":358,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["getchathistory(sessionid",{"_index":359,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["getcurrentuser",{"_index":1936,"title":{},"body":{"injectables/UserService.html":{}}}],["getexam",{"_index":1108,"title":{},"body":{"injectables/LessonService.html":{}}}],["getexam(sessionid",{"_index":1119,"title":{},"body":{"injectables/LessonService.html":{}}}],["getexercise",{"_index":1109,"title":{},"body":{"injectables/LessonService.html":{}}}],["getexercise(topicid",{"_index":1121,"title":{},"body":{"injectables/LessonService.html":{}}}],["getheaders",{"_index":705,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["getpastanswers",{"_index":544,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["getpastanswers(id",{"_index":549,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["getplans",{"_index":1793,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["getquestionnumber",{"_index":1429,"title":{},"body":{"components/Practice.html":{}}}],["getstatus",{"_index":1794,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["gettopicdatafromexercise",{"_index":775,"title":{},"body":{"components/LessonPage.html":{}}}],["gettopicdatafromexercise().title",{"_index":1095,"title":{},"body":{"components/LessonPage.html":{}}}],["gettopicdatafromsubtopic",{"_index":776,"title":{},"body":{"components/LessonPage.html":{}}}],["global",{"_index":885,"title":{},"body":{"components/LessonPage.html":{}}}],["go",{"_index":1545,"title":{},"body":{"components/Pricing.html":{}}}],["gohome",{"_index":1350,"title":{},"body":{"components/NotFound.html":{}}}],["government",{"_index":842,"title":{},"body":{"components/LessonPage.html":{}}}],["gpt",{"_index":1512,"title":{},"body":{"components/Practice.html":{}}}],["graded",{"_index":1104,"title":{},"body":{"components/LessonPage.html":{}}}],["grasp",{"_index":598,"title":{},"body":{"components/Features.html":{}}}],["green",{"_index":1851,"title":{},"body":{"components/Toast.html":{}}}],["grow",{"_index":1543,"title":{},"body":{"components/Pricing.html":{}}}],["guard",{"_index":1779,"title":{"guards/SubscriptionGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1781,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["hasexercisescore",{"_index":1064,"title":{},"body":{"components/LessonPage.html":{}}}],["header",{"_index":46,"title":{"components/Header.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["header'},{'name",{"_index":47,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["header.html",{"_index":669,"title":{},"body":{"components/Header.html":{}}}],["headers",{"_index":726,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["hello",{"_index":932,"title":{},"body":{"components/LessonPage.html":{}}}],["help",{"_index":597,"title":{},"body":{"components/Features.html":{},"components/LessonPage.html":{}}}],["helpbuilding",{"_index":2051,"title":{},"body":{"index.html":{}}}],["here",{"_index":1304,"title":{},"body":{"components/NamingUpload.html":{},"components/TopicPreferences.html":{}}}],["hi",{"_index":933,"title":{},"body":{"components/LessonPage.html":{}}}],["highlighting",{"_index":594,"title":{},"body":{"components/Features.html":{}}}],["history",{"_index":283,"title":{},"body":{"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/LessonPage.html":{},"components/Subjects.html":{}}}],["history.length",{"_index":294,"title":{},"body":{"components/Chatbot.html":{}}}],["home",{"_index":48,"title":{"components/Home.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["home'},{'name",{"_index":49,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["home.css",{"_index":685,"title":{},"body":{"components/Home.html":{}}}],["home.html",{"_index":684,"title":{},"body":{"components/Home.html":{}}}],["hostlistener",{"_index":647,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["hostlistener('change",{"_index":645,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["hostlisteners",{"_index":621,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["htmlinputelement",{"_index":652,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["http",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/SubjectsService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["http://localhost:4200",{"_index":2036,"title":{},"body":{"index.html":{}}}],["http://localhost:5000/api",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpbaseservice",{"_index":216,"title":{"injectables/HttpBaseService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/SubjectsService.html":{},"coverage.html":{}}}],["httpclient",{"_index":547,"title":{},"body":{"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["httperrorinterceptor",{"_index":1974,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["httperrorresponse",{"_index":150,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"miscellaneous/variables.html":{}}}],["httpevent",{"_index":151,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httphandler",{"_index":143,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpheaders",{"_index":715,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["httpinterceptor",{"_index":149,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["httpinterceptorfn",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httprequest",{"_index":141,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["https://your",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["human",{"_index":896,"title":{},"body":{"components/LessonPage.html":{}}}],["humans",{"_index":898,"title":{},"body":{"components/LessonPage.html":{}}}],["icon",{"_index":411,"title":{},"body":{"components/CreationStepTab.html":{}}}],["id",{"_index":435,"title":{},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"components/LessonPage.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{}}}],["identifier",{"_index":1962,"title":{},"body":{"coverage.html":{}}}],["ignore/about.ts",{"_index":9,"title":{},"body":{"components/About.html":{},"coverage.html":{}}}],["impact",{"_index":910,"title":{},"body":{"components/LessonPage.html":{}}}],["implemented",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":157,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/CreationStepTab.html":{},"components/LessonPage.html":{},"pipes/MarkdownPipe.html":{},"directives/PasswordValidator.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"components/TopicPreferences.html":{}}}],["import",{"_index":17,"title":{},"body":{"components/About.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["import('./pages/auth/login/login').then(m",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/auth/signup/signup').then(m",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/auth/verify",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/dashboard/subjects/subjects').then(m",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/dashboard/subscription/subscription').then(m",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/home/home/home').then(m",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/lesson/lesson",{"_index":2150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/not",{"_index":2153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["import('./pages/subject",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["importance",{"_index":882,"title":{},"body":{"components/LessonPage.html":{}}}],["important",{"_index":840,"title":{},"body":{"components/LessonPage.html":{}}}],["imports",{"_index":20,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["improvement",{"_index":613,"title":{},"body":{"components/Features.html":{}}}],["include",{"_index":446,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{}}}],["includes",{"_index":2044,"title":{},"body":{"index.html":{}}}],["including",{"_index":848,"title":{},"body":{"components/LessonPage.html":{},"index.html":{}}}],["index",{"_index":99,"title":{"index.html":{}},"body":{"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"miscellaneous/typealiases.html":{}}}],["info@maestro.org",{"_index":393,"title":{},"body":{"components/Contact.html":{}}}],["information",{"_index":392,"title":{},"body":{"components/Contact.html":{},"index.html":{}}}],["ingest",{"_index":1313,"title":{},"body":{"components/NamingUpload.html":{}}}],["ingestdocuments",{"_index":1714,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["ingestdocuments(sessionid",{"_index":1729,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["ingesting",{"_index":1330,"title":{},"body":{"components/NamingUpload.html":{}}}],["ingestresponse",{"_index":1317,"title":{},"body":{"components/NamingUpload.html":{}}}],["initial",{"_index":333,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["initialize",{"_index":1006,"title":{},"body":{"components/LessonPage.html":{}}}],["inject",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/TopicPreferences.html":{}}}],["inject(authservice",{"_index":1159,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["inject(chatbotservice",{"_index":304,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["inject(httpbaseservice",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/LessonService.html":{},"injectables/SubjectsService.html":{}}}],["inject(httpclient",{"_index":723,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["inject(injector",{"_index":311,"title":{},"body":{"components/Chatbot.html":{}}}],["inject(lessonservice",{"_index":808,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"components/TopicPreferences.html":{}}}],["inject(notificationservice",{"_index":1272,"title":{},"body":{"components/NamingUpload.html":{},"miscellaneous/variables.html":{}}}],["inject(subjectsservice",{"_index":465,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["injectable",{"_index":148,"title":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"injectables/SubjectsService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"injectables/SubjectsService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injection",{"_index":330,"title":{},"body":{"components/Chatbot.html":{}}}],["injector",{"_index":261,"title":{},"body":{"components/Chatbot.html":{}}}],["input",{"_index":316,"title":{},"body":{"components/Chatbot.html":{},"components/CreationStepTab.html":{},"directives/FileTypeDirective.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subtopic.html":{}}}],["input(null",{"_index":422,"title":{},"body":{"components/CreationStepTab.html":{}}}],["input.files?.[0",{"_index":654,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["input.required",{"_index":421,"title":{},"body":{"components/CreationStepTab.html":{}}}],["input.value",{"_index":663,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["inputs",{"_index":268,"title":{},"body":{"components/Chatbot.html":{},"components/CreationStepTab.html":{},"directives/FileTypeDirective.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subtopic.html":{}}}],["interact",{"_index":899,"title":{},"body":{"components/LessonPage.html":{}}}],["interactive",{"_index":596,"title":{},"body":{"components/Features.html":{}}}],["intercept",{"_index":131,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["intercept(req",{"_index":140,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interceptor",{"_index":126,"title":{"interceptors/AuthInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":128,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["interface",{"_index":95,"title":{"interfaces/AnswerModel.html":{},"interfaces/ChatMessage.html":{},"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/Plan.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"interfaces/SignupPayload.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"interfaces/UserModel.html":{},"interfaces/VerifyEmailResponse.html":{}},"body":{"interfaces/AnswerModel.html":{},"interfaces/ChatMessage.html":{},"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/Plan.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"interfaces/SignupPayload.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"interfaces/UserModel.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":97,"title":{},"body":{"interfaces/AnswerModel.html":{},"interfaces/ChatMessage.html":{},"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/Plan.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"interfaces/SignupPayload.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"interfaces/UserModel.html":{},"interfaces/VerifyEmailResponse.html":{},"overview.html":{}}}],["intro",{"_index":824,"title":{},"body":{"components/LessonPage.html":{}}}],["invalid",{"_index":661,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/Login.html":{},"components/Signup.html":{}}}],["invalidfiles.join",{"_index":1283,"title":{},"body":{"components/NamingUpload.html":{}}}],["invalidfiles.length",{"_index":1280,"title":{},"body":{"components/NamingUpload.html":{}}}],["invalidfiles.push(file.name",{"_index":1279,"title":{},"body":{"components/NamingUpload.html":{}}}],["invalidpassword",{"_index":1408,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["is_correct",{"_index":864,"title":{},"body":{"components/LessonPage.html":{}}}],["isactive",{"_index":1422,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["isallowedfile",{"_index":648,"title":{},"body":{"directives/FileTypeDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isallowedfile(f",{"_index":655,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["isallowedfile(file",{"_index":2018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iscorrect",{"_index":103,"title":{},"body":{"interfaces/AnswerModel.html":{},"components/Practice.html":{}}}],["isdragging",{"_index":1241,"title":{},"body":{"components/NamingUpload.html":{}}}],["issues",{"_index":886,"title":{},"body":{"components/LessonPage.html":{}}}],["item",{"_index":299,"title":{},"body":{"components/Chatbot.html":{}}}],["items",{"_index":1843,"title":{},"body":{"components/Toast.html":{}}}],["journey",{"_index":1702,"title":{},"body":{"components/Subjects.html":{}}}],["jpg",{"_index":1337,"title":{},"body":{"components/NamingUpload.html":{}}}],["karma",{"_index":2065,"title":{},"body":{"index.html":{}}}],["katex",{"_index":1232,"title":{},"body":{"pipes/MarkdownPipe.html":{},"dependencies.html":{}}}],["kb",{"_index":1297,"title":{},"body":{"components/NamingUpload.html":{}}}],["keep",{"_index":1551,"title":{},"body":{"components/Pricing.html":{},"components/Subjects.html":{}}}],["key",{"_index":599,"title":{},"body":{"components/Features.html":{},"components/TopicPreferences.html":{}}}],["label",{"_index":1319,"title":{},"body":{"components/NamingUpload.html":{}}}],["labeldocuments",{"_index":1715,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["labeldocuments(sessionid",{"_index":1731,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["labeling",{"_index":1327,"title":{},"body":{"components/NamingUpload.html":{}}}],["labelling",{"_index":1695,"title":{},"body":{"components/Subjects.html":{}}}],["labelresponse",{"_index":1321,"title":{},"body":{"components/NamingUpload.html":{}}}],["landforms",{"_index":849,"title":{},"body":{"components/LessonPage.html":{}}}],["landing",{"_index":50,"title":{"components/Landing.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["landing'},{'name",{"_index":51,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["landing.css",{"_index":733,"title":{},"body":{"components/Landing.html":{}}}],["landing.html",{"_index":732,"title":{},"body":{"components/Landing.html":{}}}],["landing/landing",{"_index":696,"title":{},"body":{"components/Home.html":{}}}],["large",{"_index":1570,"title":{},"body":{"components/Pricing.html":{}}}],["largest",{"_index":922,"title":{},"body":{"components/LessonPage.html":{}}}],["last",{"_index":477,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["last_name",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"components/Signup.html":{},"interfaces/UserModel.html":{}}}],["lastname",{"_index":1617,"title":{},"body":{"components/Signup.html":{}}}],["lastnamectrl",{"_index":1618,"title":{},"body":{"components/Signup.html":{}}}],["lastnamectrl.invalid",{"_index":1651,"title":{},"body":{"components/Signup.html":{}}}],["lastnamectrl.touched",{"_index":1652,"title":{},"body":{"components/Signup.html":{}}}],["later",{"_index":1170,"title":{},"body":{"components/Login.html":{},"components/NamingUpload.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["learn",{"_index":755,"title":{},"body":{"components/Landing.html":{}}}],["learner",{"_index":1541,"title":{},"body":{"components/Pricing.html":{}}}],["learners",{"_index":1550,"title":{},"body":{"components/Pricing.html":{}}}],["learning",{"_index":388,"title":{},"body":{"components/Contact.html":{},"components/Features.html":{},"components/Landing.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["learningstyle",{"_index":1871,"title":{},"body":{"components/TopicPreferences.html":{}}}],["learningstylectrl",{"_index":1872,"title":{},"body":{"components/TopicPreferences.html":{}}}],["learningstylectrl.invalid",{"_index":1929,"title":{},"body":{"components/TopicPreferences.html":{}}}],["learningstylectrl.touched",{"_index":1930,"title":{},"body":{"components/TopicPreferences.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["lesson",{"_index":53,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"miscellaneous/variables.html":{}}}],["lesson/:subjectid",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lesson_preference",{"_index":1750,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["lessonpage",{"_index":52,"title":{"components/LessonPage.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["lessons",{"_index":579,"title":{},"body":{"components/Features.html":{},"components/Landing.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{}}}],["lessonservice",{"_index":770,"title":{"injectables/LessonService.html":{}},"body":{"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Practice.html":{},"components/TopicPreferences.html":{},"coverage.html":{}}}],["letters",{"_index":1656,"title":{},"body":{"components/Signup.html":{}}}],["lg",{"_index":1849,"title":{},"body":{"components/Toast.html":{}}}],["library",{"_index":1554,"title":{},"body":{"components/Pricing.html":{}}}],["lied",{"_index":1513,"title":{},"body":{"components/Practice.html":{}}}],["linkify",{"_index":1223,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["links",{"_index":391,"title":{},"body":{"components/Contact.html":{}}}],["list",{"_index":2048,"title":{},"body":{"index.html":{}}}],["literal",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/SaveQuestionData.html":{},"miscellaneous/typealiases.html":{}}}],["literature",{"_index":1681,"title":{},"body":{"components/Subjects.html":{}}}],["load",{"_index":1691,"title":{},"body":{"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["loadcomponent",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loaded",{"_index":984,"title":{},"body":{"components/LessonPage.html":{}}}],["loading",{"_index":262,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["local",{"_index":2029,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["localstorage.getitem('accesstoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HttpBaseService.html":{}}}],["localstorage.getitem('refreshtoken",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.removeitem('accesstoken",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.removeitem('refreshtoken",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('accesstoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"components/Login.html":{}}}],["localstorage.setitem('refreshtoken",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"components/Login.html":{}}}],["located",{"_index":843,"title":{},"body":{"components/LessonPage.html":{}}}],["log",{"_index":382,"title":{},"body":{"components/ConfirmLogout.html":{},"components/Signup.html":{}}}],["logcontent",{"_index":1593,"title":{},"body":{"components/Sidebar.html":{}}}],["logging",{"_index":175,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["login",{"_index":55,"title":{"components/Login.html":{}},"body":{"components/About.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["login'},{'name",{"_index":56,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["login(credentials",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.html",{"_index":1151,"title":{},"body":{"components/Login.html":{}}}],["loginpayload",{"_index":1205,"title":{"interfaces/LoginPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["loginresponse",{"_index":206,"title":{"interfaces/LoginResponse.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["logout",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"components/ConfirmLogout.html":{},"components/Header.html":{}}}],["logout'},{'name",{"_index":37,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["logout.css",{"_index":374,"title":{},"body":{"components/ConfirmLogout.html":{}}}],["logout.html",{"_index":373,"title":{},"body":{"components/ConfirmLogout.html":{}}}],["logout.ts",{"_index":371,"title":{},"body":{"components/ConfirmLogout.html":{},"coverage.html":{}}}],["logout.ts:11",{"_index":378,"title":{},"body":{"components/ConfirmLogout.html":{}}}],["logout.ts:12",{"_index":377,"title":{},"body":{"components/ConfirmLogout.html":{}}}],["logout/confirm",{"_index":370,"title":{},"body":{"components/ConfirmLogout.html":{},"components/Header.html":{},"coverage.html":{}}}],["london",{"_index":866,"title":{},"body":{"components/LessonPage.html":{}}}],["loop",{"_index":1030,"title":{},"body":{"components/LessonPage.html":{}}}],["m.home",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.lessonpage",{"_index":2152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.login",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.namingupload",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.notfound",{"_index":2155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.questionsettings",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.signup",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.subjects",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.subscription",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.topicpreferences",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m.verifyemail",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["madrid",{"_index":870,"title":{},"body":{"components/LessonPage.html":{}}}],["maestro",{"_index":386,"title":{},"body":{"components/Contact.html":{},"components/Features.html":{},"components/Header.html":{},"components/Landing.html":{},"components/Login.html":{},"components/Pricing.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["maestrofrontend",{"_index":2020,"title":{},"body":{"index.html":{}}}],["main",{"_index":903,"title":{},"body":{"components/LessonPage.html":{}}}],["map",{"_index":818,"title":{},"body":{"components/LessonPage.html":{},"guards/SubscriptionGuard.html":{}}}],["map((r",{"_index":968,"title":{},"body":{"components/LessonPage.html":{}}}],["map((res",{"_index":940,"title":{},"body":{"components/LessonPage.html":{}}}],["map((subjects",{"_index":944,"title":{},"body":{"components/LessonPage.html":{}}}],["map(st",{"_index":1788,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["mark",{"_index":1017,"title":{},"body":{"components/LessonPage.html":{}}}],["markdown",{"_index":1216,"title":{},"body":{"pipes/MarkdownPipe.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"dependencies.html":{}}}],["markdownit",{"_index":1222,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["markdownitkatex",{"_index":1231,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["markdownmodule",{"_index":1820,"title":{},"body":{"components/Subtopic.html":{}}}],["markdownpipe",{"_index":254,"title":{"pipes/MarkdownPipe.html":{}},"body":{"components/Chatbot.html":{},"pipes/MarkdownPipe.html":{},"components/Practice.html":{},"components/Subtopic.html":{},"coverage.html":{}}}],["marksubtopicasread",{"_index":1110,"title":{},"body":{"injectables/LessonService.html":{}}}],["marksubtopicasread(topicid",{"_index":1123,"title":{},"body":{"injectables/LessonService.html":{}}}],["mastering",{"_index":1647,"title":{},"body":{"components/Signup.html":{}}}],["matching",{"_index":94,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":570,"title":{},"body":{"components/Features.html":{}}}],["materials",{"_index":753,"title":{},"body":{"components/Landing.html":{},"components/Login.html":{},"components/Subjects.html":{}}}],["math.round(fraction",{"_index":1050,"title":{},"body":{"components/LessonPage.html":{}}}],["mathematics",{"_index":1674,"title":{},"body":{"components/Subjects.html":{}}}],["max",{"_index":631,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/NamingUpload.html":{}}}],["maxbytes",{"_index":618,"title":{},"body":{"directives/FileTypeDirective.html":{},"miscellaneous/functions.html":{}}}],["maxsubjects",{"_index":1417,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["mb",{"_index":1295,"title":{},"body":{"components/NamingUpload.html":{}}}],["md",{"_index":1221,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["meet",{"_index":1645,"title":{},"body":{"components/Signup.html":{}}}],["message",{"_index":249,"title":{},"body":{"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/LessonPage.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"injectables/NotificationService.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["message.model",{"_index":323,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["message.model.ts",{"_index":248,"title":{},"body":{"interfaces/ChatMessage.html":{},"coverage.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["metadata.model",{"_index":325,"title":{},"body":{"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/LessonPage.html":{}}}],["metadata.model.ts",{"_index":1978,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":130,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"injectables/ExerciseService.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["mime",{"_index":625,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["miscellaneous",{"_index":2015,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":317,"title":{},"body":{"components/Chatbot.html":{}}}],["models/answer.model",{"_index":555,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["models/auth",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["models/chat",{"_index":366,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["models/question.model",{"_index":1137,"title":{},"body":{"injectables/LessonService.html":{}}}],["models/subscription.model",{"_index":1803,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["models/user.model",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["modify",{"_index":2041,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1891,"title":{"modules.html":{}},"body":{"components/TopicPreferences.html":{},"modules.html":{}}}],["month",{"_index":1548,"title":{},"body":{"components/Pricing.html":{}}}],["more",{"_index":1561,"title":{},"body":{"components/Pricing.html":{},"index.html":{}}}],["mountainous",{"_index":907,"title":{},"body":{"components/LessonPage.html":{}}}],["ms",{"_index":1364,"title":{},"body":{"injectables/NotificationService.html":{}}}],["msg",{"_index":1363,"title":{},"body":{"injectables/NotificationService.html":{},"components/Toast.html":{},"miscellaneous/variables.html":{}}}],["multi",{"_index":1400,"title":{},"body":{"directives/PasswordValidator.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":858,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"miscellaneous/typealiases.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/About.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"injectables/ExerciseService.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"miscellaneous/functions.html":{}}}],["namectrl.errors?.['required",{"_index":1334,"title":{},"body":{"components/NamingUpload.html":{}}}],["namectrl.errors?.[\\'required",{"_index":1344,"title":{},"body":{"components/NamingUpload.html":{}}}],["namectrl.invalid",{"_index":1332,"title":{},"body":{"components/NamingUpload.html":{}}}],["namectrl.touched",{"_index":1333,"title":{},"body":{"components/NamingUpload.html":{}}}],["namefor",{"_index":2047,"title":{},"body":{"index.html":{}}}],["naming",{"_index":58,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["namingupload",{"_index":57,"title":{"components/NamingUpload.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["natural",{"_index":847,"title":{},"body":{"components/LessonPage.html":{}}}],["navigate",{"_index":2035,"title":{},"body":{"index.html":{}}}],["navigatesection",{"_index":739,"title":{},"body":{"components/Landing.html":{}}}],["navigatesubject",{"_index":1665,"title":{},"body":{"components/Subjects.html":{}}}],["navigatesubject(subject",{"_index":1667,"title":{},"body":{"components/Subjects.html":{}}}],["neatly",{"_index":1703,"title":{},"body":{"components/Subjects.html":{}}}],["need",{"_index":1560,"title":{},"body":{"components/Pricing.html":{}}}],["needed",{"_index":538,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["needs",{"_index":2078,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newindex",{"_index":1071,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["next",{"_index":142,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subtopic.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["next(req).pipe",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next.handle(authreq).pipe",{"_index":169,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["nextsubtopic",{"_index":1811,"title":{},"body":{"components/Subtopic.html":{}}}],["ng",{"_index":2031,"title":{},"body":{"index.html":{}}}],["ng_validators",{"_index":1397,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["ngafterviewinit",{"_index":264,"title":{},"body":{"components/Chatbot.html":{}}}],["ngclass",{"_index":420,"title":{},"body":{"components/CreationStepTab.html":{}}}],["ngmodel",{"_index":1161,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["ngoninit",{"_index":409,"title":{},"body":{"components/CreationStepTab.html":{},"components/Home.html":{},"components/LessonPage.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/TopicPreferences.html":{}}}],["ngx",{"_index":1821,"title":{},"body":{"components/Subtopic.html":{},"dependencies.html":{}}}],["nile",{"_index":879,"title":{},"body":{"components/LessonPage.html":{}}}],["north",{"_index":926,"title":{},"body":{"components/LessonPage.html":{}}}],["notes",{"_index":591,"title":{},"body":{"components/Features.html":{}}}],["notfound",{"_index":60,"title":{"components/NotFound.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["nothing",{"_index":996,"title":{},"body":{"components/LessonPage.html":{}}}],["noticetype",{"_index":1362,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notificationservice",{"_index":1275,"title":{"injectables/NotificationService.html":{}},"body":{"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"components/Toast.html":{},"coverage.html":{}}}],["notify",{"_index":1242,"title":{},"body":{"components/NamingUpload.html":{},"components/Practice.html":{},"components/Toast.html":{},"miscellaneous/variables.html":{}}}],["notify.showerror(msg",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":985,"title":{},"body":{"components/LessonPage.html":{}}}],["null",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{}}}],["number",{"_index":439,"title":{},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"directives/FileTypeDirective.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"interfaces/Plan.html":{},"injectables/SubjectsService.html":{},"interfaces/SubscriptionStatus.html":{},"miscellaneous/functions.html":{}}}],["numbers",{"_index":1657,"title":{},"body":{"components/Signup.html":{}}}],["o.id",{"_index":1469,"title":{},"body":{"components/Practice.html":{}}}],["object",{"_index":1039,"title":{},"body":{"components/LessonPage.html":{},"miscellaneous/variables.html":{}}}],["objectives",{"_index":1890,"title":{},"body":{"components/TopicPreferences.html":{}}}],["observable",{"_index":147,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["occurred",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ocean",{"_index":875,"title":{},"body":{"components/LessonPage.html":{}}}],["oceans",{"_index":872,"title":{},"body":{"components/LessonPage.html":{}}}],["of(null",{"_index":1502,"title":{},"body":{"components/Practice.html":{}}}],["of(null)]).pipe",{"_index":1525,"title":{},"body":{"components/Practice.html":{}}}],["ok",{"_index":640,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["old_subjects",{"_index":1664,"title":{},"body":{"components/Subjects.html":{}}}],["old_topics",{"_index":1873,"title":{},"body":{"components/TopicPreferences.html":{}}}],["oncancel",{"_index":1758,"title":{},"body":{"components/Subscription.html":{}}}],["onchange",{"_index":617,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["onchange(ev",{"_index":644,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["onclosechat",{"_index":265,"title":{},"body":{"components/Chatbot.html":{}}}],["oncontactclick",{"_index":734,"title":{},"body":{"components/Landing.html":{}}}],["ondragleave",{"_index":1246,"title":{},"body":{"components/NamingUpload.html":{}}}],["ondragleave(event",{"_index":1257,"title":{},"body":{"components/NamingUpload.html":{}}}],["ondragover",{"_index":1247,"title":{},"body":{"components/NamingUpload.html":{}}}],["ondragover(event",{"_index":1260,"title":{},"body":{"components/NamingUpload.html":{}}}],["one",{"_index":499,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"index.html":{}}}],["onfeaturesclick",{"_index":735,"title":{},"body":{"components/Landing.html":{}}}],["onfiledrop",{"_index":1248,"title":{},"body":{"components/NamingUpload.html":{}}}],["onfiledrop(event",{"_index":1262,"title":{},"body":{"components/NamingUpload.html":{}}}],["onfileselect",{"_index":1249,"title":{},"body":{"components/NamingUpload.html":{}}}],["onfileselect(event",{"_index":1264,"title":{},"body":{"components/NamingUpload.html":{}}}],["ongetstartedclick",{"_index":736,"title":{},"body":{"components/Landing.html":{}}}],["onhomeclick",{"_index":737,"title":{},"body":{"components/Landing.html":{}}}],["oninit",{"_index":402,"title":{},"body":{"components/CreationStepTab.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/TopicPreferences.html":{}}}],["onpricingclick",{"_index":738,"title":{},"body":{"components/Landing.html":{}}}],["onsubmit",{"_index":490,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["onsubscribe",{"_index":1759,"title":{},"body":{"components/Subscription.html":{}}}],["onsubscribe(id",{"_index":1766,"title":{},"body":{"components/Subscription.html":{}}}],["open",{"_index":2034,"title":{},"body":{"index.html":{}}}],["openlogout",{"_index":672,"title":{},"body":{"components/Header.html":{}}}],["opt.correct",{"_index":1485,"title":{},"body":{"components/Practice.html":{}}}],["opt.id",{"_index":1488,"title":{},"body":{"components/Practice.html":{}}}],["opt.selected",{"_index":1484,"title":{},"body":{"components/Practice.html":{}}}],["optimizes",{"_index":2059,"title":{},"body":{"index.html":{}}}],["option",{"_index":1467,"title":{},"body":{"components/Practice.html":{}}}],["option.id",{"_index":1466,"title":{},"body":{"components/Practice.html":{}}}],["option.selected",{"_index":1465,"title":{},"body":{"components/Practice.html":{}}}],["option_id",{"_index":860,"title":{},"body":{"components/LessonPage.html":{}}}],["option_text",{"_index":862,"title":{},"body":{"components/LessonPage.html":{}}}],["optional",{"_index":138,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":602,"title":{},"body":{"components/Features.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{}}}],["out",{"_index":176,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/ConfirmLogout.html":{}}}],["output",{"_index":318,"title":{},"body":{"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"directives/FileTypeDirective.html":{},"components/Landing.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subtopic.html":{}}}],["outputs",{"_index":271,"title":{},"body":{"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"directives/FileTypeDirective.html":{},"components/Landing.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subtopic.html":{}}}],["overview",{"_index":1889,"title":{"overview.html":{}},"body":{"components/TopicPreferences.html":{},"index.html":{},"overview.html":{}}}],["p",{"_index":1846,"title":{},"body":{"components/Toast.html":{}}}],["pacific",{"_index":876,"title":{},"body":{"components/LessonPage.html":{}}}],["package",{"_index":2001,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":182,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/LessonPage.html":{},"components/NotFound.html":{},"index.html":{}}}],["page').then(m",{"_index":2151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page'},{'name",{"_index":54,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["page.css",{"_index":767,"title":{},"body":{"components/LessonPage.html":{}}}],["page.html",{"_index":766,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts",{"_index":765,"title":{},"body":{"components/LessonPage.html":{},"coverage.html":{}}}],["page.ts:185",{"_index":793,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:21",{"_index":811,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:22",{"_index":802,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:23",{"_index":810,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:24",{"_index":807,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:29",{"_index":801,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:292",{"_index":799,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:30",{"_index":803,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:31",{"_index":812,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:32",{"_index":809,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:33",{"_index":782,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:337",{"_index":800,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:380",{"_index":792,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:386",{"_index":791,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:392",{"_index":789,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:409",{"_index":787,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:428",{"_index":796,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:459",{"_index":794,"title":{},"body":{"components/LessonPage.html":{}}}],["page.ts:464",{"_index":784,"title":{},"body":{"components/LessonPage.html":{}}}],["page/lesson",{"_index":764,"title":{},"body":{"components/LessonPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parallel",{"_index":512,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["parameters",{"_index":137,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":1529,"title":{},"body":{"components/Practice.html":{}}}],["paris",{"_index":863,"title":{},"body":{"components/LessonPage.html":{}}}],["part",{"_index":478,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["partial",{"_index":1945,"title":{},"body":{"injectables/UserService.html":{}}}],["parts",{"_index":471,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["parts[parts.length",{"_index":474,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["password",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["passwordctrl",{"_index":1153,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["passwordctrl.errors?.['invalidpassword",{"_index":1654,"title":{},"body":{"components/Signup.html":{}}}],["passwordctrl.errors?.['required",{"_index":1653,"title":{},"body":{"components/Signup.html":{}}}],["passwordctrl.errors?.[\\'invalidpassword",{"_index":1660,"title":{},"body":{"components/Signup.html":{}}}],["passwordctrl.errors?.[\\'required",{"_index":1659,"title":{},"body":{"components/Signup.html":{}}}],["passwordctrl.invalid",{"_index":1200,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["passwordctrl.touched",{"_index":1201,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["passwordmismatch",{"_index":1413,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["passwordvalidator",{"_index":90,"title":{"directives/PasswordValidator.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["passwordvisible",{"_index":1154,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["path",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paths",{"_index":583,"title":{},"body":{"components/Features.html":{}}}],["patterns",{"_index":894,"title":{},"body":{"components/LessonPage.html":{}}}],["payload",{"_index":552,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["payload.model",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.model.ts",{"_index":1207,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["pdf",{"_index":1339,"title":{},"body":{"components/NamingUpload.html":{}}}],["pdfs",{"_index":573,"title":{},"body":{"components/Features.html":{},"components/NamingUpload.html":{}}}],["pending",{"_index":1693,"title":{},"body":{"components/Subjects.html":{}}}],["people",{"_index":832,"title":{},"body":{"components/LessonPage.html":{}}}],["per",{"_index":1041,"title":{},"body":{"components/LessonPage.html":{},"components/Pricing.html":{}}}],["percentage",{"_index":1044,"title":{},"body":{"components/LessonPage.html":{}}}],["performance",{"_index":2060,"title":{},"body":{"index.html":{}}}],["personal",{"_index":1569,"title":{},"body":{"components/Pricing.html":{}}}],["personalized",{"_index":387,"title":{},"body":{"components/Contact.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"components/TopicPreferences.html":{}}}],["physical",{"_index":845,"title":{},"body":{"components/LessonPage.html":{}}}],["pick",{"_index":947,"title":{},"body":{"components/LessonPage.html":{}}}],["pinpointing",{"_index":611,"title":{},"body":{"components/Features.html":{}}}],["pipe",{"_index":327,"title":{"pipes/MarkdownPipe.html":{}},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{},"pipes/MarkdownPipe.html":{},"components/Practice.html":{},"components/Subtopic.html":{},"coverage.html":{},"overview.html":{}}}],["pipe.ts",{"_index":1215,"title":{},"body":{"pipes/MarkdownPipe.html":{},"coverage.html":{}}}],["pipe.ts:11",{"_index":1226,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["pipe.ts:16",{"_index":1219,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["pipes",{"_index":1213,"title":{},"body":{"pipes/MarkdownPipe.html":{},"index.html":{}}}],["pipetransform",{"_index":1227,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["places",{"_index":829,"title":{},"body":{"components/LessonPage.html":{}}}],["plan",{"_index":1414,"title":{"interfaces/Plan.html":{}},"body":{"interfaces/Plan.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"coverage.html":{}}}],["planid",{"_index":1801,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["plans",{"_index":758,"title":{},"body":{"components/Landing.html":{},"components/Pricing.html":{},"components/Subscription.html":{}}}],["please",{"_index":1328,"title":{},"body":{"components/NamingUpload.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["png",{"_index":1338,"title":{},"body":{"components/NamingUpload.html":{}}}],["pollution",{"_index":914,"title":{},"body":{"components/LessonPage.html":{}}}],["popular",{"_index":1556,"title":{},"body":{"components/Pricing.html":{}}}],["post",{"_index":706,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["post(endpoint",{"_index":716,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["potential",{"_index":752,"title":{},"body":{"components/Landing.html":{}}}],["power",{"_index":1544,"title":{},"body":{"components/Pricing.html":{}}}],["powered",{"_index":1646,"title":{},"body":{"components/Signup.html":{}}}],["powerful",{"_index":2045,"title":{},"body":{"index.html":{}}}],["practice",{"_index":62,"title":{"components/Practice.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["practice'},{'name",{"_index":63,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["practice.css",{"_index":1425,"title":{},"body":{"components/Practice.html":{}}}],["practice.html",{"_index":1424,"title":{},"body":{"components/Practice.html":{}}}],["practice/practice",{"_index":816,"title":{},"body":{"components/LessonPage.html":{}}}],["preference",{"_index":447,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["preferences",{"_index":1325,"title":{},"body":{"components/NamingUpload.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["preferences').then(m",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferences'},{'name",{"_index":83,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["preferences.css",{"_index":1870,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.html",{"_index":1869,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts",{"_index":1868,"title":{},"body":{"components/TopicPreferences.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["preferences.ts:23",{"_index":1880,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:24",{"_index":1898,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:25",{"_index":1882,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:26",{"_index":1883,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:27",{"_index":1897,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:64",{"_index":1900,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:65",{"_index":1899,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:66",{"_index":1875,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:75",{"_index":1879,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:83",{"_index":1876,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences.ts:99",{"_index":1877,"title":{},"body":{"components/TopicPreferences.html":{}}}],["preferences/topic",{"_index":1867,"title":{},"body":{"components/TopicPreferences.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["preferred",{"_index":585,"title":{},"body":{"components/Features.html":{}}}],["prefs",{"_index":1722,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["preloaded",{"_index":335,"title":{},"body":{"components/Chatbot.html":{}}}],["premium",{"_index":1565,"title":{},"body":{"components/Pricing.html":{}}}],["prev",{"_index":1824,"title":{},"body":{"components/Subtopic.html":{}}}],["previous",{"_index":1066,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{},"components/Subtopic.html":{}}}],["prevsubtopic",{"_index":1812,"title":{},"body":{"components/Subtopic.html":{}}}],["price",{"_index":1418,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["pricing",{"_index":64,"title":{"components/Pricing.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["pricing'},{'name",{"_index":65,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["pricing.css",{"_index":1538,"title":{},"body":{"components/Pricing.html":{}}}],["pricing.html",{"_index":1537,"title":{},"body":{"components/Pricing.html":{}}}],["pricing/pricing",{"_index":698,"title":{},"body":{"components/Home.html":{}}}],["private",{"_index":159,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["pro",{"_index":1557,"title":{},"body":{"components/Pricing.html":{}}}],["proceed",{"_index":1472,"title":{},"body":{"components/Practice.html":{}}}],["production",{"_index":2058,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":610,"title":{},"body":{"components/Features.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{}}}],["progress\").subscribe",{"_index":525,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["project",{"_index":2021,"title":{},"body":{"index.html":{}}}],["prompt",{"_index":104,"title":{},"body":{"interfaces/AnswerModel.html":{}}}],["properties",{"_index":100,"title":{"properties.html":{}},"body":{"interfaces/AnswerModel.html":{},"components/App.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Header.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{},"properties.html":{}}}],["protected",{"_index":115,"title":{},"body":{"components/App.html":{}}}],["provide",{"_index":1398,"title":{},"body":{"directives/PasswordValidator.html":{},"miscellaneous/variables.html":{}}}],["providebrowserglobalerrorlisteners",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providemarkdown",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1391,"title":{},"body":{"directives/PasswordValidator.html":{},"components/Toast.html":{},"miscellaneous/variables.html":{}}}],["providezonelesschangedetection",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prussian",{"_index":426,"title":{},"body":{"components/CreationStepTab.html":{}}}],["public",{"_index":1832,"title":{},"body":{"components/Toast.html":{}}}],["put",{"_index":707,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["put(endpoint",{"_index":719,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["pw",{"_index":1409,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["q",{"_index":1478,"title":{},"body":{"components/Practice.html":{}}}],["q.essay_answer",{"_index":1496,"title":{},"body":{"components/Practice.html":{}}}],["q.essay_feedback",{"_index":1497,"title":{},"body":{"components/Practice.html":{}}}],["q.id",{"_index":1455,"title":{},"body":{"components/Practice.html":{}}}],["q.options",{"_index":1486,"title":{},"body":{"components/Practice.html":{}}}],["q1",{"_index":854,"title":{},"body":{"components/LessonPage.html":{}}}],["q2",{"_index":871,"title":{},"body":{"components/LessonPage.html":{}}}],["q3",{"_index":880,"title":{},"body":{"components/LessonPage.html":{}}}],["qt",{"_index":484,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["question",{"_index":67,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["question.essay_answer",{"_index":1489,"title":{},"body":{"components/Practice.html":{}}}],["question.essay_answer).pipe",{"_index":1492,"title":{},"body":{"components/Practice.html":{}}}],["question.essay_feedback",{"_index":1498,"title":{},"body":{"components/Practice.html":{}}}],["question.id",{"_index":1479,"title":{},"body":{"components/Practice.html":{}}}],["question.model",{"_index":440,"title":{},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{}}}],["question.options",{"_index":1535,"title":{},"body":{"components/Practice.html":{}}}],["question.options?.every(opt",{"_index":1483,"title":{},"body":{"components/Practice.html":{}}}],["question.options?.map(opt",{"_index":1487,"title":{},"body":{"components/Practice.html":{}}}],["question.type",{"_index":1480,"title":{},"body":{"components/Practice.html":{}}}],["question_data",{"_index":1147,"title":{},"body":{"injectables/LessonService.html":{}}}],["question_event",{"_index":797,"title":{},"body":{"components/LessonPage.html":{}}}],["question_event.id",{"_index":1088,"title":{},"body":{"components/LessonPage.html":{}}}],["question_id",{"_index":853,"title":{},"body":{"components/LessonPage.html":{},"injectables/LessonService.html":{}}}],["question_text",{"_index":855,"title":{},"body":{"components/LessonPage.html":{}}}],["question_type",{"_index":857,"title":{},"body":{"components/LessonPage.html":{}}}],["question_types",{"_index":1752,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["questiondata",{"_index":1128,"title":{},"body":{"injectables/LessonService.html":{},"components/Practice.html":{}}}],["questiondata).pipe",{"_index":1521,"title":{},"body":{"components/Practice.html":{}}}],["questiondata.push(q",{"_index":1503,"title":{},"body":{"components/Practice.html":{}}}],["questionid",{"_index":105,"title":{},"body":{"interfaces/AnswerModel.html":{},"injectables/LessonService.html":{}}}],["questionmodel",{"_index":438,"title":{"interfaces/QuestionModel.html":{}},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"coverage.html":{}}}],["questionoption",{"_index":1573,"title":{"interfaces/QuestionOption.html":{}},"body":{"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"coverage.html":{}}}],["questions",{"_index":436,"title":{},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["questionsettings",{"_index":66,"title":{"components/QuestionSettings.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["questiontype",{"_index":1574,"title":{},"body":{"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["questiontypes",{"_index":448,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{}}}],["question{{(currentview.content.questions.length",{"_index":1098,"title":{},"body":{"components/LessonPage.html":{}}}],["queuemicrotask",{"_index":300,"title":{},"body":{"components/Chatbot.html":{}}}],["quick",{"_index":390,"title":{},"body":{"components/Contact.html":{}}}],["quickly",{"_index":601,"title":{},"body":{"components/Features.html":{}}}],["quizzes",{"_index":607,"title":{},"body":{"components/Features.html":{},"components/Landing.html":{}}}],["r.exercise",{"_index":971,"title":{},"body":{"components/LessonPage.html":{}}}],["r.subtopics",{"_index":969,"title":{},"body":{"components/LessonPage.html":{}}}],["read",{"_index":834,"title":{},"body":{"components/LessonPage.html":{},"injectables/LessonService.html":{},"interfaces/SubtopicModel.html":{}}}],["readme",{"_index":2019,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":116,"title":{},"body":{"components/App.html":{},"injectables/HttpBaseService.html":{}}}],["real",{"_index":1172,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["reason",{"_index":637,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["red",{"_index":1853,"title":{},"body":{"components/Toast.html":{}}}],["redirect",{"_index":181,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["reducing",{"_index":919,"title":{},"body":{"components/LessonPage.html":{}}}],["reference",{"_index":2084,"title":{},"body":{"index.html":{}}}],["references",{"_index":2082,"title":{},"body":{"index.html":{}}}],["refresh",{"_index":1530,"title":{},"body":{"components/Practice.html":{},"components/Subscription.html":{}}}],["refreshaccesstoken",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["regex",{"_index":1402,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["regex.test(control.value",{"_index":1407,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["regions",{"_index":891,"title":{},"body":{"components/LessonPage.html":{}}}],["reinforce",{"_index":1100,"title":{},"body":{"components/LessonPage.html":{}}}],["rejected",{"_index":638,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["relationships",{"_index":830,"title":{},"body":{"components/LessonPage.html":{}}}],["reload",{"_index":2039,"title":{},"body":{"index.html":{}}}],["removefile",{"_index":1250,"title":{},"body":{"components/NamingUpload.html":{}}}],["removefile(file",{"_index":1267,"title":{},"body":{"components/NamingUpload.html":{}}}],["rendered",{"_index":298,"title":{},"body":{"components/Chatbot.html":{}}}],["replace",{"_index":1171,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["req",{"_index":145,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.clone",{"_index":164,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["request",{"_index":174,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["requests",{"_index":510,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["requests.length",{"_index":520,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["requests.push",{"_index":513,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["required",{"_index":415,"title":{},"body":{"components/CreationStepTab.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["res",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"directives/FileTypeDirective.html":{}}}],["res.accesstoken",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.exam",{"_index":981,"title":{},"body":{"components/LessonPage.html":{}}}],["res.exercise",{"_index":975,"title":{},"body":{"components/LessonPage.html":{}}}],["res.ok",{"_index":658,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["res.refreshtoken",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.sessions",{"_index":941,"title":{},"body":{"components/LessonPage.html":{}}}],["res.subtopics",{"_index":973,"title":{},"body":{"components/LessonPage.html":{}}}],["res.topics",{"_index":957,"title":{},"body":{"components/LessonPage.html":{}}}],["reserved",{"_index":397,"title":{},"body":{"components/Contact.html":{}}}],["reset",{"_index":664,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["resonates",{"_index":588,"title":{},"body":{"components/Features.html":{}}}],["resources",{"_index":2080,"title":{},"body":{"index.html":{}}}],["response",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["response.accesstoken",{"_index":1183,"title":{},"body":{"components/Login.html":{}}}],["response.history",{"_index":936,"title":{},"body":{"components/LessonPage.html":{}}}],["response.refreshtoken",{"_index":1184,"title":{},"body":{"components/Login.html":{}}}],["response.response",{"_index":350,"title":{},"body":{"components/Chatbot.html":{}}}],["response.session.id",{"_index":1312,"title":{},"body":{"components/NamingUpload.html":{}}}],["response.sessions",{"_index":1688,"title":{},"body":{"components/Subjects.html":{}}}],["response.topics",{"_index":1906,"title":{},"body":{"components/TopicPreferences.html":{}}}],["response.user",{"_index":1185,"title":{},"body":{"components/Login.html":{}}}],["responses",{"_index":522,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["results",{"_index":93,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":168,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":146,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"injectables/ExerciseService.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["right",{"_index":1840,"title":{},"body":{"components/Toast.html":{}}}],["rights",{"_index":396,"title":{},"body":{"components/Contact.html":{}}}],["river",{"_index":878,"title":{},"body":{"components/LessonPage.html":{}}}],["root",{"_index":111,"title":{},"body":{"components/App.html":{},"injectables/AuthService.html":{},"injectables/ChatbotService.html":{},"injectables/ExerciseService.html":{},"injectables/HttpBaseService.html":{},"injectables/LessonService.html":{},"injectables/NotificationService.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":32,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["rounded",{"_index":1847,"title":{},"body":{"components/Toast.html":{}}}],["route",{"_index":468,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["router",{"_index":135,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"guards/SubscriptionGuard.html":{},"components/TopicPreferences.html":{}}}],["routerlink",{"_index":667,"title":{},"body":{"components/Header.html":{},"components/Sidebar.html":{},"components/Subjects.html":{}}}],["routerlinkactive",{"_index":668,"title":{},"body":{"components/Header.html":{}}}],["routeroutlet",{"_index":112,"title":{},"body":{"components/App.html":{}}}],["routes",{"_index":1969,"title":{"routes.html":{}},"body":{"coverage.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":511,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"index.html":{}}}],["runner",{"_index":2067,"title":{},"body":{"index.html":{}}}],["running",{"_index":2033,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":155,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["s",{"_index":1099,"title":{},"body":{"components/LessonPage.html":{}}}],["s.id",{"_index":946,"title":{},"body":{"components/LessonPage.html":{}}}],["s1",{"_index":827,"title":{},"body":{"components/LessonPage.html":{}}}],["s2",{"_index":835,"title":{},"body":{"components/LessonPage.html":{}}}],["s3",{"_index":844,"title":{},"body":{"components/LessonPage.html":{}}}],["safehtml",{"_index":1220,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["sanitizer",{"_index":1233,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["save",{"_index":1515,"title":{},"body":{"components/Practice.html":{},"components/Pricing.html":{}}}],["savecall",{"_index":1516,"title":{},"body":{"components/Practice.html":{}}}],["saved",{"_index":1553,"title":{},"body":{"components/Pricing.html":{}}}],["saveexamscore",{"_index":1111,"title":{},"body":{"injectables/LessonService.html":{}}}],["saveexamscore(sessionid",{"_index":1126,"title":{},"body":{"injectables/LessonService.html":{}}}],["saveexercisescore",{"_index":1112,"title":{},"body":{"injectables/LessonService.html":{}}}],["saveexercisescore(topicid",{"_index":1131,"title":{},"body":{"injectables/LessonService.html":{}}}],["savequestiondata",{"_index":1129,"title":{"interfaces/SaveQuestionData.html":{}},"body":{"injectables/LessonService.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"coverage.html":{}}}],["saving",{"_index":1531,"title":{},"body":{"components/Practice.html":{}}}],["scaffolding",{"_index":2043,"title":{},"body":{"index.html":{}}}],["schematics",{"_index":2050,"title":{},"body":{"index.html":{}}}],["science",{"_index":1680,"title":{},"body":{"components/Subjects.html":{}}}],["score",{"_index":437,"title":{},"body":{"interfaces/ExamModel.html":{},"interfaces/ExerciseModel.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Practice.html":{}}}],["scoreessayquestion",{"_index":1113,"title":{},"body":{"injectables/LessonService.html":{}}}],["scoreessayquestion(sessionid",{"_index":1134,"title":{},"body":{"injectables/LessonService.html":{}}}],["scoring",{"_index":1501,"title":{},"body":{"components/Practice.html":{}}}],["scroll",{"_index":289,"title":{},"body":{"components/Chatbot.html":{}}}],["scrollbar",{"_index":2011,"title":{},"body":{"dependencies.html":{}}}],["scrollto",{"_index":686,"title":{},"body":{"components/Home.html":{}}}],["scrollto(section",{"_index":692,"title":{},"body":{"components/Home.html":{}}}],["scrolltobottom",{"_index":266,"title":{},"body":{"components/Chatbot.html":{}}}],["section",{"_index":695,"title":{},"body":{"components/Home.html":{}}}],["seem",{"_index":1504,"title":{},"body":{"components/Practice.html":{}}}],["select",{"_index":1916,"title":{},"body":{"components/TopicPreferences.html":{}}}],["selected",{"_index":865,"title":{},"body":{"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{}}}],["selectedoptions",{"_index":106,"title":{},"body":{"interfaces/AnswerModel.html":{}}}],["selectedtopics",{"_index":1908,"title":{},"body":{"components/TopicPreferences.html":{}}}],["selectedtopics.length",{"_index":1910,"title":{},"body":{"components/TopicPreferences.html":{}}}],["selectedtopics.map((topic",{"_index":1918,"title":{},"body":{"components/TopicPreferences.html":{}}}],["selecting",{"_index":1926,"title":{},"body":{"components/TopicPreferences.html":{}}}],["selection",{"_index":665,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Subjects.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["selecttopics",{"_index":1716,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["selecttopics(sessionid",{"_index":1733,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["selectview",{"_index":1594,"title":{},"body":{"components/Sidebar.html":{}}}],["selectview(id",{"_index":1601,"title":{},"body":{"components/Sidebar.html":{}}}],["send",{"_index":356,"title":{},"body":{"components/Chatbot.html":{},"components/NamingUpload.html":{},"components/TopicPreferences.html":{}}}],["sender",{"_index":250,"title":{},"body":{"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["sending",{"_index":354,"title":{},"body":{"components/Chatbot.html":{}}}],["sendmessage",{"_index":267,"title":{},"body":{"components/Chatbot.html":{},"injectables/ChatbotService.html":{}}}],["sendmessage(sessionid",{"_index":363,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["serious",{"_index":1567,"title":{},"body":{"components/Pricing.html":{}}}],["serveonce",{"_index":2032,"title":{},"body":{"index.html":{}}}],["server",{"_index":2028,"title":{},"body":{"index.html":{}}}],["services/auth.service",{"_index":156,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["services/subscription.service",{"_index":1786,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["session",{"_index":531,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["session_id",{"_index":1142,"title":{},"body":{"injectables/LessonService.html":{}}}],["sessionid",{"_index":361,"title":{},"body":{"injectables/ChatbotService.html":{},"injectables/LessonService.html":{},"components/NamingUpload.html":{},"injectables/SubjectsService.html":{}}}],["sessions",{"_index":943,"title":{},"body":{"components/LessonPage.html":{}}}],["set",{"_index":986,"title":{},"body":{"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["setcurrentuser",{"_index":1937,"title":{},"body":{"injectables/UserService.html":{}}}],["setcurrentuser(user",{"_index":1942,"title":{},"body":{"injectables/UserService.html":{}}}],["setheaders",{"_index":165,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["settings",{"_index":461,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["settings').then(m",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings'},{'name",{"_index":68,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["settings.css",{"_index":463,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["settings.html",{"_index":462,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["settings.ts",{"_index":445,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"coverage.html":{}}}],["settings.ts:10",{"_index":560,"title":{},"body":{"classes/ExerciseSettings.html":{}}}],["settings.ts:11",{"_index":562,"title":{},"body":{"classes/ExerciseSettings.html":{}}}],["settings.ts:12",{"_index":561,"title":{},"body":{"classes/ExerciseSettings.html":{}}}],["settings.ts:15",{"_index":450,"title":{},"body":{"classes/ExamSettings.html":{}}}],["settings.ts:16",{"_index":453,"title":{},"body":{"classes/ExamSettings.html":{}}}],["settings.ts:17",{"_index":451,"title":{},"body":{"classes/ExamSettings.html":{}}}],["settings.ts:18",{"_index":454,"title":{},"body":{"classes/ExamSettings.html":{}}}],["settings.ts:28",{"_index":1584,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:29",{"_index":1583,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:30",{"_index":1585,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:31",{"_index":1586,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:32",{"_index":1579,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:41",{"_index":1582,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:49",{"_index":1581,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings.ts:57",{"_index":1580,"title":{},"body":{"components/QuestionSettings.html":{}}}],["settings/question",{"_index":444,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shadow",{"_index":1848,"title":{},"body":{"components/Toast.html":{}}}],["shape",{"_index":761,"title":{},"body":{"components/Landing.html":{},"components/LessonPage.html":{}}}],["shared/components/header/header",{"_index":456,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["shared/components/toast/toast",{"_index":125,"title":{},"body":{"components/App.html":{}}}],["shared/directives/password",{"_index":1634,"title":{},"body":{"components/Signup.html":{}}}],["shared/pipes/markdown",{"_index":326,"title":{},"body":{"components/Chatbot.html":{},"components/Practice.html":{},"components/Subtopic.html":{}}}],["show",{"_index":1357,"title":{},"body":{"injectables/NotificationService.html":{}}}],["show(type",{"_index":1361,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showerror",{"_index":1358,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showerror(msg",{"_index":1367,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showlogout",{"_index":670,"title":{},"body":{"components/Header.html":{}}}],["showsuccess",{"_index":1359,"title":{},"body":{"injectables/NotificationService.html":{}}}],["showsuccess(msg",{"_index":1370,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sidebar",{"_index":69,"title":{"components/Sidebar.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["sidebar'},{'name",{"_index":70,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["sidebar.css",{"_index":1592,"title":{},"body":{"components/Sidebar.html":{}}}],["sidebar.html",{"_index":1591,"title":{},"body":{"components/Sidebar.html":{}}}],["sidebar/sidebar",{"_index":813,"title":{},"body":{"components/LessonPage.html":{}}}],["sign",{"_index":1202,"title":{},"body":{"components/Login.html":{}}}],["signal",{"_index":123,"title":{},"body":{"components/App.html":{},"components/Header.html":{},"components/LessonPage.html":{},"injectables/NotificationService.html":{},"components/Subscription.html":{}}}],["signal('maestro_frontend",{"_index":120,"title":{},"body":{"components/App.html":{}}}],["signal(false",{"_index":677,"title":{},"body":{"components/Header.html":{}}}],["signal(null",{"_index":1374,"title":{},"body":{"injectables/NotificationService.html":{},"components/Subscription.html":{}}}],["significance",{"_index":931,"title":{},"body":{"components/LessonPage.html":{}}}],["significantly",{"_index":916,"title":{},"body":{"components/LessonPage.html":{}}}],["signup",{"_index":71,"title":{"components/Signup.html":{}},"body":{"components/About.html":{},"components/App.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signup'},{'name",{"_index":72,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["signup(data",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup.html",{"_index":1614,"title":{},"body":{"components/Signup.html":{}}}],["signuppayload",{"_index":1209,"title":{"interfaces/SignupPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["simple",{"_index":1539,"title":{},"body":{"components/Pricing.html":{}}}],["simplechanges",{"_index":1452,"title":{},"body":{"components/Practice.html":{}}}],["simplified",{"_index":1648,"title":{},"body":{"components/Signup.html":{}}}],["size",{"_index":632,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/NamingUpload.html":{}}}],["size.tofixed(3",{"_index":1294,"title":{},"body":{"components/NamingUpload.html":{}}}],["sj2nd",{"_index":1671,"title":{},"body":{"components/Subjects.html":{}}}],["smarter",{"_index":567,"title":{},"body":{"components/Features.html":{}}}],["source",{"_index":3,"title":{},"body":{"components/About.html":{},"interfaces/AnswerModel.html":{},"components/App.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"components/Pricing.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"components/VerifyEmail.html":{},"interfaces/VerifyEmailResponse.html":{},"index.html":{}}}],["space",{"_index":1845,"title":{},"body":{"components/Toast.html":{}}}],["specific",{"_index":1927,"title":{},"body":{"components/TopicPreferences.html":{}}}],["speed",{"_index":2061,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.routes.ts",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chat",{"_index":2090,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environment.prod.ts",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":2017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../http",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification.service.ts",{"_index":2091,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../question.model.ts",{"_index":2092,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../subject.model.ts",{"_index":2093,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../topic",{"_index":2094,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.config.ts",{"_index":1964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.routes.ts",{"_index":1968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.ts",{"_index":110,"title":{},"body":{"components/App.html":{},"coverage.html":{}}}],["src/app/app.ts:12",{"_index":122,"title":{},"body":{"components/App.html":{}}}],["src/app/core/guards/subscription.guard.ts",{"_index":1782,"title":{},"body":{"guards/SubscriptionGuard.html":{},"coverage.html":{}}}],["src/app/core/guards/subscription.guard.ts:10",{"_index":1784,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["src/app/core/guards/subscription.guard.ts:16",{"_index":1785,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["src/app/core/interceptors/auth.interceptor.ts",{"_index":129,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"coverage.html":{}}}],["src/app/core/interceptors/auth.interceptor.ts:14",{"_index":136,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/core/interceptors/auth.interceptor.ts:17",{"_index":144,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["src/app/core/interceptors/http",{"_index":1972,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/models/answer.model.ts",{"_index":98,"title":{},"body":{"interfaces/AnswerModel.html":{},"coverage.html":{}}}],["src/app/core/models/auth",{"_index":1206,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["src/app/core/models/chat",{"_index":247,"title":{},"body":{"interfaces/ChatMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/models/exam.model.ts",{"_index":434,"title":{},"body":{"interfaces/ExamModel.html":{},"coverage.html":{}}}],["src/app/core/models/exercise.model.ts",{"_index":540,"title":{},"body":{"interfaces/ExerciseModel.html":{},"coverage.html":{}}}],["src/app/core/models/question.model.ts",{"_index":1572,"title":{},"body":{"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/models/subject.model.ts",{"_index":1981,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/models/subscription.model.ts",{"_index":1415,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{},"coverage.html":{}}}],["src/app/core/models/subtopic.model.ts",{"_index":1828,"title":{},"body":{"interfaces/SubtopicModel.html":{},"coverage.html":{}}}],["src/app/core/models/topic.model.ts",{"_index":1865,"title":{},"body":{"interfaces/TopicModel.html":{},"coverage.html":{}}}],["src/app/core/models/user.model.ts",{"_index":1931,"title":{},"body":{"interfaces/UserModel.html":{},"coverage.html":{}}}],["src/app/core/services/auth.service.ts",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/core/services/auth.service.ts:11",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:14",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:16",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:20",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:24",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:28",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:32",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:43",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:47",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/chatbot.service.ts",{"_index":357,"title":{},"body":{"injectables/ChatbotService.html":{},"coverage.html":{}}}],["src/app/core/services/chatbot.service.ts:10",{"_index":364,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["src/app/core/services/chatbot.service.ts:14",{"_index":360,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["src/app/core/services/chatbot.service.ts:8",{"_index":365,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["src/app/core/services/exercise.service.ts",{"_index":542,"title":{},"body":{"injectables/ExerciseService.html":{},"coverage.html":{}}}],["src/app/core/services/exercise.service.ts:13",{"_index":550,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["src/app/core/services/exercise.service.ts:17",{"_index":553,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["src/app/core/services/exercise.service.ts:9",{"_index":548,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["src/app/core/services/http",{"_index":702,"title":{},"body":{"injectables/HttpBaseService.html":{},"coverage.html":{}}}],["src/app/core/services/lesson.service.ts",{"_index":1105,"title":{},"body":{"injectables/LessonService.html":{},"coverage.html":{}}}],["src/app/core/services/lesson.service.ts:10",{"_index":1136,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:12",{"_index":1118,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:16",{"_index":1115,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:20",{"_index":1122,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:24",{"_index":1120,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:28",{"_index":1135,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:32",{"_index":1125,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:36",{"_index":1133,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/lesson.service.ts:40",{"_index":1130,"title":{},"body":{"injectables/LessonService.html":{}}}],["src/app/core/services/notification.service.ts",{"_index":1355,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/services/notification.service.ts:11",{"_index":1365,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:18",{"_index":1368,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:19",{"_index":1371,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:20",{"_index":1360,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:7",{"_index":1375,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:8",{"_index":1376,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/notification.service.ts:9",{"_index":1373,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/app/core/services/subjects.service.ts",{"_index":1708,"title":{},"body":{"injectables/SubjectsService.html":{},"coverage.html":{}}}],["src/app/core/services/subjects.service.ts:11",{"_index":1728,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:15",{"_index":1720,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:19",{"_index":1730,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:25",{"_index":1732,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:29",{"_index":1735,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:33",{"_index":1727,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:37",{"_index":1725,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:41",{"_index":1723,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:45",{"_index":1739,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:49",{"_index":1737,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subjects.service.ts:9",{"_index":1740,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["src/app/core/services/subscription.service.ts",{"_index":1791,"title":{},"body":{"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["src/app/core/services/subscription.service.ts:13",{"_index":1797,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:17",{"_index":1800,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:21",{"_index":1798,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:25",{"_index":1796,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/subscription.service.ts:9",{"_index":1795,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["src/app/core/services/user.service.ts",{"_index":1933,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/core/services/user.service.ts:13",{"_index":1940,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:17",{"_index":1946,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:21",{"_index":1943,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:25",{"_index":1941,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:8",{"_index":1948,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/core/services/user.service.ts:9",{"_index":1939,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/pages/auth/login/login.ts",{"_index":1150,"title":{},"body":{"components/Login.html":{},"coverage.html":{}}}],["src/app/pages/auth/login/login.ts:12",{"_index":1160,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:13",{"_index":1165,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:14",{"_index":1168,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:15",{"_index":1164,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:17",{"_index":1163,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:18",{"_index":1167,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:20",{"_index":1156,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:25",{"_index":1158,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/login/login.ts:33",{"_index":1157,"title":{},"body":{"components/Login.html":{}}}],["src/app/pages/auth/signup/signup.ts",{"_index":1613,"title":{},"body":{"components/Signup.html":{},"coverage.html":{}}}],["src/app/pages/auth/signup/signup.ts:13",{"_index":1625,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:14",{"_index":1628,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:15",{"_index":1623,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:16",{"_index":1632,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:17",{"_index":1633,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:18",{"_index":1631,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:19",{"_index":1622,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:21",{"_index":1627,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:22",{"_index":1630,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:23",{"_index":1624,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:24",{"_index":1619,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:28",{"_index":1621,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/signup/signup.ts:36",{"_index":1620,"title":{},"body":{"components/Signup.html":{}}}],["src/app/pages/auth/verify",{"_index":1955,"title":{},"body":{"components/VerifyEmail.html":{},"coverage.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts",{"_index":1661,"title":{},"body":{"components/Subjects.html":{},"coverage.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts:15",{"_index":1683,"title":{},"body":{"components/Subjects.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts:45",{"_index":1684,"title":{},"body":{"components/Subjects.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts:46",{"_index":1666,"title":{},"body":{"components/Subjects.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts:50",{"_index":1670,"title":{},"body":{"components/Subjects.html":{}}}],["src/app/pages/dashboard/subjects/subjects.ts:65",{"_index":1669,"title":{},"body":{"components/Subjects.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts",{"_index":1757,"title":{},"body":{"components/Subscription.html":{},"coverage.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:13",{"_index":1769,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:14",{"_index":1762,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:18",{"_index":1764,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:23",{"_index":1767,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:27",{"_index":1765,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/dashboard/subscription/subscription.ts:31",{"_index":1768,"title":{},"body":{"components/Subscription.html":{}}}],["src/app/pages/home/about",{"_index":8,"title":{},"body":{"components/About.html":{},"coverage.html":{}}}],["src/app/pages/home/contact/contact.ts",{"_index":383,"title":{},"body":{"components/Contact.html":{},"coverage.html":{}}}],["src/app/pages/home/features/features.ts",{"_index":563,"title":{},"body":{"components/Features.html":{},"coverage.html":{}}}],["src/app/pages/home/home/home.ts",{"_index":683,"title":{},"body":{"components/Home.html":{},"coverage.html":{}}}],["src/app/pages/home/home/home.ts:15",{"_index":690,"title":{},"body":{"components/Home.html":{}}}],["src/app/pages/home/home/home.ts:21",{"_index":691,"title":{},"body":{"components/Home.html":{}}}],["src/app/pages/home/home/home.ts:25",{"_index":694,"title":{},"body":{"components/Home.html":{}}}],["src/app/pages/home/landing/landing.ts",{"_index":731,"title":{},"body":{"components/Landing.html":{},"coverage.html":{}}}],["src/app/pages/home/landing/landing.ts:12",{"_index":740,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/landing/landing.ts:16",{"_index":744,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/landing/landing.ts:20",{"_index":742,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/landing/landing.ts:24",{"_index":745,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/landing/landing.ts:28",{"_index":741,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/landing/landing.ts:32",{"_index":743,"title":{},"body":{"components/Landing.html":{}}}],["src/app/pages/home/pricing/pricing.ts",{"_index":1536,"title":{},"body":{"components/Pricing.html":{},"coverage.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts",{"_index":252,"title":{},"body":{"components/Chatbot.html":{},"coverage.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:16",{"_index":273,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:17",{"_index":276,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:18",{"_index":275,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:19",{"_index":277,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:20",{"_index":310,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:21",{"_index":314,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:22",{"_index":305,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:23",{"_index":309,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:25",{"_index":279,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:29",{"_index":312,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:30",{"_index":315,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:33",{"_index":303,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:45",{"_index":278,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:51",{"_index":280,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/chatbot/chatbot.ts:57",{"_index":281,"title":{},"body":{"components/Chatbot.html":{}}}],["src/app/pages/lesson/lesson",{"_index":763,"title":{},"body":{"components/LessonPage.html":{},"coverage.html":{}}}],["src/app/pages/lesson/practice/practice.ts",{"_index":1423,"title":{},"body":{"components/Practice.html":{},"coverage.html":{}}}],["src/app/pages/lesson/practice/practice.ts:15",{"_index":1434,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:16",{"_index":1435,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:17",{"_index":1436,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:18",{"_index":1438,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:19",{"_index":1439,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:20",{"_index":1437,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:21",{"_index":1450,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:22",{"_index":1449,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:23",{"_index":1448,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:26",{"_index":1451,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:35",{"_index":1441,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:41",{"_index":1443,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:53",{"_index":1444,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:57",{"_index":1447,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/practice/practice.ts:71",{"_index":1445,"title":{},"body":{"components/Practice.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts",{"_index":1590,"title":{},"body":{"components/Sidebar.html":{},"coverage.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:11",{"_index":1597,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:12",{"_index":1598,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:13",{"_index":1599,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:15",{"_index":1600,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:19",{"_index":1604,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/sidebar/sidebar.ts:26",{"_index":1602,"title":{},"body":{"components/Sidebar.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts",{"_index":1808,"title":{},"body":{"components/Subtopic.html":{},"coverage.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts:12",{"_index":1815,"title":{},"body":{"components/Subtopic.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts:13",{"_index":1816,"title":{},"body":{"components/Subtopic.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts:14",{"_index":1817,"title":{},"body":{"components/Subtopic.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts:16",{"_index":1819,"title":{},"body":{"components/Subtopic.html":{}}}],["src/app/pages/lesson/subtopic/subtopic.ts:20",{"_index":1818,"title":{},"body":{"components/Subtopic.html":{}}}],["src/app/pages/not",{"_index":1345,"title":{},"body":{"components/NotFound.html":{},"coverage.html":{}}}],["src/app/pages/subject",{"_index":398,"title":{},"body":{"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/components/confirm",{"_index":369,"title":{},"body":{"components/ConfirmLogout.html":{},"coverage.html":{}}}],["src/app/shared/components/header/header.ts",{"_index":666,"title":{},"body":{"components/Header.html":{},"coverage.html":{}}}],["src/app/shared/components/header/header.ts:14",{"_index":673,"title":{},"body":{"components/Header.html":{}}}],["src/app/shared/components/header/header.ts:18",{"_index":676,"title":{},"body":{"components/Header.html":{}}}],["src/app/shared/components/header/header.ts:19",{"_index":674,"title":{},"body":{"components/Header.html":{}}}],["src/app/shared/components/header/header.ts:20",{"_index":675,"title":{},"body":{"components/Header.html":{}}}],["src/app/shared/components/toast/toast.ts",{"_index":1830,"title":{},"body":{"components/Toast.html":{},"coverage.html":{}}}],["src/app/shared/components/toast/toast.ts:13",{"_index":1856,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/components/toast/toast.ts:14",{"_index":1858,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/components/toast/toast.ts:15",{"_index":1855,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/components/toast/toast.ts:22",{"_index":1835,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/components/toast/toast.ts:24",{"_index":1857,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/components/toast/toast.ts:28",{"_index":1836,"title":{},"body":{"components/Toast.html":{}}}],["src/app/shared/directives/file",{"_index":614,"title":{},"body":{"directives/FileTypeDirective.html":{},"coverage.html":{}}}],["src/app/shared/directives/password",{"_index":1388,"title":{},"body":{"directives/PasswordValidator.html":{},"coverage.html":{}}}],["src/app/shared/pipes/markdown",{"_index":1214,"title":{},"body":{"pipes/MarkdownPipe.html":{},"coverage.html":{}}}],["src/app/shared/utils/file",{"_index":1994,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/environments/environment.prod.ts",{"_index":1997,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1998,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st.isactive",{"_index":1789,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["st.read",{"_index":989,"title":{},"body":{"components/LessonPage.html":{}}}],["st.read).length",{"_index":1037,"title":{},"body":{"components/LessonPage.html":{}}}],["standalone",{"_index":404,"title":{},"body":{"components/CreationStepTab.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"pipes/MarkdownPipe.html":{},"components/Subscription.html":{},"components/Toast.html":{}}}],["start",{"_index":1335,"title":{},"body":{"components/NamingUpload.html":{},"components/Pricing.html":{},"components/Subjects.html":{},"index.html":{}}}],["started",{"_index":759,"title":{},"body":{"components/Landing.html":{},"components/Pricing.html":{},"components/Subjects.html":{}}}],["startedat",{"_index":1420,"title":{},"body":{"interfaces/Plan.html":{},"interfaces/SubscriptionStatus.html":{}}}],["starter",{"_index":1546,"title":{},"body":{"components/Pricing.html":{}}}],["statements",{"_index":1963,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":519,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{}}}],["step",{"_index":42,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["stepper",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["still",{"_index":995,"title":{},"body":{"components/LessonPage.html":{}}}],["store",{"_index":1563,"title":{},"body":{"components/Pricing.html":{},"index.html":{}}}],["stored",{"_index":178,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["storetokens",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["storetokens(res",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["str",{"_index":785,"title":{},"body":{"components/LessonPage.html":{}}}],["str.charat(0).touppercase",{"_index":1091,"title":{},"body":{"components/LessonPage.html":{}}}],["str.slice(1).tolowercase",{"_index":1092,"title":{},"body":{"components/LessonPage.html":{}}}],["string",{"_index":107,"title":{},"body":{"interfaces/AnswerModel.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["studies",{"_index":897,"title":{},"body":{"components/LessonPage.html":{}}}],["study",{"_index":757,"title":{},"body":{"components/Landing.html":{},"components/LessonPage.html":{},"components/Pricing.html":{},"components/Subjects.html":{}}}],["studying",{"_index":883,"title":{},"body":{"components/LessonPage.html":{}}}],["style",{"_index":581,"title":{},"body":{"components/Features.html":{},"components/TopicPreferences.html":{}}}],["styleurl",{"_index":15,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Subjects.html":{},"components/Subtopic.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["subject",{"_index":948,"title":{},"body":{"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/Subjects.html":{},"miscellaneous/variables.html":{}}}],["subject.completion*100).tofixed(0",{"_index":1707,"title":{},"body":{"components/Subjects.html":{}}}],["subject.id",{"_index":1706,"title":{},"body":{"components/Subjects.html":{}}}],["subject.name",{"_index":953,"title":{},"body":{"components/LessonPage.html":{},"components/Subjects.html":{}}}],["subject.status",{"_index":1692,"title":{},"body":{"components/Subjects.html":{}}}],["subject_name",{"_index":820,"title":{},"body":{"components/LessonPage.html":{}}}],["subjectcontent",{"_index":771,"title":{},"body":{"components/LessonPage.html":{}}}],["subjectcontent.subject_name",{"_index":1096,"title":{},"body":{"components/LessonPage.html":{}}}],["subjectid",{"_index":270,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["subjectmodel",{"_index":1668,"title":{},"body":{"components/Subjects.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subjectname",{"_index":1243,"title":{},"body":{"components/NamingUpload.html":{}}}],["subjects",{"_index":73,"title":{"components/Subjects.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["subjects'},{'name",{"_index":74,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["subjects.css",{"_index":1663,"title":{},"body":{"components/Subjects.html":{}}}],["subjects.find(s",{"_index":945,"title":{},"body":{"components/LessonPage.html":{}}}],["subjects.html",{"_index":1662,"title":{},"body":{"components/Subjects.html":{}}}],["subjects.length",{"_index":1701,"title":{},"body":{"components/Subjects.html":{}}}],["subjectservice",{"_index":464,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["subjectsservice",{"_index":457,"title":{"injectables/SubjectsService.html":{}},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/TopicPreferences.html":{},"coverage.html":{}}}],["submit",{"_index":1474,"title":{},"body":{"components/Practice.html":{}}}],["submitanswers",{"_index":545,"title":{},"body":{"injectables/ExerciseService.html":{},"components/Practice.html":{}}}],["submitanswers(id",{"_index":551,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["subscribe",{"_index":982,"title":{},"body":{"components/LessonPage.html":{},"components/Login.html":{},"components/Practice.html":{},"components/Signup.html":{},"injectables/SubscriptionService.html":{}}}],["subscribe(planid",{"_index":1799,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["subscription",{"_index":75,"title":{"components/Subscription.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["subscription'},{'name",{"_index":76,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["subscriptionguard",{"_index":1780,"title":{"guards/SubscriptionGuard.html":{}},"body":{"guards/SubscriptionGuard.html":{},"coverage.html":{}}}],["subscriptionservice",{"_index":1761,"title":{"injectables/SubscriptionService.html":{}},"body":{"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"coverage.html":{}}}],["subscriptionstatus",{"_index":1419,"title":{"interfaces/SubscriptionStatus.html":{}},"body":{"interfaces/Plan.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"coverage.html":{}}}],["subsvc",{"_index":1763,"title":{},"body":{"components/Subscription.html":{},"guards/SubscriptionGuard.html":{}}}],["subtopic",{"_index":77,"title":{"components/Subtopic.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["subtopic'},{'name",{"_index":78,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["subtopic.css",{"_index":1810,"title":{},"body":{"components/Subtopic.html":{}}}],["subtopic.html",{"_index":1809,"title":{},"body":{"components/Subtopic.html":{}}}],["subtopic.id",{"_index":1010,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{}}}],["subtopic.title",{"_index":1611,"title":{},"body":{"components/Sidebar.html":{}}}],["subtopic/subtopic",{"_index":815,"title":{},"body":{"components/LessonPage.html":{}}}],["subtopic_id",{"_index":1144,"title":{},"body":{"injectables/LessonService.html":{}}}],["subtopicid",{"_index":1124,"title":{},"body":{"injectables/LessonService.html":{}}}],["subtopicmodel",{"_index":1827,"title":{"interfaces/SubtopicModel.html":{}},"body":{"interfaces/SubtopicModel.html":{},"coverage.html":{}}}],["subtopics",{"_index":826,"title":{},"body":{"components/LessonPage.html":{}}}],["subtopics.findindex((s",{"_index":1070,"title":{},"body":{"components/LessonPage.html":{}}}],["subtopics.length",{"_index":1072,"title":{},"body":{"components/LessonPage.html":{}}}],["subtopics[newindex].id",{"_index":1074,"title":{},"body":{"components/LessonPage.html":{}}}],["success",{"_index":1212,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"injectables/NotificationService.html":{},"interfaces/SignupPayload.html":{},"components/Toast.html":{},"interfaces/VerifyEmailResponse.html":{},"miscellaneous/typealiases.html":{}}}],["successful",{"_index":1182,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["successfully",{"_index":1049,"title":{},"body":{"components/LessonPage.html":{}}}],["such",{"_index":912,"title":{},"body":{"components/LessonPage.html":{},"index.html":{}}}],["suited",{"_index":580,"title":{},"body":{"components/Features.html":{}}}],["suits",{"_index":2077,"title":{},"body":{"index.html":{}}}],["summaries",{"_index":590,"title":{},"body":{"components/Features.html":{}}}],["sure",{"_index":380,"title":{},"body":{"components/ConfirmLogout.html":{},"components/Practice.html":{}}}],["switchmap",{"_index":819,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["switchmap((res",{"_index":955,"title":{},"body":{"components/LessonPage.html":{}}}],["switchmap((subject",{"_index":949,"title":{},"body":{"components/LessonPage.html":{}}}],["t",{"_index":710,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["t.id",{"_index":1060,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{}}}],["t1",{"_index":823,"title":{},"body":{"components/LessonPage.html":{}}}],["t2",{"_index":888,"title":{},"body":{"components/LessonPage.html":{}}}],["tab",{"_index":403,"title":{},"body":{"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["tab'},{'name",{"_index":43,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["tab.css",{"_index":406,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.html",{"_index":405,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts",{"_index":401,"title":{},"body":{"components/CreationStepTab.html":{},"coverage.html":{}}}],["tab.ts:12",{"_index":416,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts:13",{"_index":414,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts:14",{"_index":413,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts:16",{"_index":418,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts:17",{"_index":419,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab.ts:19",{"_index":417,"title":{},"body":{"components/CreationStepTab.html":{}}}],["tab/creation",{"_index":400,"title":{},"body":{"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/NamingUpload.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"coverage.html":{}}}],["table",{"_index":2000,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1999,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":582,"title":{},"body":{"components/Features.html":{},"components/Landing.html":{}}}],["tailwind",{"_index":2010,"title":{},"body":{"dependencies.html":{}}}],["take",{"_index":1101,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["tap",{"_index":1454,"title":{},"body":{"components/Practice.html":{}}}],["tap((value",{"_index":1493,"title":{},"body":{"components/Practice.html":{}}}],["tell",{"_index":584,"title":{},"body":{"components/Features.html":{}}}],["temperatures",{"_index":895,"title":{},"body":{"components/LessonPage.html":{}}}],["template",{"_index":4,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["templateurl",{"_index":13,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["test",{"_index":2066,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2073,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":2071,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2063,"title":{},"body":{"index.html":{}}}],["text",{"_index":412,"title":{},"body":{"components/CreationStepTab.html":{},"components/Login.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"interfaces/SaveQuestionData.html":{},"components/Signup.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{}}}],["textcolour",{"_index":408,"title":{},"body":{"components/CreationStepTab.html":{}}}],["this._timer",{"_index":1381,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.active",{"_index":423,"title":{},"body":{"components/CreationStepTab.html":{}}}],["this.appfiletype",{"_index":656,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["this.auth.accesstoken",{"_index":162,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["this.auth.logout",{"_index":180,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Header.html":{}}}],["this.authservice.login",{"_index":1178,"title":{},"body":{"components/Login.html":{}}}],["this.authservice.signup",{"_index":1639,"title":{},"body":{"components/Signup.html":{}}}],["this.bgcolour",{"_index":424,"title":{},"body":{"components/CreationStepTab.html":{}}}],["this.cdr.detectchanges",{"_index":1004,"title":{},"body":{"components/LessonPage.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["this.changeprogress.emit",{"_index":1528,"title":{},"body":{"components/Practice.html":{}}}],["this.changequestion.emit({id",{"_index":1461,"title":{},"body":{"components/Practice.html":{}}}],["this.chatbotservice.getchathistory(this.subjectid).subscribe",{"_index":935,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatbotservice.sendmessage(this.subjectid",{"_index":346,"title":{},"body":{"components/Chatbot.html":{}}}],["this.chatcontainer?.nativeelement",{"_index":337,"title":{},"body":{"components/Chatbot.html":{}}}],["this.chathistory",{"_index":284,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["this.chathistory()?.push",{"_index":343,"title":{},"body":{"components/Chatbot.html":{}}}],["this.chathistory.update(history",{"_index":348,"title":{},"body":{"components/Chatbot.html":{}}}],["this.chatmetadata.exam_id",{"_index":1085,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.exercise_id",{"_index":1084,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.question_id",{"_index":1086,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.sub_topic_id",{"_index":1081,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.sub_topic_name",{"_index":1082,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.topic_id",{"_index":1077,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatmetadata.topic_name",{"_index":1079,"title":{},"body":{"components/LessonPage.html":{}}}],["this.chatopen",{"_index":1026,"title":{},"body":{"components/LessonPage.html":{}}}],["this.checkfortopiccompleteness(topic_id",{"_index":1024,"title":{},"body":{"components/LessonPage.html":{}}}],["this.clear",{"_index":1383,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.closechat.emit",{"_index":328,"title":{},"body":{"components/Chatbot.html":{}}}],["this.content().topics.find((t",{"_index":1606,"title":{},"body":{"components/Sidebar.html":{}}}],["this.currentmessage",{"_index":341,"title":{},"body":{"components/Chatbot.html":{}}}],["this.currenttopic().id",{"_index":1823,"title":{},"body":{"components/Subtopic.html":{}}}],["this.currentuser$.asobservable",{"_index":1954,"title":{},"body":{"injectables/UserService.html":{}}}],["this.currentuser$.next(user",{"_index":1953,"title":{},"body":{"injectables/UserService.html":{}}}],["this.currentview",{"_index":1015,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["this.currentview().content.questions.findindex((q",{"_index":1462,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().content.questions.foreach((question",{"_index":1477,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().content.questions.length",{"_index":1457,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().content.questions[newindex",{"_index":1459,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().content.score",{"_index":1527,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().id",{"_index":1520,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview().type",{"_index":1517,"title":{},"body":{"components/Practice.html":{}}}],["this.currentview.content.score",{"_index":1027,"title":{},"body":{"components/LessonPage.html":{}}}],["this.currentview.content.title",{"_index":1083,"title":{},"body":{"components/LessonPage.html":{}}}],["this.currentview.id",{"_index":998,"title":{},"body":{"components/LessonPage.html":{}}}],["this.currentview.type",{"_index":1075,"title":{},"body":{"components/LessonPage.html":{}}}],["this.cyclesubtopic.emit",{"_index":1822,"title":{},"body":{"components/Subtopic.html":{}}}],["this.email",{"_index":1179,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["this.emailctrl.invalid",{"_index":1175,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["this.examsettings.include",{"_index":505,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.examsettings.preference",{"_index":507,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.examsettings.questiontypes",{"_index":488,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.examsettings.questiontypes.filter((qt",{"_index":489,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.examsettings.questiontypes.length",{"_index":506,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.examsettings.questiontypes.push(event.target.value",{"_index":487,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisecompleted.emit(this.topicid",{"_index":1522,"title":{},"body":{"components/Practice.html":{}}}],["this.exercisesettings.include",{"_index":496,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisesettings.preference",{"_index":501,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisesettings.questiontypes",{"_index":482,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisesettings.questiontypes.filter((qt",{"_index":483,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisesettings.questiontypes.length",{"_index":497,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.exercisesettings.questiontypes.push(event.target.value",{"_index":481,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.fileerror.emit(res.reason",{"_index":660,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["this.fileok.emit(f",{"_index":659,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["this.fileok.emit(null",{"_index":662,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["this.files",{"_index":1285,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.files).subscribe",{"_index":1316,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.files.filter((f",{"_index":1290,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.files.length",{"_index":1301,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.firstname",{"_index":1640,"title":{},"body":{"components/Signup.html":{}}}],["this.firstnamectrl.invalid",{"_index":1635,"title":{},"body":{"components/Signup.html":{}}}],["this.getheaders",{"_index":727,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["this.gettopicdatafromexercise",{"_index":1087,"title":{},"body":{"components/LessonPage.html":{}}}],["this.gettopicdatafromsubtopic",{"_index":1076,"title":{},"body":{"components/LessonPage.html":{}}}],["this.gettopicdatafromsubtopic().id",{"_index":1018,"title":{},"body":{"components/LessonPage.html":{}}}],["this.http.delete(`${this.apiurl}/${endpoint",{"_index":730,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["this.http.get('session/list",{"_index":1741,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.get(`${this.apiurl}/${endpoint",{"_index":725,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["this.http.get(`${this.apiurl}/${id}/answers",{"_index":558,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["this.http.get(`${this.baseurl}/me",{"_index":1951,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.get(`${this.baseurl}/plans",{"_index":1804,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.http.get(`${this.baseurl}/status",{"_index":1806,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.http.get(`chatbot/${sessionid}/chat",{"_index":368,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["this.http.get(`session/${sessionid}/get",{"_index":1140,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.get(`topic/${sessionid}/list",{"_index":1138,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.get(`topic/${topicid}/get",{"_index":1139,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.post('auth/login",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post('auth/logout",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post('auth/refresh",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post('auth/sign",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post('auth/verify",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.post('session/create",{"_index":1742,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.post(`${this.apiurl}/${endpoint",{"_index":728,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["this.http.post(`${this.apiurl}/${id}/submit",{"_index":559,"title":{},"body":{"injectables/ExerciseService.html":{}}}],["this.http.post(`${this.baseurl}/cancel",{"_index":1807,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.http.post(`${this.baseurl}/subscribe",{"_index":1805,"title":{},"body":{"injectables/SubscriptionService.html":{}}}],["this.http.post(`chatbot/${sessionid}/send",{"_index":367,"title":{},"body":{"injectables/ChatbotService.html":{}}}],["this.http.post(`chatbot/answer",{"_index":1141,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.post(`session/${sessionid}/docs/ingest",{"_index":1746,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.post(`session/${sessionid}/docs/label",{"_index":1747,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.post(`session/${sessionid}/generate",{"_index":1749,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.post(`session/${sessionid}/select",{"_index":1748,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.put(`${this.apiurl}/${endpoint",{"_index":729,"title":{},"body":{"injectables/HttpBaseService.html":{}}}],["this.http.put(`${this.baseurl}/me",{"_index":1952,"title":{},"body":{"injectables/UserService.html":{}}}],["this.http.put(`session/${sessionid}/save",{"_index":1148,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.put(`session/${sessionid}/update",{"_index":1755,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["this.http.put(`topic/${topicid}/mark",{"_index":1143,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.http.put(`topic/${topicid}/save",{"_index":1145,"title":{},"body":{"injectables/LessonService.html":{}}}],["this.injector",{"_index":302,"title":{},"body":{"components/Chatbot.html":{}}}],["this.lastname",{"_index":1641,"title":{},"body":{"components/Signup.html":{}}}],["this.lastnamectrl.invalid",{"_index":1636,"title":{},"body":{"components/Signup.html":{}}}],["this.learningstyle).subscribe",{"_index":1922,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.learningstylectrl.invalid",{"_index":1912,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.lessonservice.getallsubtopics(topic.id).pipe",{"_index":967,"title":{},"body":{"components/LessonPage.html":{}}}],["this.lessonservice.getalltopics(this.subjectid",{"_index":954,"title":{},"body":{"components/LessonPage.html":{}}}],["this.lessonservice.getalltopics(this.subjectid).subscribe",{"_index":1904,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.lessonservice.getexam(this.subjectid).pipe",{"_index":979,"title":{},"body":{"components/LessonPage.html":{}}}],["this.lessonservice.getexercise(topic.id).pipe",{"_index":970,"title":{},"body":{"components/LessonPage.html":{}}}],["this.lessonservice.marksubtopicasread(topic_id",{"_index":1019,"title":{},"body":{"components/LessonPage.html":{}}}],["this.lessonservice.saveexamscore(this.subjectid",{"_index":1523,"title":{},"body":{"components/Practice.html":{}}}],["this.lessonservice.saveexercisescore(this.topicid",{"_index":1519,"title":{},"body":{"components/Practice.html":{}}}],["this.lessonservice.scoreessayquestion(this.subjectid",{"_index":1491,"title":{},"body":{"components/Practice.html":{}}}],["this.loading",{"_index":340,"title":{},"body":{"components/Chatbot.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["this.maxbytes",{"_index":657,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["this.md.render(value",{"_index":1234,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["this.message.set(msg",{"_index":1379,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.message.set(null",{"_index":1386,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.metadata()).subscribe",{"_index":347,"title":{},"body":{"components/Chatbot.html":{}}}],["this.msg",{"_index":1860,"title":{},"body":{"components/Toast.html":{}}}],["this.navigatesection.emit('contact",{"_index":749,"title":{},"body":{"components/Landing.html":{}}}],["this.navigatesection.emit('features",{"_index":747,"title":{},"body":{"components/Landing.html":{}}}],["this.navigatesection.emit('pricing",{"_index":748,"title":{},"body":{"components/Landing.html":{}}}],["this.navigatesection.emit('top",{"_index":746,"title":{},"body":{"components/Landing.html":{}}}],["this.notify.clear",{"_index":1863,"title":{},"body":{"components/Toast.html":{}}}],["this.notify.message",{"_index":1861,"title":{},"body":{"components/Toast.html":{}}}],["this.notify.showerror",{"_index":1281,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.notify.showerror('at",{"_index":1302,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.notify.showerror('subject",{"_index":1300,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.notify.showsuccess(`${validfiles.length",{"_index":1287,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.notify.type",{"_index":1862,"title":{},"body":{"components/Toast.html":{}}}],["this.password",{"_index":1180,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["this.passwordctrl.invalid",{"_index":1176,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["this.passwordvisible",{"_index":1169,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["this.plans.set(plans",{"_index":1773,"title":{},"body":{"components/Subscription.html":{}}}],["this.question",{"_index":1458,"title":{},"body":{"components/Practice.html":{}}}],["this.question.id",{"_index":1456,"title":{},"body":{"components/Practice.html":{}}}],["this.question.id)?.options",{"_index":1471,"title":{},"body":{"components/Practice.html":{}}}],["this.question.options.find((o",{"_index":1468,"title":{},"body":{"components/Practice.html":{}}}],["this.question.options.foreach((option",{"_index":1464,"title":{},"body":{"components/Practice.html":{}}}],["this.question.type",{"_index":1463,"title":{},"body":{"components/Practice.html":{}}}],["this.refresh",{"_index":1774,"title":{},"body":{"components/Subscription.html":{}}}],["this.router.navigate",{"_index":1323,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.router.navigate(['/dashboard",{"_index":1187,"title":{},"body":{"components/Login.html":{}}}],["this.router.navigate(['/dashboard/subscription",{"_index":1790,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["this.router.navigate(['/login",{"_index":183,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"components/Home.html":{},"components/Signup.html":{}}}],["this.router.navigate(['/signup",{"_index":750,"title":{},"body":{"components/Landing.html":{}}}],["this.router.navigate(['/subject",{"_index":1696,"title":{},"body":{"components/Subjects.html":{}}}],["this.router.navigate([`/lesson/${subject.id",{"_index":1700,"title":{},"body":{"components/Subjects.html":{}}}],["this.router.navigate([`/lesson/${this.subjectid",{"_index":528,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.router.navigate([`/subject",{"_index":1697,"title":{},"body":{"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["this.router.navigatebyurl",{"_index":1353,"title":{},"body":{"components/NotFound.html":{}}}],["this.router.navigatebyurl('/login",{"_index":681,"title":{},"body":{"components/Header.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(html",{"_index":1235,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["this.scrolltobottom",{"_index":301,"title":{},"body":{"components/Chatbot.html":{}}}],["this.show('error",{"_index":1384,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.show('success",{"_index":1385,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.showlogout.set(false",{"_index":680,"title":{},"body":{"components/Header.html":{}}}],["this.showlogout.set(true",{"_index":679,"title":{},"body":{"components/Header.html":{}}}],["this.status.set(st",{"_index":1778,"title":{},"body":{"components/Subscription.html":{}}}],["this.subjectcontent",{"_index":952,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.exam",{"_index":980,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.exam.id",{"_index":999,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.exam.score",{"_index":1042,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.topics",{"_index":963,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.topics.find((t",{"_index":1059,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.topics.find((topic",{"_index":1055,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.topics.foreach((topic",{"_index":1032,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectcontent.topics[0",{"_index":1001,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectid",{"_index":473,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["this.subjectname",{"_index":1308,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.subjectname.trim",{"_index":1299,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.subjects",{"_index":1687,"title":{},"body":{"components/Subjects.html":{}}}],["this.subjectservice.createsubject(this.subjectname).subscribe",{"_index":1311,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.subjectservice.generateexam",{"_index":515,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.subjectservice.generateexercise",{"_index":514,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.subjectservice.generatelesson(this.subjectid",{"_index":1921,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.subjectservice.getallsubjects().pipe",{"_index":939,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectservice.getallsubjects().subscribe",{"_index":1686,"title":{},"body":{"components/Subjects.html":{}}}],["this.subjectservice.ingestdocuments(sessionid",{"_index":1315,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.subjectservice.labeldocuments(sessionid).subscribe",{"_index":1320,"title":{},"body":{"components/NamingUpload.html":{}}}],["this.subjectservice.selecttopics(this.subjectid",{"_index":1917,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.subjectservice.updatesessionprogress(this.subjectid",{"_index":1046,"title":{},"body":{"components/LessonPage.html":{}}}],["this.subjectservice.updatesessionstatus(this.subjectid",{"_index":524,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["this.subsvc.cancel().subscribe",{"_index":1776,"title":{},"body":{"components/Subscription.html":{}}}],["this.subsvc.getplans().subscribe(plans",{"_index":1772,"title":{},"body":{"components/Subscription.html":{}}}],["this.subsvc.getstatus().pipe",{"_index":1787,"title":{},"body":{"guards/SubscriptionGuard.html":{}}}],["this.subsvc.getstatus().subscribe(st",{"_index":1777,"title":{},"body":{"components/Subscription.html":{}}}],["this.subsvc.subscribe(id).subscribe",{"_index":1775,"title":{},"body":{"components/Subscription.html":{}}}],["this.textcolour",{"_index":429,"title":{},"body":{"components/CreationStepTab.html":{}}}],["this.topics",{"_index":1905,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.topics.filter((topic",{"_index":1909,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.topics.map",{"_index":1902,"title":{},"body":{"components/TopicPreferences.html":{}}}],["this.type",{"_index":1852,"title":{},"body":{"components/Toast.html":{}}}],["this.type.set(null",{"_index":1387,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.type.set(type",{"_index":1378,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.updatechatmetadata",{"_index":1016,"title":{},"body":{"components/LessonPage.html":{}}}],["this.updatecurrentview",{"_index":990,"title":{},"body":{"components/LessonPage.html":{}}}],["this.updateprogress",{"_index":1023,"title":{},"body":{"components/LessonPage.html":{}}}],["this.updateview.emit",{"_index":1609,"title":{},"body":{"components/Sidebar.html":{}}}],["this.viewready",{"_index":293,"title":{},"body":{"components/Chatbot.html":{}}}],["this.vscroller.scrolltoanchor(section",{"_index":701,"title":{},"body":{"components/Home.html":{}}}],["this.vscroller.scrolltoposition([0",{"_index":700,"title":{},"body":{"components/Home.html":{}}}],["through",{"_index":1031,"title":{},"body":{"components/LessonPage.html":{}}}],["throw",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"components/LessonPage.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":154,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["time",{"_index":1102,"title":{},"body":{"components/LessonPage.html":{},"components/Practice.html":{}}}],["timelimit",{"_index":449,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{},"injectables/SubjectsService.html":{}}}],["timestamp",{"_index":251,"title":{},"body":{"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"components/LessonPage.html":{}}}],["title",{"_index":117,"title":{},"body":{"components/App.html":{},"components/LessonPage.html":{},"interfaces/SubtopicModel.html":{},"interfaces/TopicModel.html":{}}}],["toast",{"_index":79,"title":{"components/Toast.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["toast'},{'name",{"_index":80,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["toast.html",{"_index":1831,"title":{},"body":{"components/Toast.html":{}}}],["togglechatpopup",{"_index":777,"title":{},"body":{"components/LessonPage.html":{}}}],["toggled",{"_index":1090,"title":{},"body":{"components/LessonPage.html":{}}}],["toggleexamtype",{"_index":1577,"title":{},"body":{"components/QuestionSettings.html":{}}}],["toggleexamtype(event",{"_index":486,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["toggleexercisetype",{"_index":1578,"title":{},"body":{"components/QuestionSettings.html":{}}}],["toggleexercisetype(event",{"_index":479,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["toggleexpandtopic",{"_index":1595,"title":{},"body":{"components/Sidebar.html":{}}}],["toggleexpandtopic(topic_id",{"_index":1603,"title":{},"body":{"components/Sidebar.html":{}}}],["togglepasswordvisibility",{"_index":1155,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["toggleselectoption",{"_index":1430,"title":{},"body":{"components/Practice.html":{}}}],["toggleselectoption(id",{"_index":1446,"title":{},"body":{"components/Practice.html":{}}}],["toggletopicselection",{"_index":1874,"title":{},"body":{"components/TopicPreferences.html":{}}}],["toggletopicselection(topic_id",{"_index":1878,"title":{},"body":{"components/TopicPreferences.html":{}}}],["token",{"_index":161,"title":{},"body":{"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"injectables/HttpBaseService.html":{}}}],["tokens/session",{"_index":179,"title":{},"body":{"interceptors/AuthInterceptor.html":{}}}],["tools",{"_index":2046,"title":{},"body":{"index.html":{}}}],["top",{"_index":693,"title":{},"body":{"components/Home.html":{}}}],["topic",{"_index":82,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["topic.completed",{"_index":962,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.exercise",{"_index":974,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{}}}],["topic.exercise.id",{"_index":994,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.exercise.score",{"_index":993,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.expanded",{"_index":1607,"title":{},"body":{"components/Sidebar.html":{}}}],["topic.id",{"_index":960,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{},"components/TopicPreferences.html":{}}}],["topic.id)).subscribe",{"_index":1919,"title":{},"body":{"components/TopicPreferences.html":{}}}],["topic.selected",{"_index":1903,"title":{},"body":{"components/TopicPreferences.html":{}}}],["topic.selected).map((topic",{"_index":959,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics",{"_index":972,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{}}}],["topic.subtopics.every((st",{"_index":1063,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics.filter((st",{"_index":1036,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics.find((st",{"_index":988,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics.length",{"_index":1035,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics.some((subtopic",{"_index":1056,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.subtopics?.length",{"_index":1034,"title":{},"body":{"components/LessonPage.html":{}}}],["topic.title",{"_index":961,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{},"components/TopicPreferences.html":{}}}],["topic_id",{"_index":790,"title":{},"body":{"components/LessonPage.html":{},"components/Sidebar.html":{},"components/TopicPreferences.html":{}}}],["topic_id).subtopics",{"_index":1022,"title":{},"body":{"components/LessonPage.html":{}}}],["topicdata",{"_index":1054,"title":{},"body":{"components/LessonPage.html":{}}}],["topicdata.id",{"_index":1078,"title":{},"body":{"components/LessonPage.html":{}}}],["topicdata.title",{"_index":1080,"title":{},"body":{"components/LessonPage.html":{}}}],["topicdata?.id",{"_index":1057,"title":{},"body":{"components/LessonPage.html":{}}}],["topicdata?.title",{"_index":1058,"title":{},"body":{"components/LessonPage.html":{}}}],["topicid",{"_index":1116,"title":{},"body":{"injectables/LessonService.html":{},"components/Practice.html":{}}}],["topicids",{"_index":1734,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["topicmodel",{"_index":1864,"title":{"interfaces/TopicModel.html":{}},"body":{"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"coverage.html":{}}}],["topicpreferences",{"_index":81,"title":{"components/TopicPreferences.html":{}},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["topicrequests",{"_index":965,"title":{},"body":{"components/LessonPage.html":{}}}],["topics",{"_index":578,"title":{},"body":{"components/Features.html":{},"components/LessonPage.html":{},"components/NamingUpload.html":{},"injectables/SubjectsService.html":{},"components/TopicPreferences.html":{}}}],["topics.map((topic",{"_index":966,"title":{},"body":{"components/LessonPage.html":{}}}],["topicsresponse",{"_index":956,"title":{},"body":{"components/LessonPage.html":{}}}],["topicsresponse.filter((topic",{"_index":958,"title":{},"body":{"components/LessonPage.html":{}}}],["total",{"_index":1029,"title":{},"body":{"components/LessonPage.html":{}}}],["track",{"_index":285,"title":{},"body":{"components/Chatbot.html":{},"components/NamingUpload.html":{},"components/Practice.html":{},"components/Sidebar.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["transform",{"_index":1217,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["transform(value",{"_index":1218,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["tropical",{"_index":904,"title":{},"body":{"components/LessonPage.html":{}}}],["true",{"_index":332,"title":{},"body":{"components/Chatbot.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/LessonPage.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"directives/PasswordValidator.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["trust",{"_index":1509,"title":{},"body":{"components/Practice.html":{}}}],["try",{"_index":288,"title":{},"body":{"components/Chatbot.html":{},"components/Landing.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/TopicPreferences.html":{}}}],["tslib",{"_index":2013,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":576,"title":{},"body":{"components/Features.html":{}}}],["type",{"_index":108,"title":{},"body":{"interfaces/AnswerModel.html":{},"interceptors/AuthInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/ChatMessage.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/CreationStepTab.html":{},"interfaces/ExamModel.html":{},"classes/ExamSettings.html":{},"interfaces/ExerciseModel.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"injectables/HttpBaseService.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"directives/PasswordValidator.html":{},"interfaces/Plan.html":{},"components/Practice.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"interfaces/SignupPayload.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"guards/SubscriptionGuard.html":{},"injectables/SubscriptionService.html":{},"interfaces/SubscriptionStatus.html":{},"components/Subtopic.html":{},"interfaces/SubtopicModel.html":{},"components/Toast.html":{},"interfaces/TopicModel.html":{},"components/TopicPreferences.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.directive.ts",{"_index":615,"title":{},"body":{"directives/FileTypeDirective.html":{},"coverage.html":{}}}],["type.directive.ts:11",{"_index":623,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["type.directive.ts:13",{"_index":630,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["type.directive.ts:15",{"_index":639,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["type.directive.ts:17",{"_index":635,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["type.directive.ts:20",{"_index":643,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["typealiases",{"_index":2088,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":626,"title":{},"body":{"directives/FileTypeDirective.html":{},"components/NamingUpload.html":{},"interfaces/QuestionModel.html":{},"interfaces/QuestionOption.html":{},"components/QuestionSettings.html":{},"interfaces/SaveQuestionData.html":{},"miscellaneous/functions.html":{}}}],["typically",{"_index":1305,"title":{},"body":{"components/NamingUpload.html":{},"components/TopicPreferences.html":{}}}],["typographer",{"_index":1224,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["uamds",{"_index":1673,"title":{},"body":{"components/Subjects.html":{}}}],["undefined",{"_index":1040,"title":{},"body":{"components/LessonPage.html":{},"pipes/MarkdownPipe.html":{}}}],["understanding",{"_index":884,"title":{},"body":{"components/LessonPage.html":{}}}],["unexpected",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":2062,"title":{},"body":{"index.html":{}}}],["unlock",{"_index":751,"title":{},"body":{"components/Landing.html":{},"components/Pricing.html":{}}}],["unreadsubtopic",{"_index":987,"title":{},"body":{"components/LessonPage.html":{}}}],["unreadsubtopic.id",{"_index":991,"title":{},"body":{"components/LessonPage.html":{}}}],["unsupported",{"_index":1282,"title":{},"body":{"components/NamingUpload.html":{}}}],["until",{"_index":297,"title":{},"body":{"components/Chatbot.html":{}}}],["unwrap",{"_index":942,"title":{},"body":{"components/LessonPage.html":{}}}],["up",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"components/Login.html":{},"components/Pricing.html":{}}}],["update",{"_index":530,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["update_tick",{"_index":1756,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["updatechatmetadata",{"_index":778,"title":{},"body":{"components/LessonPage.html":{}}}],["updatechatmetadata(question_event",{"_index":795,"title":{},"body":{"components/LessonPage.html":{}}}],["updatecurrentview",{"_index":779,"title":{},"body":{"components/LessonPage.html":{}}}],["updatecurrentview(event",{"_index":798,"title":{},"body":{"components/LessonPage.html":{}}}],["updated",{"_index":527,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["updateoninputchange",{"_index":1426,"title":{},"body":{"components/Practice.html":{}}}],["updateprofile",{"_index":1938,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(data",{"_index":1944,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprogress",{"_index":780,"title":{},"body":{"components/LessonPage.html":{}}}],["updates",{"_index":1065,"title":{},"body":{"components/LessonPage.html":{}}}],["updatesessionprogress",{"_index":1717,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["updatesessionprogress(sessionid",{"_index":1736,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["updatesessionstatus",{"_index":1718,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["updatesessionstatus(sessionid",{"_index":1738,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["updateview",{"_index":1596,"title":{},"body":{"components/Sidebar.html":{}}}],["updating",{"_index":518,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/QuestionSettings.html":{}}}],["upload",{"_index":572,"title":{},"body":{"components/Features.html":{},"components/Landing.html":{},"components/NamingUpload.html":{},"components/Pricing.html":{},"components/Subjects.html":{},"miscellaneous/variables.html":{}}}],["upload').then(m",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["upload'},{'name",{"_index":59,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["upload.css",{"_index":1240,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.html",{"_index":1239,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts",{"_index":1238,"title":{},"body":{"components/NamingUpload.html":{},"coverage.html":{}}}],["upload.ts:16",{"_index":1273,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:17",{"_index":1269,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:18",{"_index":1270,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:19",{"_index":1271,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:20",{"_index":1274,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:21",{"_index":1251,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:25",{"_index":1263,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:33",{"_index":1261,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:38",{"_index":1259,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:42",{"_index":1265,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:49",{"_index":1254,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:73",{"_index":1268,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:77",{"_index":1256,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload.ts:94",{"_index":1266,"title":{},"body":{"components/NamingUpload.html":{}}}],["upload/naming",{"_index":1237,"title":{},"body":{"components/NamingUpload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploaded",{"_index":1303,"title":{},"body":{"components/NamingUpload.html":{}}}],["urbanization",{"_index":915,"title":{},"body":{"components/LessonPage.html":{}}}],["url",{"_index":469,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["url.com/api",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.split",{"_index":472,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["use",{"_index":2068,"title":{},"body":{"index.html":{}}}],["use(markdownitkatex",{"_index":1225,"title":{},"body":{"pipes/MarkdownPipe.html":{}}}],["use_time_limit",{"_index":1754,"title":{},"body":{"injectables/SubjectsService.html":{}}}],["useclass",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useexisting",{"_index":1399,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["user",{"_index":344,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{},"components/Login.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["user.model",{"_index":1208,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{}}}],["usermodel",{"_index":218,"title":{"interfaces/UserModel.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/UserModel.html":{},"injectables/UserService.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["userservice",{"_index":1932,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["using",{"_index":2022,"title":{},"body":{"index.html":{}}}],["utils/file",{"_index":649,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["valid",{"_index":1638,"title":{},"body":{"components/Signup.html":{}}}],["validate",{"_index":493,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"directives/PasswordValidator.html":{},"components/QuestionSettings.html":{}}}],["validate(control",{"_index":1392,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["validation.util",{"_index":650,"title":{},"body":{"directives/FileTypeDirective.html":{}}}],["validation.util.ts",{"_index":1995,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validationerrors",{"_index":1396,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["validator",{"_index":1390,"title":{},"body":{"directives/PasswordValidator.html":{},"components/Signup.html":{}}}],["validator.ts",{"_index":1389,"title":{},"body":{"directives/PasswordValidator.html":{},"coverage.html":{}}}],["validator.ts:15",{"_index":1394,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["validfiles",{"_index":1286,"title":{},"body":{"components/NamingUpload.html":{}}}],["validfiles.length",{"_index":1284,"title":{},"body":{"components/NamingUpload.html":{}}}],["validfiles.push(file",{"_index":1278,"title":{},"body":{"components/NamingUpload.html":{}}}],["value",{"_index":119,"title":{},"body":{"components/App.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"injectables/ChatbotService.html":{},"components/CreationStepTab.html":{},"classes/ExamSettings.html":{},"injectables/ExerciseService.html":{},"classes/ExerciseSettings.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"injectables/HttpBaseService.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/Login.html":{},"pipes/MarkdownPipe.html":{},"components/NamingUpload.html":{},"injectables/NotificationService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Signup.html":{},"components/Subjects.html":{},"injectables/SubjectsService.html":{},"components/Subscription.html":{},"injectables/SubscriptionService.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["value.correct",{"_index":1495,"title":{},"body":{"components/Practice.html":{}}}],["value.feedback",{"_index":1499,"title":{},"body":{"components/Practice.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{}}}],["variable",{"_index":1965,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2095,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vary",{"_index":901,"title":{},"body":{"components/LessonPage.html":{}}}],["verify",{"_index":85,"title":{},"body":{"components/About.html":{},"components/App.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"miscellaneous/variables.html":{}}}],["verifyemail",{"_index":84,"title":{"components/VerifyEmail.html":{}},"body":{"components/About.html":{},"components/App.html":{},"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/ConfirmLogout.html":{},"components/Contact.html":{},"components/CreationStepTab.html":{},"components/Features.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"components/VerifyEmail.html":{},"coverage.html":{}}}],["verifyemail(token",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemailresponse",{"_index":1211,"title":{"interfaces/VerifyEmailResponse.html":{}},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/SignupPayload.html":{},"interfaces/VerifyEmailResponse.html":{},"coverage.html":{}}}],["version",{"_index":2025,"title":{},"body":{"index.html":{},"properties.html":{}}}],["view",{"_index":291,"title":{},"body":{"components/Chatbot.html":{},"components/LessonPage.html":{},"components/Practice.html":{},"components/Sidebar.html":{}}}],["viewchild",{"_index":320,"title":{},"body":{"components/Chatbot.html":{},"components/Login.html":{},"components/Signup.html":{},"components/TopicPreferences.html":{}}}],["viewchild('chatcontainer",{"_index":308,"title":{},"body":{"components/Chatbot.html":{}}}],["viewchild('emailctrl",{"_index":1162,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["viewchild('firstnamectrl",{"_index":1626,"title":{},"body":{"components/Signup.html":{}}}],["viewchild('lastnamectrl",{"_index":1629,"title":{},"body":{"components/Signup.html":{}}}],["viewchild('learningstylectrl",{"_index":1881,"title":{},"body":{"components/TopicPreferences.html":{}}}],["viewchild('passwordctrl",{"_index":1166,"title":{},"body":{"components/Login.html":{},"components/Signup.html":{}}}],["viewportscroller",{"_index":689,"title":{},"body":{"components/Home.html":{}}}],["viewready",{"_index":263,"title":{},"body":{"components/Chatbot.html":{}}}],["visit",{"_index":2083,"title":{},"body":{"index.html":{}}}],["void",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"components/Chatbot.html":{},"components/CreationStepTab.html":{},"directives/FileTypeDirective.html":{},"components/Header.html":{},"components/Home.html":{},"components/Landing.html":{},"components/LessonPage.html":{},"components/Login.html":{},"components/NamingUpload.html":{},"components/NotFound.html":{},"injectables/NotificationService.html":{},"components/Practice.html":{},"components/QuestionSettings.html":{},"components/Sidebar.html":{},"components/Signup.html":{},"components/Subjects.html":{},"components/Subscription.html":{},"components/Subtopic.html":{},"components/Toast.html":{},"components/TopicPreferences.html":{},"injectables/UserService.html":{}}}],["vscroller",{"_index":688,"title":{},"body":{"components/Home.html":{}}}],["wait",{"_index":516,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{}}}],["want",{"_index":381,"title":{},"body":{"components/ConfirmLogout.html":{},"components/Practice.html":{},"components/Pricing.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":1377,"title":{},"body":{"injectables/NotificationService.html":{},"components/Toast.html":{},"miscellaneous/typealiases.html":{}}}],["water",{"_index":929,"title":{},"body":{"components/LessonPage.html":{}}}],["weather",{"_index":893,"title":{},"body":{"components/LessonPage.html":{}}}],["welcome",{"_index":1191,"title":{},"body":{"components/Login.html":{}}}],["well",{"_index":1588,"title":{},"body":{"components/QuestionSettings.html":{}}}],["whenever",{"_index":2040,"title":{},"body":{"index.html":{}}}],["white",{"_index":1850,"title":{},"body":{"components/Toast.html":{}}}],["window.location.pathname",{"_index":470,"title":{},"body":{"classes/ExamSettings.html":{},"classes/ExerciseSettings.html":{},"components/LessonPage.html":{},"components/QuestionSettings.html":{},"components/TopicPreferences.html":{}}}],["window.settimeout",{"_index":1382,"title":{},"body":{"injectables/NotificationService.html":{}}}],["work",{"_index":1507,"title":{},"body":{"components/Practice.html":{}}}],["works",{"_index":23,"title":{},"body":{"components/About.html":{},"components/VerifyEmail.html":{}}}],["world",{"_index":836,"title":{},"body":{"components/LessonPage.html":{}}}],["x",{"_index":1343,"title":{},"body":{"components/NamingUpload.html":{},"components/Toast.html":{}}}],["yellow",{"_index":1854,"title":{},"body":{"components/Toast.html":{}}}],["yes",{"_index":362,"title":{},"body":{"injectables/ChatbotService.html":{},"components/ConfirmLogout.html":{},"components/LessonPage.html":{},"injectables/LessonService.html":{},"components/QuestionSettings.html":{}}}],["yourself",{"_index":604,"title":{},"body":{"components/Features.html":{}}}],["z",{"_index":1841,"title":{},"body":{"components/Toast.html":{}}}],["z\\d!@#$%^&*()_",{"_index":1405,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["z])(?=.*\\d)[a",{"_index":1404,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["za",{"_index":1403,"title":{},"body":{"directives/PasswordValidator.html":{}}}],["zones",{"_index":890,"title":{},"body":{"components/LessonPage.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/About.html":{"url":"components/About.html","title":"component - About","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  About\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/about-ignore/about.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./about.html\n            \n\n\n\n            \n                styleUrl\n                ./about.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  imports: [],\n  templateUrl: './about.html',\n  styleUrl: './about.css'\n})\nexport class About {\n\n}\n\n    \n\n    \n        about works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'about works!'\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'About'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnswerModel.html":{"url":"interfaces/AnswerModel.html","title":"interface - AnswerModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnswerModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/answer.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            correctOptions\n                                        \n                                \n                                \n                                        \n                                            feeback\n                                        \n                                \n                                \n                                        \n                                            isCorrect\n                                        \n                                \n                                \n                                        \n                                            prompt\n                                        \n                                \n                                \n                                        \n                                            questionId\n                                        \n                                \n                                \n                                        \n                                            selectedOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correctOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        correctOptions:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        feeback\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        feeback:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCorrect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCorrect:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prompt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prompt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        questionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        questionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectedOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectedOptions:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AnswerModel {\n    questionId: string;\n    prompt: string;\n    selectedOptions: string[];\n    correctOptions: string[];\n    isCorrect: boolean;\n    feeback: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/App.html":{"url":"components/App.html","title":"component - App","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  App\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                Toast\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.html\n            \n\n\n\n            \n                styleUrl\n                ./app.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('maestro_frontend')\n                    \n                \n                    \n                        \n                                Defined in src/app/app.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, signal } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { Toast } from \"./shared/components/toast/toast\";\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, Toast],\n  templateUrl: './app.html',\n  styleUrl: './app.css'\n})\nexport class App {\n  protected readonly title = signal('maestro_frontend');\n}\n\n    \n\n    \n        \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'App'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthInterceptor.html":{"url":"interceptors/AuthInterceptor.html","title":"interceptor - AuthInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/interceptors/auth.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/interceptors/auth.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/interceptors/auth.interceptor.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpErrorResponse,\n  HttpEvent\n} from '@angular/common/http';\nimport { catchError, throwError, Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  intercept(req: HttpRequest, next: HttpHandler): Observable> {\n    const token = this.auth.accessToken;\n    const authReq = token\n      ? req.clone({ setHeaders: { Authorization: `Bearer ${token}` } })\n      : req;\n\n    return next.handle(authReq).pipe(\n      catchError((err: HttpErrorResponse) => {\n        if (err.status === 401) {\n          console.log('Unauthorized request - logging out');\n          // clear stored tokens/session\n          this.auth.logout();  \n\n          // redirect to login page\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => err);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                refreshAccessToken\n                            \n                            \n                                refreshToken\n                            \n                            \n                                signup\n                            \n                            \n                                    Private\n                                storeTokens\n                            \n                            \n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    accessToken\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(credentials: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentials\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \nrefreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \nrefreshToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storeTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeTokens(res: LoginResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            LoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \nverifyEmail(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpBaseService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        accessToken\n                    \n                \n\n                \n                    \n                        getaccessToken()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/auth.service.ts:43\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\nimport { UserModel } from '../models/user.model';\nimport { LoginResponse } from '../models/auth-payload.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  refreshToken(): Observable {\n      throw new Error('Method not implemented.');\n  }\n  http = inject(HttpBaseService);\n\n  signup(data: { first_name: string, last_name: string, email: string, password: string }): Observable {\n    return this.http.post('auth/sign-up', data);\n  }\n\n  login(credentials: { email: string; password: string }): Observable {\n    return this.http.post('auth/login', credentials);\n  }\n\n  refreshAccessToken(): Observable {\n    return this.http.post('auth/refresh-token', {});\n  }\n\n  verifyEmail(token: string): Observable {\n    return this.http.post('auth/verify-email', { token });\n  }\n\n  logout(): void {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  // logout(): Observable {\n  //   const response = this.http.post('auth/logout', { refreshToken: localStorage.getItem('refreshToken') });\n  //   localStorage.removeItem('accessToken');\n  //   localStorage.removeItem('refreshToken');\n  //   return response\n  // }\n  get accessToken(): string | null {\n    return localStorage.getItem('accessToken');\n  }\n\n  private storeTokens(res: LoginResponse): void{\n    localStorage.setItem('accessToken', res.accessToken);\n    localStorage.setItem('refreshToken', res.refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatMessage.html":{"url":"interfaces/ChatMessage.html","title":"interface - ChatMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/chat-message.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            sender\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ChatMessage {\n  sender: string;\n  timestamp: string;\n  message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Chatbot.html":{"url":"components/Chatbot.html","title":"component - Chatbot","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Chatbot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/lesson/chatbot/chatbot.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chatbot\n            \n\n\n            \n                imports\n                \n                            FormsModule\n                            MarkdownPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./chatbot.html\n            \n\n\n\n            \n                styleUrl\n                ./chatbot.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                autoScrollEffect\n                            \n                            \n                                chatbotService\n                            \n                            \n                                    \n                                    Private\n                                chatContainer\n                            \n                            \n                                currentMessage\n                            \n                            \n                                    Private\n                                injector\n                            \n                            \n                                loading\n                            \n                            \n                                    Private\n                                viewReady\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                onCloseChat\n                            \n                            \n                                    Private\n                                scrollToBottom\n                            \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                chatHistory\n                            \n                            \n                                metadata\n                            \n                            \n                                subjectId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                chatHistory\n                            \n                            \n                                closeChat\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        chatHistory\n                    \n                \n                \n                    \n                        Type :         ChatMessage[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/chatbot/chatbot.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        metadata\n                    \n                \n                \n                    \n                        Type :         ChatMetadata\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/chatbot/chatbot.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        subjectId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/chatbot/chatbot.ts:17\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        chatHistory\n                    \n                \n                \n                    \n                        Type :         ChatMessage[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/chatbot/chatbot.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        closeChat\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/chatbot/chatbot.ts:19\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/chatbot/chatbot.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCloseChat\n                        \n                    \n                \n            \n            \n                \nonCloseChat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/chatbot/chatbot.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollToBottom\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollToBottom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/chatbot/chatbot.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/chatbot/chatbot.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        autoScrollEffect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : effect(\n    () => {\n      const history = this.chatHistory(); // track changes\n      // don’t try to scroll before the view exists\n      if (!this.viewReady || history.length === 0) return;\n\n      // defer until DOM has rendered the new item\n      queueMicrotask(() => this.scrollToBottom());\n    },\n    { injector: this.injector }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chatbotService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChatbotService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        chatContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chatContainer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        injector\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Injector)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewReady\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/chatbot/chatbot.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, input, model, output, AfterViewInit, ElementRef, ViewChild, effect, Injector } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { timestamp } from 'rxjs';\nimport { ChatMessage } from '../../../core/models/chat-message.model';\nimport { ChatbotService } from '../../../core/services/chatbot.service';\nimport { ChatMetadata } from '../../../core/models/chat-metadata.model';\nimport { MarkdownPipe } from '../../../shared/pipes/markdown-pipe';\n\n@Component({\n  selector: 'app-chatbot',\n  imports: [FormsModule, MarkdownPipe],\n  templateUrl: './chatbot.html',\n  styleUrl: './chatbot.css'\n})\nexport class Chatbot {\n  chatHistory = model([]);\n  subjectId = input()\n  metadata = input();\n  closeChat = output();\n  currentMessage: string = ''; \n  loading = false;\n  chatbotService = inject(ChatbotService)\n  @ViewChild('chatContainer') private chatContainer!: ElementRef;\n\n  onCloseChat() {\n    this.closeChat.emit({});\n  }\n\n  private injector = inject(Injector);\n  private viewReady = false;\n\n  // Create the effect in an injection context\n  private autoScrollEffect = effect(\n    () => {\n      const history = this.chatHistory(); // track changes\n      // don’t try to scroll before the view exists\n      if (!this.viewReady || history.length === 0) return;\n\n      // defer until DOM has rendered the new item\n      queueMicrotask(() => this.scrollToBottom());\n    },\n    { injector: this.injector }\n  );\n\n  ngAfterViewInit() {\n    this.viewReady = true;\n    // initial scroll (e.g., when history is preloaded)\n    queueMicrotask(() => this.scrollToBottom());\n  }\n\n  private scrollToBottom() {\n    const el = this.chatContainer?.nativeElement;\n    if (!el) return;\n    el.scrollTop = el.scrollHeight;\n  }\n\n  sendMessage() {\n    this.loading = true;\n    if (!this.currentMessage) {\n      this.loading = false;\n      return\n    }\n\n    console.log(this.currentMessage);\n    this.chatHistory()?.push({\n      sender: \"user\",\n      message: this.currentMessage,\n      timestamp: Date().toLocaleString(),\n    })\n\n    this.chatbotService.sendMessage(this.subjectId(), this.currentMessage, this.metadata()).subscribe({\n      next: (response) => {\n        this.chatHistory.update(history => [\n          ...history,\n          {\n            sender: \"assistant\",\n            message: response.response,\n            timestamp: new Date().toLocaleString(),\n          }\n        ]);\n        this.currentMessage = '';\n        this.loading = false;\n        console.log(response);\n      }, error: (err) => {\n        console.error(`Error sending message: ${err}`);\n        this.loading = false;\n      },\n    });\n    \n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n  \n\n  \n  \n    @for (chat of chatHistory(); track $index) {\n      \n      \n      \n    }\n  \n\n  \n  \n    \n\n    \n    \n      Send\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  @for (chat of chatHistory(); track $index) {                      }                        Send      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Chatbot'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatbotService.html":{"url":"injectables/ChatbotService.html","title":"injectable - ChatbotService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatbotService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/chatbot.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChatHistory\n                            \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChatHistory\n                        \n                    \n                \n            \n            \n                \ngetChatHistory(sessionId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/chatbot.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(sessionId?: string, message?: string, metadata?: ChatMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/chatbot.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                            ChatMetadata\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpBaseService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/chatbot.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\nimport { ChatMetadata } from '../models/chat-metadata.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ChatbotService {\n  http = inject(HttpBaseService);\n\n  sendMessage(sessionId?: string, message?: string, metadata?: ChatMetadata): Observable {\n    return this.http.post(`chatbot/${sessionId}/send-message`, { message, metadata });\n  }\n\n  getChatHistory(sessionId?: string): Observable {\n    return this.http.get(`chatbot/${sessionId}/chat-history`);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConfirmLogout.html":{"url":"components/ConfirmLogout.html","title":"component - ConfirmLogout","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  ConfirmLogout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/confirm-logout/confirm-logout.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-confirm-logout\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./confirm-logout.html\n            \n\n\n\n            \n                styleUrl\n                ./confirm-logout.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        cancel\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/confirm-logout/confirm-logout.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        confirm\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/confirm-logout/confirm-logout.ts:11\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-confirm-logout',\n  imports: [CommonModule],\n  templateUrl: './confirm-logout.html',\n  styleUrl: './confirm-logout.css'\n})\nexport class ConfirmLogout {\n  @Output() confirm = new EventEmitter();\n  @Output() cancel = new EventEmitter();\n}\n\n    \n\n    \n        \n  \n    Logout\n    Are you sure you want to log out?\n    \n      \n        Cancel\n      \n      \n        Yes, Logout\n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Logout    Are you sure you want to log out?                  Cancel                    Yes, Logout            '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'ConfirmLogout'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Contact.html":{"url":"components/Contact.html","title":"component - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/contact/contact.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-contact\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./contact.html\n            \n\n\n\n            \n                styleUrl\n                ./contact.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  imports: [],\n  templateUrl: './contact.html',\n  styleUrl: './contact.css'\n})\nexport class Contact {\n\n}\n\n    \n\n    \n        \n\n  \n  \n    \n    \n      \n      \n        \n          \n            \n          \n\n          \n            Maestro\n          \n        \n        \n          Your Personalized Learning Companion\n        \n      \n      \n      \n        \n          Quick Links\n          \n            \n              Home\n            \n            \n              Features\n            \n            \n              Pricing\n            \n          \n        \n\n        \n          \n            Contact Information\n          \n          \n            \n            info@maestro.org\n          \n        \n      \n    \n\n    \n    \n\n    \n    \n      \n        &copy; 2025 Maestro. All rights reserved.\n      \n      \n      \n        \n          \n        \n        \n          \n        \n        \n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                      Maestro                                    Your Personalized Learning Companion                                            Quick Links                                    Home                                      Features                                      Pricing                                                            Contact Information                                            info@maestro.org                                                          © 2025 Maestro. All rights reserved.                                                                                                            '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Contact'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreationStepTab.html":{"url":"components/CreationStepTab.html","title":"component - CreationStepTab","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  CreationStepTab\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-creation-step-tab\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./creation-step-tab.html\n            \n\n\n\n            \n                styleUrl\n                ./creation-step-tab.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bgColour\n                            \n                            \n                                textColour\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                icon\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:13\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:12\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bgColour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textColour\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule, NgClass } from '@angular/common';\nimport { Component, input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-creation-step-tab',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './creation-step-tab.html',\n  styleUrl: './creation-step-tab.css'\n})\nexport class CreationStepTab implements OnInit {\n  text = input.required();\n  icon = input(null);\n  active = input();\n\n  bgColour = '';\n  textColour = '';\n\n  ngOnInit () {\n    if (this.active()) {\n      this.bgColour = 'bg-prussian-blue-800';\n      this.textColour = 'text-prussian-blue-900';\n    } else {\n      this.bgColour = 'bg-prussian-blue-250';\n      this.textColour = 'text-prussian-blue-500';\n    }\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n    {{ text() }}\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ text() }}  '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'CreationStepTab'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExamModel.html":{"url":"interfaces/ExamModel.html","title":"interface - ExamModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExamModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/exam.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            questions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            score\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        questions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        questions:         QuestionModel[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionModel[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { QuestionModel } from \"./question.model\";\n\nexport interface ExamModel {\n  id: string;\n  score?: number;\n  questions: QuestionModel[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamSettings.html":{"url":"classes/ExamSettings.html","title":"class - ExamSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/subject-create/question-settings/question-settings.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                include\n                            \n                            \n                                preference\n                            \n                            \n                                questionTypes\n                            \n                            \n                                timeLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        include\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questionTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChangeDetectorRef, Component, inject } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { CreationStepTab } from '../creation-step-tab/creation-step-tab';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { forkJoin, Observable } from 'rxjs';\n\nclass ExerciseSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n}\nclass ExamSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n  timeLimit: any = null\n}\n\n@Component({\n  selector: 'app-question-settings',\n  imports: [Header, CreationStepTab, FormsModule],\n  templateUrl: './question-settings.html',\n  styleUrl: './question-settings.css'\n})\nexport class QuestionSettings {\n  exerciseSettings = new ExerciseSettings();\n  examSettings = new ExamSettings();\n  loading = false;\n  subjectId = '';\n  subjectService = inject(SubjectsService)\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {\n    // Extract subjectId from the route parameters\n    const url = window.location.pathname;\n    const parts = url.split('/');\n    this.subjectId = parts[parts.length - 2]; // Assuming the last part is the subjectId\n  }\n\n  toggleExerciseType(event: any) {\n    if (event.target.checked) {\n      this.exerciseSettings.questionTypes.push(event.target.value);\n    } else {\n      this.exerciseSettings.questionTypes = this.exerciseSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  toggleExamType(event: any) {\n    if (event.target.checked) {\n      this.examSettings.questionTypes.push(event.target.value);\n    } else {\n      this.examSettings.questionTypes = this.examSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    let exerciseValidated = false;\n    let examValidated = false;\n  \n    // Validate exercise fields\n    if (this.exerciseSettings.include) {\n      if (this.exerciseSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exercises\");\n        this.loading = false;\n        return;\n      }\n      if (!this.exerciseSettings.preference) {\n        alert(\"Exercise preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    exerciseValidated = true;\n  \n    // Validate exam fields\n    if (this.examSettings.include) {\n      if (this.examSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exam\");\n        this.loading = false;\n        return;\n      }\n      if (!this.examSettings.preference) {\n        alert(\"Exam preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    examValidated = true;\n  \n    // Collect all requests to run in parallel\n    const requests: Observable[] = [];\n  \n    if (this.exerciseSettings.include && exerciseValidated) {\n      requests.push(\n        this.subjectService.generateExercise(\n          this.subjectId,\n          this.exerciseSettings.preference,\n          this.exerciseSettings.questionTypes\n        )\n      );\n    }\n  \n    if (this.examSettings.include && examValidated) {\n      requests.push(\n        this.subjectService.generateExam(\n          this.subjectId,\n          this.examSettings.preference,\n          this.examSettings.questionTypes\n        )\n      );\n    }\n  \n    // If there are requests, wait for them to finish before updating status\n    if (requests.length > 0) {\n      forkJoin(requests).subscribe({\n        next: (responses) => {\n          console.log(\"Generation responses:\", responses);\n          this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n            next: () => {\n              console.log(\"Session status updated\");\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            error: (err) => {\n              console.error(\"Failed to update session status\", err);\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            complete: () => (this.loading = false),\n          });\n        },\n        error: (err) => {\n          console.error(\"Error during generation:\", err);\n          this.loading = false;\n        }\n      });\n    } else {\n      // If no requests to generate, just update status directly\n      this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n        next: () => {\n          console.log(\"Session status updated (no generation needed)\");\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        error: (err) => {\n          console.error(\"Failed to update session status\", err);\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        complete: () => (this.loading = false),\n      });\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExerciseModel.html":{"url":"interfaces/ExerciseModel.html","title":"interface - ExerciseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExerciseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/exercise.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            questions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            score\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        questions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        questions:         QuestionModel[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionModel[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { QuestionModel } from \"./question.model\";\n\nexport interface ExerciseModel {\n  id: string;\n  score?: number;\n  questions: QuestionModel[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExerciseService.html":{"url":"injectables/ExerciseService.html","title":"injectable - ExerciseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  ExerciseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/exercise.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPastAnswers\n                            \n                            \n                                submitAnswers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/exercise.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPastAnswers\n                        \n                    \n                \n            \n            \n                \ngetPastAnswers(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/exercise.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitAnswers\n                        \n                    \n                \n            \n            \n                \nsubmitAnswers(id: string, payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/exercise.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${environment.apiUrl}/exercises`\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/exercise.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AnswerModel } from '../models/answer.model';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class ExerciseService {\n  private apiUrl = `${environment.apiUrl}/exercises`;\n\n  constructor(private http: HttpClient) {}\n\n  getPastAnswers(id: string): Observable {\n    return this.http.get(`${this.apiUrl}/${id}/answers`);\n  }\n\n  submitAnswers(id: string, payload: any): Observable {\n    return this.http.post(`${this.apiUrl}/${id}/submit`, payload);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExerciseSettings.html":{"url":"classes/ExerciseSettings.html","title":"class - ExerciseSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExerciseSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/subject-create/question-settings/question-settings.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                include\n                            \n                            \n                                preference\n                            \n                            \n                                questionTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        include\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questionTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChangeDetectorRef, Component, inject } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { CreationStepTab } from '../creation-step-tab/creation-step-tab';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { forkJoin, Observable } from 'rxjs';\n\nclass ExerciseSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n}\nclass ExamSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n  timeLimit: any = null\n}\n\n@Component({\n  selector: 'app-question-settings',\n  imports: [Header, CreationStepTab, FormsModule],\n  templateUrl: './question-settings.html',\n  styleUrl: './question-settings.css'\n})\nexport class QuestionSettings {\n  exerciseSettings = new ExerciseSettings();\n  examSettings = new ExamSettings();\n  loading = false;\n  subjectId = '';\n  subjectService = inject(SubjectsService)\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {\n    // Extract subjectId from the route parameters\n    const url = window.location.pathname;\n    const parts = url.split('/');\n    this.subjectId = parts[parts.length - 2]; // Assuming the last part is the subjectId\n  }\n\n  toggleExerciseType(event: any) {\n    if (event.target.checked) {\n      this.exerciseSettings.questionTypes.push(event.target.value);\n    } else {\n      this.exerciseSettings.questionTypes = this.exerciseSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  toggleExamType(event: any) {\n    if (event.target.checked) {\n      this.examSettings.questionTypes.push(event.target.value);\n    } else {\n      this.examSettings.questionTypes = this.examSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    let exerciseValidated = false;\n    let examValidated = false;\n  \n    // Validate exercise fields\n    if (this.exerciseSettings.include) {\n      if (this.exerciseSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exercises\");\n        this.loading = false;\n        return;\n      }\n      if (!this.exerciseSettings.preference) {\n        alert(\"Exercise preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    exerciseValidated = true;\n  \n    // Validate exam fields\n    if (this.examSettings.include) {\n      if (this.examSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exam\");\n        this.loading = false;\n        return;\n      }\n      if (!this.examSettings.preference) {\n        alert(\"Exam preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    examValidated = true;\n  \n    // Collect all requests to run in parallel\n    const requests: Observable[] = [];\n  \n    if (this.exerciseSettings.include && exerciseValidated) {\n      requests.push(\n        this.subjectService.generateExercise(\n          this.subjectId,\n          this.exerciseSettings.preference,\n          this.exerciseSettings.questionTypes\n        )\n      );\n    }\n  \n    if (this.examSettings.include && examValidated) {\n      requests.push(\n        this.subjectService.generateExam(\n          this.subjectId,\n          this.examSettings.preference,\n          this.examSettings.questionTypes\n        )\n      );\n    }\n  \n    // If there are requests, wait for them to finish before updating status\n    if (requests.length > 0) {\n      forkJoin(requests).subscribe({\n        next: (responses) => {\n          console.log(\"Generation responses:\", responses);\n          this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n            next: () => {\n              console.log(\"Session status updated\");\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            error: (err) => {\n              console.error(\"Failed to update session status\", err);\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            complete: () => (this.loading = false),\n          });\n        },\n        error: (err) => {\n          console.error(\"Error during generation:\", err);\n          this.loading = false;\n        }\n      });\n    } else {\n      // If no requests to generate, just update status directly\n      this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n        next: () => {\n          console.log(\"Session status updated (no generation needed)\");\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        error: (err) => {\n          console.error(\"Failed to update session status\", err);\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        complete: () => (this.loading = false),\n      });\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Features.html":{"url":"components/Features.html","title":"component - Features","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Features\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/features/features.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-features\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./features.html\n            \n\n\n\n            \n                styleUrl\n                ./features.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-features',\n  imports: [],\n  templateUrl: './features.html',\n  styleUrl: './features.css'\n})\nexport class Features {\n\n}\n\n    \n\n    \n        \n\n  \n    \n      \n        Features\n      \n      \n      \n        Experience Smarter Learning, Designed for You\n      \n    \n\n    \n\n    \n      \n        \n          \n        \n        \n          \n          \n            Easy Material Comprehension\n          \n          \n          \n            Upload your PDFs and DOCX files, and let Maestro turn complex topics\n            into easy lessons suited to your learning style.\n          \n        \n      \n      \n      \n        \n          \n        \n        \n          \n            Tailored Learning Paths\n          \n          \n            Tell Maestro your learning style and your preferred complexity. Get\n            content that resonates.\n          \n        \n      \n      \n      \n        \n          \n        \n        \n          \n            Engaging Summaries & Notes\n          \n          \n            Forget endless highlighting. Maestro creates interactive summaries\n            and notes to help you grasp key concepts quickly.\n          \n        \n      \n      \n      \n        \n          \n        \n        \n          \n            Practice & Exam Options\n          \n          \n            Challenge yourself with AI-driven quizzes and exams that adapt to\n            your progress, pinpointing areas for improvement.\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Features                          Experience Smarter Learning, Designed for You                                                                                          Easy Material Comprehension                                          Upload your PDFs and DOCX files, and let Maestro turn complex topics            into easy lessons suited to your learning style.                                                                                            Tailored Learning Paths                                Tell Maestro your learning style and your preferred complexity. Get            content that resonates.                                                                                            Engaging Summaries & Notes                                Forget endless highlighting. Maestro creates interactive summaries            and notes to help you grasp key concepts quickly.                                                                                            Practice & Exam Options                                Challenge yourself with AI-driven quizzes and exams that adapt to            your progress, pinpointing areas for improvement.                              '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Features'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FileTypeDirective.html":{"url":"directives/FileTypeDirective.html","title":"directive - FileTypeDirective","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Directives\n  FileTypeDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/directives/file-type.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appFileType]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                appFileType\n                            \n                            \n                                maxBytes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                fileError\n                            \n                            \n                                fileOk\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                change\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        appFileType\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/directives/file-type.directive.ts:11\n                            \n                        \n                \n                    \n                        Allowed MIME types, e.g., ['application/pdf','image/png']\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        maxBytes\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10 * 1024 * 1024\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/directives/file-type.directive.ts:13\n                            \n                        \n                \n                    \n                        Max size in bytes (default 10MB)\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        fileError\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/directives/file-type.directive.ts:17\n                            \n                        \n                \n                    \n                        Emits error reason when rejected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fileOk\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/directives/file-type.directive.ts:15\n                            \n                        \n                \n                    \n                        Emits file when ok; null when rejected\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            change\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/directives/file-type.directive.ts:20\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onChange(ev: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('change', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/shared/directives/file-type.directive.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ev\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { isAllowedFile } from '../utils/file-validation.util';\n\n@Directive({\n  selector: '[appFileType]',\n  standalone: true\n})\nexport class FileTypeDirective {\n  /** Allowed MIME types, e.g., ['application/pdf','image/png'] */\n  @Input() appFileType: string[] = [];\n  /** Max size in bytes (default 10MB) */\n  @Input() maxBytes = 10 * 1024 * 1024;\n  /** Emits file when ok; null when rejected */\n  @Output() fileOk = new EventEmitter();\n  /** Emits error reason when rejected */\n  @Output() fileError = new EventEmitter();\n\n  @HostListener('change', ['$event'])\n  onChange(ev: Event) {\n    const input = ev.target as HTMLInputElement;\n    const f = input.files?.[0];\n    if (!f) return;\n    const res = isAllowedFile(f, this.appFileType, this.maxBytes);\n    if (res.ok) {\n      this.fileOk.emit(f);\n    } else {\n      this.fileError.emit(res.reason || 'Invalid file.');\n      this.fileOk.emit(null);\n      input.value = ''; // reset selection\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Header.html":{"url":"components/Header.html","title":"component - Header","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Header\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/header/header.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterLink\n                            RouterLinkActive\n                                ConfirmLogout\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                showLogout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelLogout\n                            \n                            \n                                confirmLogout\n                            \n                            \n                                openLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/header/header.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelLogout\n                        \n                    \n                \n            \n            \n                \ncancelLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmLogout\n                        \n                    \n                \n            \n            \n                \nconfirmLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openLogout\n                        \n                    \n                \n            \n            \n                \nopenLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/header/header.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        showLogout\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/header/header.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, signal } from '@angular/core';\nimport { RouterLink, RouterLinkActive, Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmLogout } from '../confirm-logout/confirm-logout';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterLink, RouterLinkActive, ConfirmLogout],\n  templateUrl: './header.html'\n})\nexport class Header {\n  showLogout = signal(false);\n\n  constructor(private auth: AuthService, private router: Router) {}\n\n  openLogout() { this.showLogout.set(true); }\n  cancelLogout() { this.showLogout.set(false); }\n  confirmLogout() {\n    this.auth.logout();\n    this.showLogout.set(false);\n    this.router.navigateByUrl('/login');\n  }\n}\n    \n\n    \n        \n  \n    \n    Maestro\n  \n  \n\n\n\n  \n  Maestro\n\n  \n  \n    Home\n    Dashboard\n    Subscription\n  \n\n  \n  \n    \n      Logout\n    \n  \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Maestro        Maestro        Home    Dashboard    Subscription                Logout      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Header'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Home.html":{"url":"components/Home.html","title":"component - Home","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Home\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/home/home.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-home\n            \n\n\n            \n                imports\n                \n                                Landing\n                                Features\n                                Pricing\n                                Contact\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./home.html\n            \n\n\n\n            \n                styleUrl\n                ./home.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, vscroller: ViewportScroller)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/home/home/home.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        vscroller\n                                                  \n                                                        \n                                                                    ViewportScroller\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/home/home.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrollTo\n                        \n                    \n                \n            \n            \n                \nscrollTo(section: \"top\" | \"features\" | \"pricing\" | \"contact\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/home/home.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                section\n                                            \n                                                        \"top\" | \"features\" | \"pricing\" | \"contact\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ViewportScroller } from '@angular/common';\nimport { Landing } from '../landing/landing';\nimport { Features } from '../features/features';\nimport { Pricing } from '../pricing/pricing';\nimport { Contact } from '../contact/contact';\n\n@Component({\n  selector: 'app-home',\n  imports: [Landing, Features, Pricing, Contact],\n  templateUrl: './home.html',\n  styleUrl: './home.css'\n})\nexport class Home {\n  constructor(\n    private router: Router,\n    private vscroller: ViewportScroller\n  ) {}\n\n  ngOnInit(): void {\n    // this.router.navigate(['/login']);\n  }\n\n  scrollTo(section: 'top' | 'features' | 'pricing' | 'contact' ) {\n    if (section === 'top') {\n      this.vscroller.scrollToPosition([0, 0]);\n    } else {\n      this.vscroller.scrollToAnchor(section);\n    }\n  }\n}\n\n    \n\n    \n        \n  \n  \n  \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Home'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpBaseService.html":{"url":"injectables/HttpBaseService.html","title":"injectable - HttpBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/http-base.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                apiUrl\n                            \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                getHeaders\n                            \n                            \n                                post\n                            \n                            \n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(endpoint: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/http-base.service.ts:33\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(endpoint: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/http-base.service.ts:21\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHeaders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHeaders()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/http-base.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         HttpHeaders\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n            \n                \npost(endpoint: string, body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/http-base.service.ts:25\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(endpoint: string, body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/http-base.service.ts:29\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                endpoint\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : environment.apiUrl\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/http-base.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/http-base.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpBaseService {\n  private readonly apiUrl = environment.apiUrl;\n  http = inject(HttpClient);\n\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('accessToken');\n    return new HttpHeaders({\n      Authorization: token ? `Bearer ${token}` : '',\n    });\n  }\n\n  get(endpoint: string): Observable {\n    return this.http.get(`${this.apiUrl}/${endpoint}`, { headers: this.getHeaders() });\n  }\n\n  post(endpoint: string, body: any): Observable {\n    return this.http.post(`${this.apiUrl}/${endpoint}`, body, { headers: this.getHeaders() });\n  }\n\n  put(endpoint: string, body: any): Observable {\n    return this.http.put(`${this.apiUrl}/${endpoint}`, body, { headers: this.getHeaders() });\n  }\n\n  delete(endpoint: string): Observable {\n    return this.http.delete(`${this.apiUrl}/${endpoint}`, { headers: this.getHeaders() });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Landing.html":{"url":"components/Landing.html","title":"component - Landing","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Landing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/landing/landing.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-landing\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./landing.html\n            \n\n\n\n            \n                styleUrl\n                ./landing.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onContactClick\n                            \n                            \n                                onFeaturesClick\n                            \n                            \n                                onGetStartedClick\n                            \n                            \n                                onHomeClick\n                            \n                            \n                                onPricingClick\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                navigateSection\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/home/landing/landing.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        navigateSection\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/home/landing/landing.ts:12\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onContactClick\n                        \n                    \n                \n            \n            \n                \nonContactClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/landing/landing.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onFeaturesClick\n                        \n                    \n                \n            \n            \n                \nonFeaturesClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/landing/landing.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onGetStartedClick\n                        \n                    \n                \n            \n            \n                \nonGetStartedClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/landing/landing.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onHomeClick\n                        \n                    \n                \n            \n            \n                \nonHomeClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/landing/landing.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onPricingClick\n                        \n                    \n                \n            \n            \n                \nonPricingClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/home/landing/landing.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output, output } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-landing',\n  imports: [CommonModule],\n  templateUrl: './landing.html',\n  styleUrl: './landing.css'\n})\nexport class Landing {\n  @Output() navigateSection = new EventEmitter();\n\n  constructor(private router: Router) {}\n\n  onHomeClick() {\n    this.navigateSection.emit('top');\n  }\n\n  onFeaturesClick() {\n    this.navigateSection.emit('features');\n  }\n\n  onPricingClick() {\n    this.navigateSection.emit('pricing');\n  }\n\n  onContactClick() {\n    this.navigateSection.emit('contact');\n  }\n\n  onGetStartedClick() {\n    this.router.navigate(['/signup']);\n  }\n}\n\n    \n\n    \n        \n\n  \n  \n\n  \n  \n    \n      \n        \n        Maestro\n      \n\n      \n      \n        Home\n        Features\n        Pricing\n        Contact us\n      \n\n      \n        Try Maestro\n      \n    \n\n    \n    \n      \n        \n          Unlock Your Learning Potential with Maestro\n        \n        \n          Upload your materials, customize how you learn, and get AI-crafted\n          lessons, quizzes, and study plans tailored just for you.\n        \n        \n          Get Started\n        \n      \n    \n\n    \n    \n      \n        Be among the first to shape the future of learning.\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  Maestro                          Home        Features        Pricing        Contact us                    Try Maestro                                          Unlock Your Learning Potential with Maestro                          Upload your materials, customize how you learn, and get AI-crafted          lessons, quizzes, and study plans tailored just for you.                          Get Started                                        Be among the first to shape the future of learning.            '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Landing'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LessonPage.html":{"url":"components/LessonPage.html","title":"component - LessonPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  LessonPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/lesson/lesson-page/lesson-page.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-lesson-page\n            \n\n\n            \n                imports\n                \n                                Header\n                                Sidebar\n                                Chatbot\n                                Subtopic\n                                Practice\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./lesson-page.html\n            \n\n\n\n            \n                styleUrl\n                ./lesson-page.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chatbotService\n                            \n                            \n                                chatHistory\n                            \n                            \n                                chatMetadata\n                            \n                            \n                                chatOpen\n                            \n                            \n                                currentView\n                            \n                            \n                                lessonService\n                            \n                            \n                                subjectContent\n                            \n                            \n                                subjectId\n                            \n                            \n                                subjectService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                capitalizeFirstLetter\n                            \n                            \n                                changeSubtopic\n                            \n                            \n                                checkForTopicCompleteness\n                            \n                            \n                                getTopicDataFromExercise\n                            \n                            \n                                getTopicDataFromSubtopic\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleChatPopup\n                            \n                            \n                                updateChatMetadata\n                            \n                            \n                                updatecurrentView\n                            \n                            \n                                updateProgress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        capitalizeFirstLetter\n                        \n                    \n                \n            \n            \n                \ncapitalizeFirstLetter(str: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:464\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeSubtopic\n                        \n                    \n                \n            \n            \n                \nchangeSubtopic(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:409\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkForTopicCompleteness\n                        \n                    \n                \n            \n            \n                \ncheckForTopicCompleteness(topic_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:392\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topic_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTopicDataFromExercise\n                        \n                    \n                \n            \n            \n                \ngetTopicDataFromExercise()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:386\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { id: any; title: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTopicDataFromSubtopic\n                        \n                    \n                \n            \n            \n                \ngetTopicDataFromSubtopic()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:380\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { id: any; title: any; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:185\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChatPopup\n                        \n                    \n                \n            \n            \n                \ntoggleChatPopup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:459\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChatMetadata\n                        \n                    \n                \n            \n            \n                \nupdateChatMetadata(question_event?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:428\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                question_event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatecurrentView\n                        \n                    \n                \n            \n            \n                \nupdatecurrentView(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:292\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProgress\n                        \n                    \n                \n            \n            \n                \nupdateProgress()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        chatbotService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChatbotService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chatHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatMessage[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chatMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatMetadata\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chatOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'subtopic', // 'subtopic', 'exercise', or 'exam'\n    id: '', // ID of the current subtopic, exercise question, or exam question\n    content: {} // Content to display based on the current view\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lessonService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LessonService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(SubjectsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/lesson-page/lesson-page.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, inject, OnInit, signal } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { Sidebar } from '../sidebar/sidebar';\nimport { Chatbot } from '../chatbot/chatbot';\nimport { Subtopic } from '../subtopic/subtopic';\nimport { Practice } from \"../practice/practice\";\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { LessonService } from '../../../core/services/lesson.service';\nimport { ChatMetadata } from '../../../core/models/chat-metadata.model';\nimport { ChatbotService } from '../../../core/services/chatbot.service';\nimport { forkJoin, map, switchMap } from 'rxjs';\nimport { ChatMessage } from '../../../core/models/chat-message.model';\n\n@Component({\n  selector: 'app-lesson-page',\n  imports: [Header, Sidebar, Chatbot, Subtopic, Practice],\n  templateUrl: './lesson-page.html',\n  styleUrl: './lesson-page.css'\n})\nexport class LessonPage implements OnInit {\n  subjectId: string;\n  chatMetadata: ChatMetadata = {};\n  subjectContent: any = {};\n  currentView: any = {\n    type: 'subtopic', // 'subtopic', 'exercise', or 'exam'\n    id: '', // ID of the current subtopic, exercise question, or exam question\n    content: {} // Content to display based on the current view\n  }\n  chatHistory: ChatMessage[] = [];\n  chatOpen = false;\n  subjectService = inject(SubjectsService)\n  lessonService = inject(LessonService)\n  chatbotService = inject(ChatbotService)\n\n  // subjectContent: any = {\n  //   subject_name: 'Geography',\n  //   topics: [\n  //     {\n  //       expanded: false,\n  //       id: 't1',\n  //       title: 'Intro to Geography',\n  //       completed: false,\n  //       subtopics: [\n  //         {\n  //           id: 's1-t1',\n  //           title: 'Geography Basics',\n  //           content: 'Geography is the study of places and the relationships between people and their environments.',\n  //           read: true\n  //         },\n  //         {\n  //           id: 's2-t1',\n  //           title: 'World Capitals',\n  //           content: 'A capital city is the most important city in a country, often where the government is located.',\n  //           read: false\n  //         },\n  //         {\n  //           id: 's3-t1',\n  //           title: 'Physical Geography',\n  //           content: 'Physical geography focuses on the natural environment, including landforms, climates, and ecosystems.',\n  //           read: false\n  //         }\n  //       ],\n  //       exercise: {\n  //         id: 'et1',\n  //         score: null,\n  //         questions: [\n  //           {\n  //             question_id: 'q1-et1',\n  //             question_text: 'What is the capital of France?',\n  //             question_type: 'multiple choice',\n  //             options: [\n  //               { option_id: '1', option_text: 'Paris', is_correct: true, selected: false },\n  //               { option_id: '2', option_text: 'London', is_correct: false, selected: false },\n  //               { option_id: '3', option_text: 'Berlin', is_correct: false, selected: false },\n  //               { option_id: '4', option_text: 'Madrid', is_correct: false, selected: false }\n  //             ]\n  //           },\n  //           {\n  //             question_id: 'q2-et1',\n  //             question_text: 'Which of these are oceans on earth?',\n  //             question_type: 'multiple selection',\n  //             options: [\n  //               { option_id: '1', option_text: 'Atlantic Ocean', is_correct: true, selected: false },\n  //               { option_id: '2', option_text: 'Pacific Ocean', is_correct: true, selected: false },\n  //               { option_id: '3', option_text: 'Amazon River', is_correct: false, selected: false },\n  //               { option_id: '4', option_text: 'Nile River', is_correct: false, selected: false }\n  //             ]\n  //           },\n  //           {\n  //             question_id: 'q3-et1',\n  //             question_text: 'Describe the importance of studying geography in understanding global issues.',\n  //             question_type: 'essay',\n  //           }\n  //         ]\n  //       }\n  //     },\n  //     {\n  //       expanded: false,\n  //       id: 't2',\n  //       title: 'Physical Geography',\n  //       completed: true,\n  //       subtopics: [\n  //         {\n  //           id: 's1-t2',\n  //           title: 'Climate Zones',\n  //           content: 'Climate zones are regions of the world with distinct weather patterns and temperatures.',\n  //           read: true\n  //         },\n  //         {\n  //           id: 's2-t2',\n  //           title: 'Human Geography',\n  //           content: 'Human geography studies how humans interact with the environment and how cultures vary across regions.',\n  //           read: true\n  //         }\n  //       ],\n  //       exercise: {\n  //         id: 'et2',\n  //         score: 2,\n  //         questions: [\n  //           {\n  //             question_id: 'q1-et2',\n  //             question_text: 'What are the main climate zones of the world?',\n  //             question_type: 'multiple selection',\n  //             options: [\n  //               { option_id: '1', option_text: 'Tropical', is_correct: true, selected: true },\n  //               { option_id: '2', option_text: 'Arctic', is_correct: true, selected: true },\n  //               { option_id: '3', option_text: 'Desert', is_correct: true, selected: true },\n  //               { option_id: '4', option_text: 'Mountainous', is_correct: false, selected: false }\n  //             ]\n  //           },\n  //           {\n  //             question_id: 'q2-et2',\n  //             question_text: 'Explain how human activities impact the environment.',\n  //             question_type: 'essay',\n  //             answer: 'Human activities such as deforestation, pollution, and urbanization significantly impact the environment by altering ecosystems, contributing to climate change, and reducing biodiversity.'\n  //           }\n  //         ]\n  //       }\n  //     }\n  //   ],\n  //   exam: {\n  //     id: 'e1',\n  //     score: null,\n  //     questions: [\n  //       {\n  //         question_id: 'q1-e1',\n  //         question_text: 'What is the largest continent on Earth?',\n  //         question_type: 'multiple choice',\n  //         options: [\n  //           { option_id: '1', option_text: 'Asia', is_correct: true, selected: false },\n  //           { option_id: '2', option_text: 'Africa', is_correct: false, selected: false },\n  //           { option_id: '3', option_text: 'North America', is_correct: false, selected: false },\n  //           { option_id: '4', option_text: 'Europe', is_correct: false, selected: false }\n  //         ]\n  //       },\n  //       {\n  //         question_id: 'q2-e1',\n  //         question_text: 'Describe the water cycle and its significance in geography.',\n  //         question_type: 'essay',\n  //         answer: null\n  //       }\n  //     ]\n  //   }\n  // }\n  // chatHistory = [\n  //   {\n  //     sender: \"user\",\n  //     message: \"Hello\",\n  //     timestamp: \"\"\n  //   },\n  //   {\n  //     sender: \"assistant\",\n  //     message: \"Hi there, how can I help you?\",\n  //     timestamp: \"\"\n  //   },\n  // ]\n\n  constructor(private cdr: ChangeDetectorRef) {\n    // Extract subjectId from the route parameters\n    const url = window.location.pathname;\n    const parts = url.split('/');\n    this.subjectId = parts[parts.length - 1]; // Assuming the last part is the subjectId\n  }\n\n  ngOnInit(): void {\n    // Fetch chat history\n    this.chatbotService.getChatHistory(this.subjectId).subscribe({\n      next: (response) => {\n        this.chatHistory = response.history;\n      }, error(err) {\n        console.error(`Error fetching chat history ${err}`)\n      },\n    });\n\n\n    // 1. Fetch all subjects first\n    this.subjectService.getAllSubjects().pipe(\n      map((res: any) => res.sessions || []), // unwrap sessions array\n      map((subjects: any[]) => subjects.find(s => s.id === this.subjectId)), // pick current subject\n      switchMap((subject) => {\n        if (!subject) throw new Error('Subject not found');\n        \n        this.subjectContent = {\n          subject_name: subject.name,\n          topics: [],\n          exam: null\n        };\n  \n        // 2. Fetch topics for this subject\n        return this.lessonService.getAllTopics(this.subjectId);\n      }),\n      switchMap((res: any) => {\n        const topicsResponse = res.topics || []; // unwrap topics array\n  \n        // Shape topics\n        const topics = topicsResponse.filter((topic: any) => topic.selected).map((topic: any) => ({\n          expanded: false,\n          id: topic.id,\n          title: topic.title,\n          completed: topic.completed,\n          subtopics: [],\n          exercise: null\n        }));\n        this.subjectContent.topics = topics;\n  \n        // 3. For each topic fetch subtopics + exercise in parallel\n        const topicRequests = topics.map((topic: any) =>\n          forkJoin({\n            subtopics: this.lessonService.getAllSubtopics(topic.id).pipe(\n              map((r: any) => r.subtopics || [])\n            ),\n            exercise: this.lessonService.getExercise(topic.id).pipe(\n              map((r: any) => r.exercise || null)\n            )\n          }).pipe(\n            map((res) => {\n              topic.subtopics = res.subtopics;\n              topic.exercise = res.exercise;\n              console.log(topic.exercise)\n              return topic;\n            })\n          )\n        );\n  \n        return forkJoin(topicRequests); // wait for all topics to finish loading\n      }),\n      switchMap(() => {\n        // 4. Finally fetch exam\n        return this.lessonService.getExam(this.subjectId).pipe(\n          map((res: any) => {\n            this.subjectContent.exam = res.exam || null; // unwrap exam\n            return res.exam;\n          })\n        );\n      })\n    ).subscribe({\n      next: () => {\n        // ✅ Everything loaded, now set initial view\n        for (let topic of this.subjectContent.topics) {\n          if (!topic.completed) {\n            const unreadSubtopic = topic.subtopics.find((st: any) => !st.read);\n            if (unreadSubtopic) {\n              this.updatecurrentView({ id: unreadSubtopic.id, type: 'subtopic' });\n              break;\n            } else if (topic.exercise && topic.exercise.score === null) {\n              this.updatecurrentView({ id: topic.exercise.id, type: 'exercise' });\n              break;\n            }\n          }\n        }\n  \n        // If still nothing, set exam or fallback\n        if (!this.currentView.id && this.subjectContent.exam) {\n          this.updatecurrentView({ id: this.subjectContent.exam.id, type: 'exam' });\n        } else if (!this.currentView.id) {\n          const firstTopic = this.subjectContent.topics[0];\n          if (firstTopic && firstTopic.subtopics.length > 0) {\n            this.updatecurrentView({ id: firstTopic.subtopics[0].id, type: 'subtopic' });\n          }\n        }\n  \n        this.cdr.detectChanges();\n      },\n      error: (err) => {\n        console.error('Failed to initialize subject content:', err);\n      }\n    });\n  }\n  \n  \n  //\n  updatecurrentView(event: any) {\n    let content = null;\n\n    if (event.type === 'subtopic') {\n      content = this.subjectContent.topics\n        .flatMap((topic: any) => topic.subtopics)\n        .find((subtopic: any)=> subtopic.id === event.id) || {};\n      // check for completed topic\n      } else if (event.type === 'exercise') {\n        content = this.subjectContent.topics\n        .flatMap((topic: any) => topic.exercise)\n        .find((exercise: any) => exercise.id === event.id) || {};\n      } else if (event.type === 'exam') {\n        content = this.subjectContent.exam\n      }\n      \n    this.currentView = {\n      id: event.id,\n      type: event.type,\n      content: content\n    }\n\n    if (event.type === 'subtopic') {\n      this.updateChatMetadata();\n\n      // mark subtopic as read\n      const topic_id = this.getTopicDataFromSubtopic().id\n      this.lessonService.markSubtopicAsRead(topic_id, event.id).subscribe({\n        next: () => {\n          this.subjectContent.topics\n          .find((topic: any) => topic.id == topic_id).subtopics\n          .find((subtopic: any) => subtopic.id == event.id)\n          .read = true\n          this.updateProgress()\n          this.checkForTopicCompleteness(topic_id)\n        }, error(err) {\n          console.error(`Failed to mark subtopic as read: ${err}`)\n        },\n      });\n    } else if (this.chatOpen && (this.currentView.content.score == null)){\n      this.chatOpen = false;\n    }\n    console.log(this.currentView)\n  }\n\n  updateProgress() {\n    let total = 0;\n    let completed = 0;\n  \n    // --- Loop through topics ---\n    this.subjectContent.topics.forEach((topic: any) => {\n      // Count subtopics\n      if (topic.subtopics?.length) {\n        total += topic.subtopics.length;\n        completed += topic.subtopics.filter((st: any) => st.read).length;\n      }\n  \n      // Count exercise (each topic has exactly one exercise object)\n      if (topic.exercise) {\n        total += 1;\n        if (topic.exercise.score !== null && topic.exercise.score !== undefined) {\n          completed += 1;\n        }\n      }\n    });\n  \n    // --- Count exam (only one per subjectContent) ---\n    if (this.subjectContent.exam) {\n      total += 1;\n      if (this.subjectContent.exam.score !== null && this.subjectContent.exam.score !== undefined) {\n        completed += 1;\n      }\n    }\n  \n    // Calculate percentage\n    const fraction = (completed / total)\n    this.subjectService.updateSessionProgress(this.subjectId, fraction).subscribe({\n      next: () => {\n        console.log(\"Progress updated successfully\")\n        const percentage = total > 0 ? Math.round(fraction * 100) : 0;\n        console.log(`Progress: ${completed}/${total} (${percentage}%)`);\n      }, error(err) {\n        console.error(`Failed to update progress: ${err}`)\n      },\n    });\n  }  \n  \n  //\n  getTopicDataFromSubtopic() {\n    const topicData = this.subjectContent.topics.find((topic: any) => topic.subtopics.some((subtopic: any) => subtopic.id === this.currentView.id));\n    return { id: topicData?.id, title: topicData?.title};\n  }\n\n  //\n  getTopicDataFromExercise() {\n    const topicData = this.subjectContent.topics.find((topic: any) => topic.exercise && topic.exercise.id === this.currentView.id);\n    return { id: topicData?.id, title: topicData?.title};\n  }\n\n  //\n  checkForTopicCompleteness(topic_id: string) {\n    const topic = this.subjectContent.topics.find((t: any) => t.id === topic_id);\n  \n    if (!topic) return; // no topic found\n  \n    const allSubtopicsRead = Array.isArray(topic.subtopics) \n      ? topic.subtopics.every((st: any) => st.read) \n      : false;\n  \n    const hasExerciseScore = topic.exercise\n      ? topic.exercise.score !== null\n      : true;\n  \n    topic.completed = allSubtopicsRead && hasExerciseScore;\n  }\n\n  // Updates the current view to the previous or next subtopic\n  changeSubtopic(event: any) {\n    const id = event.id\n    const direction = event.direction;\n\n    const topic = this.subjectContent.topics.find((t: any) => t.id === id);\n    if (!topic) return;\n\n    const subtopics = topic.subtopics;\n    const currentIndex = subtopics.findIndex((s: any) => s.id === this.currentView.id);\n    if (currentIndex === -1) return;\n\n    let newIndex = currentIndex + (direction === 'next' ? 1 : -1);\n    if (newIndex = subtopics.length) newIndex = subtopics.length - 1; // Caps next subtopic at last subtopic\n\n    this.updatecurrentView({ id: subtopics[newIndex].id, type: 'subtopic'})\n  }\n\n  //\n  updateChatMetadata(question_event? : any) {\n    if (this.currentView.type === 'subtopic') {\n      const topicData = this.getTopicDataFromSubtopic()\n      this.chatMetadata.topic_id = topicData.id\n      this.chatMetadata.topic_name = topicData.title\n      this.chatMetadata.sub_topic_id = this.currentView.id\n      this.chatMetadata.sub_topic_name = this.currentView.content.title\n      this.chatMetadata.exercise_id = null\n      this.chatMetadata.exam_id = null\n      this.chatMetadata.question_id = null\n    } else if (this.currentView.type === 'exercise') {\n      const topicData = this.getTopicDataFromExercise()\n      this.chatMetadata.topic_id = topicData.id\n      this.chatMetadata.topic_name = topicData.title\n      this.chatMetadata.sub_topic_id = null\n      this.chatMetadata.sub_topic_name = null\n      this.chatMetadata.exercise_id = this.currentView.id\n      this.chatMetadata.exam_id = null\n      this.chatMetadata.question_id = question_event.id\n    } else if (this.currentView.type === 'exam') {\n      this.chatMetadata.topic_id = null\n      this.chatMetadata.topic_name = null\n      this.chatMetadata.sub_topic_id = null\n      this.chatMetadata.sub_topic_name = null\n      this.chatMetadata.exercise_id = null\n      this.chatMetadata.exam_id = this.currentView.id\n      this.chatMetadata.question_id = question_event.id\n    }\n  }\n\n  //\n  toggleChatPopup() {\n    this.chatOpen = !this.chatOpen\n    console.log(\"chat toggled\")\n  }\n\n  capitalizeFirstLetter(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  }\n}\n\n    \n\n    \n        \n\n\n@if (currentView.type === 'exercise' || currentView.type === 'exam') {\n  \n    \n      \n        Practice {{capitalizeFirstLetter(currentView.type)}} for {{(currentView.type === 'exercise') ? getTopicDataFromExercise().title : subjectContent.subject_name}}\n      \n      \n        {{ currentView.content.questions.length }} Question{{(currentView.content.questions.length > 1) ? 's' : '' }}\n      \n      These questions will help reinforce your understanding. Take your time to answer all the questions.\n    \n    \n      Score:\n      \n        @if (!(currentView.content.score == null)) {\n          {{currentView.content.score}} / {{currentView.content.questions.length}}\n        } @else {\n          Not Graded\n        }\n      \n    \n  \n}\n\n\n  \n\n  \n    @if (currentView.type === 'subtopic') {\n      \n    }\n    @if (currentView.type === 'exercise' || currentView.type === 'exam') {\n      \n    }\n  \n\n  \n\n\n\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (currentView.type === \\'exercise\\' || currentView.type === \\'exam\\') {                    Practice {{capitalizeFirstLetter(currentView.type)}} for {{(currentView.type === \\'exercise\\') ? getTopicDataFromExercise().title : subjectContent.subject_name}}                    {{ currentView.content.questions.length }} Question{{(currentView.content.questions.length > 1) ? \\'s\\' : \\'\\' }}            These questions will help reinforce your understanding. Take your time to answer all the questions.              Score:              @if (!(currentView.content.score == null)) {          {{currentView.content.score}} / {{currentView.content.questions.length}}        } @else {          Not Graded        }            }        @if (currentView.type === \\'subtopic\\') {          }    @if (currentView.type === \\'exercise\\' || currentView.type === \\'exam\\') {          }      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'LessonPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LessonService.html":{"url":"injectables/LessonService.html","title":"injectable - LessonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  LessonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/lesson.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSubtopics\n                            \n                            \n                                getAllTopics\n                            \n                            \n                                getExam\n                            \n                            \n                                getExercise\n                            \n                            \n                                markSubtopicAsRead\n                            \n                            \n                                saveExamScore\n                            \n                            \n                                saveExerciseScore\n                            \n                            \n                                scoreEssayQuestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSubtopics\n                        \n                    \n                \n            \n            \n                \ngetAllSubtopics(topicId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTopics\n                        \n                    \n                \n            \n            \n                \ngetAllTopics(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getExam\n                        \n                    \n                \n            \n            \n                \ngetExam(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getExercise\n                        \n                    \n                \n            \n            \n                \ngetExercise(topicId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markSubtopicAsRead\n                        \n                    \n                \n            \n            \n                \nmarkSubtopicAsRead(topicId: string, subtopicId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subtopicId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveExamScore\n                        \n                    \n                \n            \n            \n                \nsaveExamScore(sessionId?: string, examId?: string, score?: number, questionData?: SaveQuestionData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                questionData\n                                            \n                                                            SaveQuestionData[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveExerciseScore\n                        \n                    \n                \n            \n            \n                \nsaveExerciseScore(topicId?: string | null, exerciseId?: string, score?: number, questionData?: SaveQuestionData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topicId\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                exerciseId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                questionData\n                                            \n                                                            SaveQuestionData[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scoreEssayQuestion\n                        \n                    \n                \n            \n            \n                \nscoreEssayQuestion(sessionId?: string, questionId?: string, answer?: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/lesson.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                questionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                answer\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpBaseService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/lesson.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\nimport { SaveQuestionData } from '../models/question.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LessonService {\n  http = inject(HttpBaseService);\n\n  getAllTopics(sessionId: string): Observable {\n    return this.http.get(`topic/${sessionId}/list`);\n  }\n\n  getAllSubtopics(topicId: string): Observable {\n    return this.http.get(`topic/${topicId}/get-content`);\n  }\n\n  getExercise(topicId: string): Observable {\n    return this.http.get(`topic/${topicId}/get-exercise`);\n  }\n\n  getExam(sessionId: string): Observable {\n    return this.http.get(`session/${sessionId}/get-exam`);\n  }\n\n  scoreEssayQuestion(sessionId?: string, questionId?: string, answer?: string | null): Observable {\n    return this.http.post(`chatbot/answer-question`, { session_id: sessionId, question_id: questionId, answer });\n  }\n\n  markSubtopicAsRead(topicId: string, subtopicId: string): Observable {\n    return this.http.put(`topic/${topicId}/mark-as-read`, { subtopic_id: subtopicId });\n  }\n\n  saveExerciseScore(topicId?: string | null, exerciseId?: string, score?: number, questionData?: SaveQuestionData[]): Observable {\n    return this.http.put(`topic/${topicId}/save-exercise-score`, { exercise_id: exerciseId, score, question_data: questionData });\n  }\n\n  saveExamScore(sessionId?: string, examId?: string, score?: number, questionData?: SaveQuestionData[]): Observable {\n    return this.http.put(`session/${sessionId}/save-exam-score`, { exam_id: examId, score, question_data: questionData });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Login.html":{"url":"components/Login.html","title":"component - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/auth/login/login.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n\n            \n                imports\n                \n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                email\n                            \n                            \n                                    \n                                emailCtrl\n                            \n                            \n                                loading\n                            \n                            \n                                password\n                            \n                            \n                                    \n                                passwordCtrl\n                            \n                            \n                                passwordVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                            \n                                togglePasswordVisibility\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/auth/login/login.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/auth/login/login.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePasswordVisibility\n                        \n                    \n                \n            \n            \n                \ntogglePasswordVisibility()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/auth/login/login.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emailCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('emailCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('passwordCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"password\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, ViewChild } from '@angular/core';\nimport { FormsModule, NgModel } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  imports: [FormsModule],\n  templateUrl: './login.html',\n})\nexport class Login {\n  email = '';\n  password = '';\n  passwordVisible = \"password\";\n  loading = false;\n\n  @ViewChild('emailCtrl') emailCtrl!: NgModel;\n  @ViewChild('passwordCtrl') passwordCtrl!: NgModel;\n\n  authService = inject(AuthService);\n  constructor(\n    private router: Router,\n  ) {}\n\n  togglePasswordVisibility() {\n    if (this.passwordVisible === \"password\") {\n      this.passwordVisible = \"text\"\n    } else {\n      this.passwordVisible = \"password\"\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    // Later: replace with real API call\n    if (this.emailCtrl.invalid || this.passwordCtrl.invalid) {\n      alert(\"Valid email and password required\");\n    } else {\n      this.authService.login({ email: this.email, password: this.password }).subscribe({\n        next: (response) => {\n          console.log('Login successful', response);\n          localStorage.setItem('accessToken', response.accessToken);\n          localStorage.setItem('refreshToken', response.refreshToken);\n          const user = response.user;\n          console.log('Logged in user:', user);\n          this.router.navigate(['/dashboard']);\n        },\n        error: (error) => {\n          console.error('Login failed', error);\n          alert('Invalid email or password');\n        }\n      });\n    }\n    this.loading = false;\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n      Maestro\n    \n    Welcome Back!\n    Access your personalized lessons and materials.\n    \n      \n      \n        Email Address\n        \n        \n        @if (emailCtrl.invalid && emailCtrl.touched) {\n          \n            @if (emailCtrl.errors?.['required']) {Email is required}\n            @if (emailCtrl.errors?.['email']) {Invalid email format}\n          \n        }\n      \n\n      \n      \n        Password\n        \n        \n        @if (passwordCtrl.invalid && passwordCtrl.touched) {\n          \n            Password is required\n          \n        }\n        \n          \n        \n      \n\n      \n        Next\n      \n    \n    \n      New to Maestro? Sign Up!\n    \n  \n  \n  \n    \n    \n      \n      Maestro\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Maestro        Welcome Back!    Access your personalized lessons and materials.                        Email Address                        @if (emailCtrl.invalid && emailCtrl.touched) {                      @if (emailCtrl.errors?.[\\'required\\']) {Email is required}            @if (emailCtrl.errors?.[\\'email\\']) {Invalid email format}                  }                          Password                        @if (passwordCtrl.invalid && passwordCtrl.touched) {                      Password is required                  }                                              Next                    New to Maestro? Sign Up!                              Maestro      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Login'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginPayload.html":{"url":"interfaces/LoginPayload.html","title":"interface - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth-payload.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserModel } from \"./user.model\";\n\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserModel;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface SignupPayload {\n  name: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface VerifyEmailResponse {\n  success: boolean;\n  message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth-payload.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserModel } from \"./user.model\";\n\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserModel;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface SignupPayload {\n  name: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface VerifyEmailResponse {\n  success: boolean;\n  message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/MarkdownPipe.html":{"url":"pipes/MarkdownPipe.html","title":"pipe - MarkdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  MarkdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/pipes/markdown-pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        markdown\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string | null | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/pipes/markdown-pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        string | null | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        md\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new MarkdownIt({ html: true, linkify: true, typographer: true })\n    .use(markdownItKatex)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/pipes/markdown-pipe.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport MarkdownIt from 'markdown-it';\nimport markdownItKatex from 'markdown-it-katex';\n\n@Pipe({\n  name: 'markdown',\n  standalone: true\n})\nexport class MarkdownPipe implements PipeTransform {\n  private md = new MarkdownIt({ html: true, linkify: true, typographer: true })\n    .use(markdownItKatex);\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(value: string | null | undefined): SafeHtml {\n    if (!value) return '';\n    const html = this.md.render(value);\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NamingUpload.html":{"url":"components/NamingUpload.html","title":"component - NamingUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  NamingUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/subject-create/naming-upload/naming-upload.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-naming-upload\n            \n\n\n            \n                imports\n                \n                                Header\n                                CreationStepTab\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./naming-upload.html\n            \n\n\n\n            \n                styleUrl\n                ./naming-upload.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                files\n                            \n                            \n                                isDragging\n                            \n                            \n                                loading\n                            \n                            \n                                notify\n                            \n                            \n                                subjectName\n                            \n                            \n                                subjectService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addFiles\n                            \n                            \n                                formatFileSize\n                            \n                            \n                                onDragLeave\n                            \n                            \n                                onDragOver\n                            \n                            \n                                onFileDrop\n                            \n                            \n                                onFileSelect\n                            \n                            \n                                onSubmit\n                            \n                            \n                                removeFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    addFiles(fileList: FileList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileList\n                                            \n                                                        FileList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatFileSize\n                        \n                    \n                \n            \n            \n                \nformatFileSize(file: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDragLeave\n                        \n                    \n                \n            \n            \n                \nonDragLeave(event: DragEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        DragEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDragOver\n                        \n                    \n                \n            \n            \n                \nonDragOver(event: DragEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        DragEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onFileDrop\n                        \n                    \n                \n            \n            \n                \nonFileDrop(event: DragEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        DragEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onFileSelect\n                        \n                    \n                \n            \n            \n                \nonFileSelect(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:94\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFile\n                        \n                    \n                \n            \n            \n                \nremoveFile(file: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notify\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NotificationService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(SubjectsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/naming-upload/naming-upload.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { Router } from '@angular/router';\nimport { CreationStepTab } from '../creation-step-tab/creation-step-tab';\nimport { FormsModule } from '@angular/forms';\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { NotificationService } from '../../../core/services/notification.service'; //  {\n      if (allowedTypes.includes(file.type)) {\n        validFiles.push(file);\n      } else {\n        invalidFiles.push(file.name);\n      }\n    });\n\n    if (invalidFiles.length) {\n      this.notify.showError(\n        `Unsupported file types: ${invalidFiles.join(', ')}`\n      );\n    }\n    if (validFiles.length) {\n      this.files = [...this.files, ...validFiles];\n      this.notify.showSuccess(`${validFiles.length} file(s) added.`);\n    }\n  }\n\n  removeFile(file: File) {\n    this.files = this.files.filter((f) => f !== file);\n  }\n\n  formatFileSize(file: File) {\n    let size: any = file.size;\n    let end = null;\n    if (size >= 1_000_000) {\n      size /= 1_000_000;\n      size = size.toFixed(3);\n      end = 'MB';\n    } else if (size >= 1_000) {\n      size /= 1_000;\n      size = size.toFixed(3);\n      end = 'KB';\n    } else {\n      end = 'B';\n    }\n    return `${size} ${end}`;\n  }\n\n  onSubmit() {\n    this.loading = true;\n    if (this.subjectName.trim() === '') {\n      this.notify.showError('Subject name is required');\n      this.loading = false;\n      return;\n    }\n    if (this.files.length === 0) {\n      this.notify.showError('At least one file must be uploaded');\n      this.loading = false;\n      return;\n    }\n\n    // Here you would typically send the data to the backend\n    console.log('Subject Name:', this.subjectName);\n    console.log('Files:', this.files);\n    console.log('Stage 0' + this.loading);\n\n    // Create subject\n    this.subjectService.createSubject(this.subjectName).subscribe({\n      next: (response) => {\n        console.log('Stage 1' + this.loading);\n        console.log(response);\n        const sessionId = response.session.id;\n\n        // Ingest documents\n        this.subjectService.ingestDocuments(sessionId, this.files).subscribe({\n          next: (ingestResponse) => {\n            console.log(ingestResponse);\n            console.log('Stage 2' + this.loading);\n\n            // Label documents with topics\n            this.subjectService.labelDocuments(sessionId).subscribe({\n              next: (labelResponse) => {\n                console.log('Stage 3' + this.loading);\n                console.log(labelResponse);\n                this.router.navigate([\n                  `/subject-create/${sessionId}/topic-preferences`,\n                ]);\n                this.loading = false;\n              },\n\n              error: (err) => {\n                console.error('Error labeling documents:', err);\n                this.notify.showError(\n                  'Failed to label documents. Please try again later.'\n                );\n                this.loading = false;\n              },\n            });\n          },\n\n          error: (err) => {\n            console.error('Error ingesting documents:', err);\n            this.notify.showError(\n              'Failed to upload documents. Please try again later.'\n            );\n            this.loading = false;\n          },\n        });\n      },\n\n      error: (err) => {\n        console.error('Error creating subject:', err);\n        this.notify.showError(\n          'Failed to create subject. Please try again later.'\n        );\n        this.loading = false;\n      },\n    });\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n    \n    \n  \n  Create a new subject\n  \n    Subject Name\n    \n    \n    @if (nameCtrl.invalid && nameCtrl.touched) {\n      \n        @if (nameCtrl.errors?.['required']) {Subject Name cannot be empty}\n      \n    }\n\n    \n    \n      \n        \n      \n      \n      Upload your PDFs and DOCX files here to start generating personalized lessons for this subject.\n      JPG, PNG, PDF. Max file size: 25MB.\n    \n\n    \n    @if (files.length > 0) {\n      \n        Selected files:\n        \n          @for (file of files; track $index) {\n            \n              {{ file.name }}\n              ({{formatFileSize(file)}})\n              \n                \n                X\n              \n            \n          }\n        \n      \n    }\n\n    \n      Create New Subject\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  Create a new subject      Subject Name            @if (nameCtrl.invalid && nameCtrl.touched) {              @if (nameCtrl.errors?.[\\'required\\']) {Subject Name cannot be empty}          }                                        Upload your PDFs and DOCX files here to start generating personalized lessons for this subject.      JPG, PNG, PDF. Max file size: 25MB.            @if (files.length > 0) {              Selected files:                  @for (file of files; track $index) {                          {{ file.name }}              ({{formatFileSize(file)}})                                              X                                    }                  }          Create New Subject            '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'NamingUpload'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFound.html":{"url":"components/NotFound.html","title":"component - NotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  NotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/not-found/not-found.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./not-found.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goHome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/not-found/not-found.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goHome\n                        \n                    \n                \n            \n            \n                \ngoHome()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/not-found/not-found.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-not-found',\n  imports: [CommonModule],\n  templateUrl: './not-found.html',\n  styleUrl: './not-found.css'\n})\nexport class NotFound {\n  constructor(private router: Router) {}\n  goHome() {\n    this.router.navigateByUrl('/');\n  }\n}\n\n    \n\n    \n        \n  404\n  Page not found\n  \n    Back to Home\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  404  Page not found      Back to Home  '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'NotFound'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _timer\n                            \n                            \n                                message\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                show\n                            \n                            \n                                showError\n                            \n                            \n                                showSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/notification.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        show\n                        \n                    \n                \n            \n            \n                \nshow(type: NoticeType, msg: string, ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/notification.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            NoticeType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    4000\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showError\n                        \n                    \n                \n            \n            \n                \nshowError(msg: string, ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/notification.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5000\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSuccess\n                        \n                    \n                \n            \n            \n                \nshowSuccess(msg: string, ms: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/notification.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    2500\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/notification.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/notification.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/notification.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\n\nexport type NoticeType = 'success' | 'error' | 'info' | 'warn';\n\n@Injectable({ providedIn: 'root' })\nexport class NotificationService {\n  message = signal(null);\n  type = signal(null);\n  private _timer?: number;\n\n  show(type: NoticeType, msg: string, ms = 4000) {\n    this.type.set(type);\n    this.message.set(msg);\n    clearTimeout(this._timer);\n    this._timer = window.setTimeout(() => this.clear(), ms) as any;\n  }\n\n  showError(msg: string, ms = 5000) { this.show('error', msg, ms); }\n  showSuccess(msg: string, ms = 2500) { this.show('success', msg, ms); }\n  clear() { this.message.set(null); this.type.set(null); }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PasswordValidator.html":{"url":"directives/PasswordValidator.html","title":"directive - PasswordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Directives\n  PasswordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/directives/password-validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                PasswordValidator\n                            \n                        \n                    \n\n                    \n                        Selector\n                        [appPasswordValidator]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/directives/password-validator.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl, ValidationErrors } from '@angular/forms';\n\n@Directive({\n  selector: '[appPasswordValidator]',\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: PasswordValidator,\n      multi: true,\n    },\n  ],\n})\nexport class PasswordValidator implements Validator {\n  validate(control: AbstractControl): ValidationErrors | null {\n    if (!control.value) return null;\n\n    const regex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d!@#$%^&*()_+.,?-]{8,}$/;\n    return regex.test(control.value) ? null : { invalidPassword: true };\n    const pw = control.get('password')?.value;\n    const cpw = control.get('confirmPassword')?.value;\n    return pw === cpw ? null : { passwordMismatch: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Plan.html":{"url":"interfaces/Plan.html","title":"interface - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/subscription.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            durationDays\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            maxSubjects\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            price\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        durationDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        durationDays:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSubjects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSubjects:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Plan {\n  id: string;\n  name: string;\n  price: number;\n  maxSubjects: number;\n  durationDays: number;\n}\n\nexport interface SubscriptionStatus {\n  plan: Plan;\n  startedAt: string;\n  expiresAt: string;\n  isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Practice.html":{"url":"components/Practice.html","title":"component - Practice","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Practice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/lesson/practice/practice.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-practice\n            \n\n\n            \n                imports\n                \n                            FormsModule\n                            MarkdownPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./practice.html\n            \n\n\n\n            \n                styleUrl\n                ./practice.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lessonService\n                            \n                            \n                                loading\n                            \n                            \n                                question\n                            \n                            \n                                    Private\n                                updateOnInputChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                autoResize\n                            \n                            \n                                cycleQuestion\n                            \n                            \n                                getQuestionNumber\n                            \n                            \n                                submitAnswers\n                            \n                            \n                                toggleSelectOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentView\n                            \n                            \n                                subjectId\n                            \n                            \n                                topicId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeProgress\n                            \n                            \n                                changeQuestion\n                            \n                            \n                                exerciseCompleted\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentView\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        subjectId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        topicId\n                    \n                \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:17\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        changeProgress\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        changeQuestion\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        exerciseCompleted\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/practice/practice.ts:19\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        autoResize\n                        \n                    \n                \n            \n            \n                \nautoResize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/practice/practice.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cycleQuestion\n                        \n                    \n                \n            \n            \n                \ncycleQuestion(direction: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/practice/practice.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQuestionNumber\n                        \n                    \n                \n            \n            \n                \ngetQuestionNumber()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/practice/practice.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitAnswers\n                        \n                    \n                \n            \n            \n                \nsubmitAnswers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/practice/practice.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelectOption\n                        \n                    \n                \n            \n            \n                \ntoggleSelectOption(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/practice/practice.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lessonService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LessonService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/practice/practice.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/practice/practice.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/practice/practice.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateOnInputChange\n                        \n                    \n                \n            \n                \n                    \n                        Default value : effect(() => {\n    const view = this.currentView(); // \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/lesson/practice/practice.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, effect, inject, input, OnInit, output, SimpleChanges } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { QuestionModel, SaveQuestionData } from '../../../core/models/question.model';\nimport { LessonService } from '../../../core/services/lesson.service';\nimport { catchError, forkJoin, Observable, of, switchMap, take, tap } from 'rxjs';\nimport { MarkdownPipe } from '../../../shared/pipes/markdown-pipe';\n\n@Component({\n  selector: 'app-practice',\n  imports: [FormsModule, MarkdownPipe],\n  templateUrl: './practice.html',\n  styleUrl: './practice.css'\n})\nexport class Practice {\n  currentView = input();\n  subjectId = input();\n  topicId = input()\n  changeQuestion = output();\n  exerciseCompleted = output();\n  changeProgress = output();\n  question: any;\n  loading = false;\n  lessonService = inject(LessonService)\n\n  // This will run any time currentView changes\n  private updateOnInputChange = effect(() => {\n    const view = this.currentView(); //  q.id === this.question.id);\n\n    let newIndex = currentIndex + (direction === 'next' ? 1 : -1);\n    if (newIndex = this.currentView().content.questions.length) newIndex = this.currentView().content.questions.length - 1; // Caps next question at last question\n\n    this.question = this.currentView().content.questions[newIndex]\n    console.log(this.question)\n    this.changeQuestion.emit({id: this.question.id})\n  }\n\n  getQuestionNumber() {\n    return this.currentView().content.questions.findIndex((q: any) => q.id === this.question.id) + 1;\n  }\n\n  toggleSelectOption(id: any) {\n    if (this.question.type === 'multiple choice') {\n      this.question.options.forEach((option: any) => {\n        option.selected = option.id === id;\n      });\n    } else if (this.question.type === 'multiple selection') {\n      const option = this.question.options.find((o: any) => o.id === id);\n      if (option) {\n        option.selected = !option.selected;\n      }\n    }\n    console.log(this.currentView()?.content?.questions.find((q: any) => q.id === this.question.id)?.options);\n  }\n\n  submitAnswers() {\n    const proceed = confirm(\"Are you sure you want to submit?\")\n    if (!proceed) return\n\n    this.loading = true;\n\n    let correctCount = 0;\n    let questionData: SaveQuestionData[] = [];\n\n    const essayCalls: Observable[] = [];\n\n    this.currentView().content.questions.forEach((question: QuestionModel) => {\n      let q: SaveQuestionData = {\n        id: question.id,\n        type: question.type,\n        options: [],\n        essay_answer: null,\n        essay_feedback: null\n      };\n\n      if (question.type === 'multiple choice' || question.type === 'multiple selection') {\n        const isCorrect = question.options?.every(opt => opt.selected === opt.correct);\n        if (isCorrect) correctCount++;\n        q.options = question.options?.map(opt => ({ id: opt.id, selected: opt.selected }));\n      } \n      \n      else if (question.type === 'essay') {\n        if (!question.essay_answer) question.essay_answer = \"\"\n        essayCalls.push(\n          this.lessonService.scoreEssayQuestion(this.subjectId(), question.id, question.essay_answer).pipe(\n            tap((value) => {\n              console.log(value)\n              if (value.correct) correctCount++;\n              q.essay_answer = question.essay_answer;\n              q.essay_feedback = question.essay_feedback = value.feedback;\n            }),\n            catchError(err => {\n              console.error(`Error scoring essay question: ${err}`);\n              return of(null);\n            })\n          )\n        );\n      }\n\n      questionData.push(q); // this might seem counterintuitive, but it actually does work with the async essay scoring, trust me bro, I asked gpt... I lied, it doesn't work\n    });\n\n    // save score observable\n    let saveCall$: Observable;\n    if (this.currentView().type === 'exercise') {\n      console.log(questionData)\n      saveCall$ = this.lessonService.saveExerciseScore(this.topicId(), this.currentView().id, correctCount, questionData).pipe(\n        tap(() => this.exerciseCompleted.emit(this.topicId()))\n        );\n    } else if (this.currentView().type === 'exam') {\n      console.log(questionData)\n      saveCall$ = this.lessonService.saveExamScore(this.subjectId(), this.currentView().id, correctCount, questionData);\n    } else {\n      saveCall$ = of(null);\n    }\n\n    // run essay scoring first, then save score\n    forkJoin(essayCalls.length > 0 ? essayCalls : [of(null)]).pipe(\n      switchMap(() => {\n        // Save final score into the currentView\n        this.currentView().content.score = correctCount;\n        return saveCall$;\n      })\n    ).subscribe({\n      next: () => {\n        this.changeProgress.emit({}); // Notify parent to refresh progress\n        this.loading = false; // ✅ only after scoring + saving\n      },\n      error: (err) => {\n        console.error('Failed to submit answers:', err);\n        this.loading = false;\n      }\n    });\n  }\n\n}\n\n    \n\n    \n        \n  \n    Question {{getQuestionNumber()}}\n  \n  \n    \n    @if (question.type === 'essay') {\n      \n      @if (currentView().content.score) {\n        \n          Feedback: \n          \n        \n      }\n    } @else {\n      @for (option of question.options; track option.id) {\n        \n          \n          \n          \n        \n        @if (!(currentView().content.score == null)) {\n          \n            \n          \n        }\n      }\n    }\n  \n  \n  \n  \n    \n      \n      Previous\n    \n    \n      Next\n      \n    \n  \n\n  \n  \n    Submit\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Question {{getQuestionNumber()}}            @if (question.type === \\'essay\\') {            @if (currentView().content.score) {                  Feedback:                         }    } @else {      @for (option of question.options; track option.id) {                                                      @if (!(currentView().content.score == null)) {                                        }      }    }                        Previous              Next                    Submit  '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Practice'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Pricing.html":{"url":"components/Pricing.html","title":"component - Pricing","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Pricing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/home/pricing/pricing.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-pricing\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./pricing.html\n            \n\n\n\n            \n                styleUrl\n                ./pricing.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pricing',\n  imports: [],\n  templateUrl: './pricing.html',\n  styleUrl: './pricing.css'\n})\nexport class Pricing {\n\n}\n\n    \n\n    \n        \n\n  \n    \n      Simple, Flexible Plans for\n      Every Learner\n    \n    \n      Start free, grow your study power as you go.\n    \n  \n\n  \n  \n    \n    \n      Starter\n      \n        ₦0/per month\n      \n      \n        Get started for free\n      \n      \n        For curious learners who want to try Maestro.\n      \n      \n      \n\n      \n        Features\n        \n          \n            \n            Create 2 personalized lessons each month\n          \n          \n            \n            Keep up to 5 lessons saved in your library\n          \n          \n            \n            Upload files up to 3MB each\n          \n        \n      \n    \n\n    \n    \n      \n      \n        \n          ★ Most Popular\n        \n      \n      Pro\n      \n        ₦6000/per month\n      \n      \n        Get Started\n      \n      \n        For consistent learners who need more flexibility.\n      \n      \n      \n        Features\n        \n          \n            \n            Unlock 8 lessons every month\n          \n          \n            \n            Store up to 20 lessons for easy access\n          \n          \n            \n            Upload documents up to 10MB\n          \n        \n      \n    \n\n    \n    \n      Premium\n      \n        ₦15,000/per month\n      \n      \n        Go Premium\n      \n      \n        For serious learners who want it all.\n      \n      \n      \n      \n        Features\n        \n          \n            \n            Generate up to 25 lessons per month\n          \n          \n            \n            Save 100 lessons in your personal library\n          \n          \n            \n            Upload files as large as 20MB\n          \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Simple, Flexible Plans for      Every Learner              Start free, grow your study power as you go.                        Starter              ₦0/per month                    Get started for free                    For curious learners who want to try Maestro.                                Features                                          Create 2 personalized lessons each month                                            Keep up to 5 lessons saved in your library                                            Upload files up to 3MB each                                                                  ★ Most Popular                    Pro              ₦6000/per month                    Get Started                    For consistent learners who need more flexibility.                          Features                                          Unlock 8 lessons every month                                            Store up to 20 lessons for easy access                                            Upload documents up to 10MB                                          Premium              ₦15,000/per month                    Go Premium                    For serious learners who want it all.                                Features                                          Generate up to 25 lessons per month                                            Save 100 lessons in your personal library                                            Upload files as large as 20MB                              '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Pricing'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionModel.html":{"url":"interfaces/QuestionModel.html","title":"interface - QuestionModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuestionModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/question.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            essay_answer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            essay_feedback\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        essay_answer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        essay_answer:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        essay_feedback\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        essay_feedback:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         QuestionOption[] | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionOption[] | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         QuestionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionOption {\n  id: string;\n  text: string;\n  correct: boolean;\n  selected: boolean;\n  explanation: string;\n}\n\nexport type QuestionType = 'multiple choice' | 'multiple selection' | 'essay';\n\nexport interface QuestionModel {\n  id: string;\n  text: string;\n  type: QuestionType;\n  options?: QuestionOption[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n\nexport interface SaveQuestionData {\n  id: string;\n  type: QuestionType;\n  options?: { id: string; selected: boolean }[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionOption.html":{"url":"interfaces/QuestionOption.html","title":"interface - QuestionOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuestionOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/question.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            correct\n                                        \n                                \n                                \n                                        \n                                            explanation\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        correct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        correct:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        explanation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        explanation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionOption {\n  id: string;\n  text: string;\n  correct: boolean;\n  selected: boolean;\n  explanation: string;\n}\n\nexport type QuestionType = 'multiple choice' | 'multiple selection' | 'essay';\n\nexport interface QuestionModel {\n  id: string;\n  text: string;\n  type: QuestionType;\n  options?: QuestionOption[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n\nexport interface SaveQuestionData {\n  id: string;\n  type: QuestionType;\n  options?: { id: string; selected: boolean }[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/QuestionSettings.html":{"url":"components/QuestionSettings.html","title":"component - QuestionSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  QuestionSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/subject-create/question-settings/question-settings.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-question-settings\n            \n\n\n            \n                imports\n                \n                                Header\n                                CreationStepTab\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./question-settings.html\n            \n\n\n\n            \n                styleUrl\n                ./question-settings.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                examSettings\n                            \n                            \n                                exerciseSettings\n                            \n                            \n                                loading\n                            \n                            \n                                subjectId\n                            \n                            \n                                subjectService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                            \n                                toggleExamType\n                            \n                            \n                                toggleExerciseType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/question-settings/question-settings.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleExamType\n                        \n                    \n                \n            \n            \n                \ntoggleExamType(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/question-settings/question-settings.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleExerciseType\n                        \n                    \n                \n            \n            \n                \ntoggleExerciseType(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/question-settings/question-settings.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        examSettings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ExamSettings()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exerciseSettings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ExerciseSettings()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(SubjectsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/question-settings/question-settings.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, inject } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { CreationStepTab } from '../creation-step-tab/creation-step-tab';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { forkJoin, Observable } from 'rxjs';\n\nclass ExerciseSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n}\nclass ExamSettings {\n  include: boolean = false\n  questionTypes: Array = []\n  preference: string = ''\n  timeLimit: any = null\n}\n\n@Component({\n  selector: 'app-question-settings',\n  imports: [Header, CreationStepTab, FormsModule],\n  templateUrl: './question-settings.html',\n  styleUrl: './question-settings.css'\n})\nexport class QuestionSettings {\n  exerciseSettings = new ExerciseSettings();\n  examSettings = new ExamSettings();\n  loading = false;\n  subjectId = '';\n  subjectService = inject(SubjectsService)\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {\n    // Extract subjectId from the route parameters\n    const url = window.location.pathname;\n    const parts = url.split('/');\n    this.subjectId = parts[parts.length - 2]; // Assuming the last part is the subjectId\n  }\n\n  toggleExerciseType(event: any) {\n    if (event.target.checked) {\n      this.exerciseSettings.questionTypes.push(event.target.value);\n    } else {\n      this.exerciseSettings.questionTypes = this.exerciseSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  toggleExamType(event: any) {\n    if (event.target.checked) {\n      this.examSettings.questionTypes.push(event.target.value);\n    } else {\n      this.examSettings.questionTypes = this.examSettings.questionTypes.filter((qt) => qt !== event.target.value);\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    let exerciseValidated = false;\n    let examValidated = false;\n  \n    // Validate exercise fields\n    if (this.exerciseSettings.include) {\n      if (this.exerciseSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exercises\");\n        this.loading = false;\n        return;\n      }\n      if (!this.exerciseSettings.preference) {\n        alert(\"Exercise preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    exerciseValidated = true;\n  \n    // Validate exam fields\n    if (this.examSettings.include) {\n      if (this.examSettings.questionTypes.length == 0) {\n        alert(\"Choose at least one question type for the exam\");\n        this.loading = false;\n        return;\n      }\n      if (!this.examSettings.preference) {\n        alert(\"Exam preference cannot be empty\");\n        this.loading = false;\n        return;\n      }\n    }\n    examValidated = true;\n  \n    // Collect all requests to run in parallel\n    const requests: Observable[] = [];\n  \n    if (this.exerciseSettings.include && exerciseValidated) {\n      requests.push(\n        this.subjectService.generateExercise(\n          this.subjectId,\n          this.exerciseSettings.preference,\n          this.exerciseSettings.questionTypes\n        )\n      );\n    }\n  \n    if (this.examSettings.include && examValidated) {\n      requests.push(\n        this.subjectService.generateExam(\n          this.subjectId,\n          this.examSettings.preference,\n          this.examSettings.questionTypes\n        )\n      );\n    }\n  \n    // If there are requests, wait for them to finish before updating status\n    if (requests.length > 0) {\n      forkJoin(requests).subscribe({\n        next: (responses) => {\n          console.log(\"Generation responses:\", responses);\n          this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n            next: () => {\n              console.log(\"Session status updated\");\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            error: (err) => {\n              console.error(\"Failed to update session status\", err);\n              this.router.navigate([`/lesson/${this.subjectId}`]);\n            },\n            complete: () => (this.loading = false),\n          });\n        },\n        error: (err) => {\n          console.error(\"Error during generation:\", err);\n          this.loading = false;\n        }\n      });\n    } else {\n      // If no requests to generate, just update status directly\n      this.subjectService.updateSessionStatus(this.subjectId, \"In Progress\").subscribe({\n        next: () => {\n          console.log(\"Session status updated (no generation needed)\");\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        error: (err) => {\n          console.error(\"Failed to update session status\", err);\n          this.router.navigate([`/lesson/${this.subjectId}`]);\n        },\n        complete: () => (this.loading = false),\n      });\n    }\n  }\n\n}\n\n    \n\n    \n        \n\n  \n  \n    \n    \n    \n  \n\n  Set Practice Questions\n  \n    You can choose to generate practice exercises as well as an exam alongside the lesson.\n  \n\n  \n    \n    \n      Exercises\n      \n      Do you want to include exercises for each topic?\n      \n        \n        Yes\n      \n      \n        \n        No\n      \n\n      \n      What question types do you want for the exercise?\n      \n        \n        Multiple Choice\n      \n      \n        \n        Multiple Selection\n      \n      \n        \n        Essay\n      \n      \n      \n      How would you like the exercises to be?\n      \n    \n    \n    \n    \n      Exam\n      \n      Do you want to include an exam for the lesson?\n      \n        \n        Yes\n      \n      \n        \n        No\n      \n\n      \n      What question types do you want for the exam?\n      \n        \n        Multiple Choice\n      \n      \n        \n        Multiple Selection\n      \n      \n        \n        Essay\n      \n      \n      \n      How would you like the exam to be?\n      \n    \n  \n  \n    Next\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Set Practice Questions      You can choose to generate practice exercises as well as an exam alongside the lesson.                  Exercises            Do you want to include exercises for each topic?                      Yes                            No                  What question types do you want for the exercise?                      Multiple Choice                            Multiple Selection                            Essay                        How would you like the exercises to be?                            Exam            Do you want to include an exam for the lesson?                      Yes                            No                  What question types do you want for the exam?                      Multiple Choice                            Multiple Selection                            Essay                        How would you like the exam to be?                  Next      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'QuestionSettings'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SaveQuestionData.html":{"url":"interfaces/SaveQuestionData.html","title":"interface - SaveQuestionData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SaveQuestionData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/question.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            essay_answer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            essay_feedback\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        essay_answer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        essay_answer:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        essay_feedback\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        essay_feedback:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     literal type[] | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[] | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         QuestionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionOption {\n  id: string;\n  text: string;\n  correct: boolean;\n  selected: boolean;\n  explanation: string;\n}\n\nexport type QuestionType = 'multiple choice' | 'multiple selection' | 'essay';\n\nexport interface QuestionModel {\n  id: string;\n  text: string;\n  type: QuestionType;\n  options?: QuestionOption[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n\nexport interface SaveQuestionData {\n  id: string;\n  type: QuestionType;\n  options?: { id: string; selected: boolean }[] | null; // only for choice types\n  essay_answer?: string | null;\n  essay_feedback?: string | null;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Sidebar.html":{"url":"components/Sidebar.html","title":"component - Sidebar","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Sidebar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/lesson/sidebar/sidebar.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sidebar\n            \n\n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sidebar.html\n            \n\n\n\n            \n                styleUrl\n                ./sidebar.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logContent\n                            \n                            \n                                selectView\n                            \n                            \n                                toggleExpandTopic\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                currentView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                updateView\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/sidebar/sidebar.ts:11\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currentView\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/sidebar/sidebar.ts:12\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        updateView\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/sidebar/sidebar.ts:13\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logContent\n                        \n                    \n                \n            \n            \n                \nlogContent()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/sidebar/sidebar.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectView\n                        \n                    \n                \n            \n            \n                \nselectView(id: string, type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/sidebar/sidebar.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleExpandTopic\n                        \n                    \n                \n            \n            \n                \ntoggleExpandTopic(topic_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/sidebar/sidebar.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topic_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, input, output } from '@angular/core';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-sidebar',\n  imports: [RouterLink],\n  templateUrl: './sidebar.html',\n  styleUrl: './sidebar.css'\n})\nexport class Sidebar {\n  content = input();\n  currentView = input();\n  updateView = output();\n\n  logContent() {\n    console.log(this.content());\n  }\n\n  toggleExpandTopic(topic_id: string) {\n    const topic = this.content().topics.find((t: any) => t.id === topic_id);\n    if (topic) {\n      topic.expanded = !topic.expanded;\n    }\n  }\n\n  selectView(id: string, type: string) {\n    console.log(`Selected view: ${type} with ID: ${id}`);\n    this.updateView.emit({ id, type });\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n    \n    Back to Subjects\n  \n\n  \n  \n    \n    @for (topic of content().topics; track topic.id) {\n      \n        \n        {{ topic.title }}\n      \n      @if (topic.expanded) {\n        \n        @for (subtopic of topic.subtopics; track subtopic.id) {\n          \n            {{ subtopic.title }}\n          \n        }\n        \n        @if (topic.exercise) {\n          \n            Exercise\n          \n        }\n      }\n    }\n    \n    @if (content().exam) {\n      \n        Exam\n      \n    }\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                      Back to Subjects              @for (topic of content().topics; track topic.id) {                      {{ topic.title }}            @if (topic.expanded) {                @for (subtopic of topic.subtopics; track subtopic.id) {                      {{ subtopic.title }}                  }                @if (topic.exercise) {                      Exercise                  }      }    }        @if (content().exam) {              Exam          }  '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Sidebar'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Signup.html":{"url":"components/Signup.html","title":"component - Signup","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Signup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/auth/signup/signup.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-signup\n            \n\n\n            \n                imports\n                \n                            FormsModule\n                                PasswordValidator\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./signup.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                email\n                            \n                            \n                                    \n                                emailCtrl\n                            \n                            \n                                firstname\n                            \n                            \n                                    \n                                firstnameCtrl\n                            \n                            \n                                lastname\n                            \n                            \n                                    \n                                lastnameCtrl\n                            \n                            \n                                loading\n                            \n                            \n                                password\n                            \n                            \n                                    \n                                passwordCtrl\n                            \n                            \n                                passwordVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                            \n                                togglePasswordVisibility\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/auth/signup/signup.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/auth/signup/signup.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        togglePasswordVisibility\n                        \n                    \n                \n            \n            \n                \ntogglePasswordVisibility()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/auth/signup/signup.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emailCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('emailCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstnameCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('firstnameCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastnameCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('lastnameCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwordCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('passwordCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordVisible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"password\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/signup/signup.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, ViewChild } from '@angular/core';\nimport { FormsModule, NgModel } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { PasswordValidator } from '../../../shared/directives/password-validator';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  imports: [FormsModule, PasswordValidator],\n  templateUrl: './signup.html',\n})\nexport class Signup {\n  firstname = \"\";\n  lastname = \"\";\n  email = \"\";\n  password = \"\";\n  passwordVisible = \"password\";\n  loading = false;\n  authService = inject(AuthService);\n  \n  @ViewChild('firstnameCtrl') firstnameCtrl!: NgModel;\n  @ViewChild('lastnameCtrl') lastnameCtrl!: NgModel;\n  @ViewChild('emailCtrl') emailCtrl!: NgModel;\n  @ViewChild('passwordCtrl') passwordCtrl!: NgModel;\n\n  constructor(private router: Router) {}\n\n  togglePasswordVisibility() {\n    if (this.passwordVisible === \"password\") {\n      this.passwordVisible = \"text\"\n    } else {\n      this.passwordVisible = \"password\"\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    // Later: replace with real API call\n    if (this.emailCtrl.invalid || this.passwordCtrl.invalid || this.firstnameCtrl.invalid || this.lastnameCtrl.invalid) {\n      alert(\"first name, last name, valid email, and valid password are required\");\n    } else {\n      this.authService.signup({ \n        first_name: this.firstname, last_name: this.lastname, email: this.email, password: this.password }).subscribe({\n        next: (response) => {\n          console.log('Signup successful', response);\n          alert('Signup successful! Please log in.');\n          this.router.navigate(['/login']);\n        },\n        error: (error) => {\n          console.error('Signup failed', error);\n          alert('Signup failed, Please try again.');\n        }\n      });\n    }\n    this.loading = false;\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n      Maestro\n    \n    Meet Maestro\n    Your AI-powered assistant for mastering complex subjects, simplified.\n    \n      \n        \n        \n          First Name\n          \n          \n          @if (firstnameCtrl.invalid && firstnameCtrl.touched) {\n            \n              First Name is required\n            \n          }\n        \n        \n        \n          Last Name\n          \n          \n          @if (lastnameCtrl.invalid && lastnameCtrl.touched) {\n            \n              Last Name is required\n            \n          }\n        \n      \n\n      \n      \n        Email Address\n        \n        \n        @if (emailCtrl.invalid && emailCtrl.touched) {\n          \n            @if (emailCtrl.errors?.['required']) {Email is required}\n            @if (emailCtrl.errors?.['email']) {Invalid email format}\n          \n        }\n      \n\n      \n      \n        Password\n        \n        \n        @if (passwordCtrl.invalid && passwordCtrl.touched) {\n          \n            @if (passwordCtrl.errors?.['required']) {Password is required}\n            @if (passwordCtrl.errors?.['invalidPassword']) {Password must be at least 8 characters and include letters & numbers}\n          \n        }\n        \n          \n        \n      \n\n      \n        Next\n      \n    \n    \n      Have a Maestro account? Log In\n    \n  \n  \n  \n    \n    \n      \n      Maestro\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Maestro        Meet Maestro    Your AI-powered assistant for mastering complex subjects, simplified.                                    First Name                              @if (firstnameCtrl.invalid && firstnameCtrl.touched) {                          First Name is required                      }                                  Last Name                              @if (lastnameCtrl.invalid && lastnameCtrl.touched) {                          Last Name is required                      }                                  Email Address                        @if (emailCtrl.invalid && emailCtrl.touched) {                      @if (emailCtrl.errors?.[\\'required\\']) {Email is required}            @if (emailCtrl.errors?.[\\'email\\']) {Invalid email format}                  }                          Password                        @if (passwordCtrl.invalid && passwordCtrl.touched) {                      @if (passwordCtrl.errors?.[\\'required\\']) {Password is required}            @if (passwordCtrl.errors?.[\\'invalidPassword\\']) {Password must be at least 8 characters and include letters & numbers}                  }                                              Next                    Have a Maestro account? Log In                              Maestro      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Signup'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignupPayload.html":{"url":"interfaces/SignupPayload.html","title":"interface - SignupPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignupPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth-payload.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            confirmPassword\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        confirmPassword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        confirmPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserModel } from \"./user.model\";\n\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserModel;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface SignupPayload {\n  name: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface VerifyEmailResponse {\n  success: boolean;\n  message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Subjects.html":{"url":"components/Subjects.html","title":"component - Subjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Subjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/dashboard/subjects/subjects.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-subjects\n            \n\n\n            \n                imports\n                \n                                Header\n                            RouterLink\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./subjects.html\n            \n\n\n\n            \n                styleUrl\n                ./subjects.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                old_subjects\n                            \n                            \n                                subjects\n                            \n                            \n                                subjectService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateSubject\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/dashboard/subjects/subjects.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateSubject\n                        \n                    \n                \n            \n            \n                \nnavigateSubject(subject: SubjectModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subjects/subjects.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subject\n                                            \n                                                            SubjectModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subjects/subjects.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        old_subjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubjectModel[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Mathematics\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"In Progress\",\n      \"completion\": 30,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Science\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"Completed\",\n      \"completion\": 100,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"History\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"Not Started\",\n      \"completion\": 0,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Literature\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"In Progress\",\n      \"completion\": 50,\n    }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/dashboard/subjects/subjects.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjects\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubjectModel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/dashboard/subjects/subjects.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(SubjectsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/dashboard/subjects/subjects.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, inject, OnInit } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { Router, RouterLink } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { SubjectModel } from '../../../core/models/subject.model';\nimport { SubjectsService } from '../../../core/services/subjects.service';\n\n@Component({\n  selector: 'app-subjects',\n  imports: [Header, RouterLink, CommonModule],\n  templateUrl: './subjects.html',\n  styleUrl: './subjects.css'\n})\nexport class Subjects implements OnInit {\n  old_subjects: SubjectModel[] = [\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Mathematics\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"In Progress\",\n      \"completion\": 30,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Science\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"Completed\",\n      \"completion\": 100,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"History\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"Not Started\",\n      \"completion\": 0,\n    },\n    {\n      \"id\": \"sj2nd-2dkap-uamds\",\n      \"name\": \"Literature\",\n      \"created_at\": new Date(\"2023-10-01T12:00:00Z\"),\n      \"status\": \"In Progress\",\n      \"completion\": 50,\n    }\n  ];\n  subjects: SubjectModel[] = [];\n  subjectService = inject(SubjectsService)\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.subjectService.getAllSubjects().subscribe({\n      next: (response) => {\n        console.log(response)\n        this.subjects = response.sessions;\n        console.log(this.subjects)\n        this.cdr.detectChanges();\n      },\n      error: (err) => {\n        console.error('Error fetching subjects:', err);\n        alert(\"Failed to load subjects. Please try again later.\");\n      }\n    });\n  }\n\n  navigateSubject(subject: SubjectModel) {\n    if (subject.status === 'pending document upload' || subject.status === 'pending topic labelling') {\n      this.router.navigate(['/subject-create/naming-upload'])\n    } else if (subject.status === 'pending topic selection' || subject.status === 'pending lesson generation') {\n      this.router.navigate([`/subject-create/${subject.id}/topic-preferences`])\n    } else if (subject.status === 'pending practice question generation') {\n      this.router.navigate([`/subject-create/${subject.id}/question-settings`])\n    } else {\n      this.router.navigate([`/lesson/${subject.id}`])\n    }\n  }\n}\n\n    \n\n    \n        \n@if (subjects.length == 0) {\n  \n    Start Your Learning Journey\n    Create subjects to keep your study materials neatly categorized and easy to find.\n    \n      Create New Subject\n      \n    \n  \n} @else {\n  \n    \n    \n      \n        \n        My Subjects\n      \n      \n        Create New Subject\n        \n      \n    \n\n    \n    \n      @for (subject of subjects; track subject.id) {\n        \n        \n          \n            {{subject.name}}\n            {{subject.status}}\n          \n          \n            \n            \n              \n                \n              \n            \n            {{(subject.completion*100).toFixed(0)}}%\n          \n        \n      }\n    \n  \n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (subjects.length == 0) {      Start Your Learning Journey    Create subjects to keep your study materials neatly categorized and easy to find.          Create New Subject            } @else {                                My Subjects                    Create New Subject                                @for (subject of subjects; track subject.id) {                                      {{subject.name}}            {{subject.status}}                                                                                                                {{(subject.completion*100).toFixed(0)}}%                        }      }'\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Subjects'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubjectsService.html":{"url":"injectables/SubjectsService.html","title":"injectable - SubjectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SubjectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/subjects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createSubject\n                            \n                            \n                                generateExam\n                            \n                            \n                                generateExercise\n                            \n                            \n                                generateLesson\n                            \n                            \n                                getAllSubjects\n                            \n                            \n                                ingestDocuments\n                            \n                            \n                                labelDocuments\n                            \n                            \n                                selectTopics\n                            \n                            \n                                updateSessionProgress\n                            \n                            \n                                updateSessionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createSubject\n                        \n                    \n                \n            \n            \n                \ncreateSubject(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateExam\n                        \n                    \n                \n            \n            \n                \ngenerateExam(sessionId: string, prefs: string, questionTypes: string[], timeLimit: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                prefs\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                questionTypes\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                timeLimit\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateExercise\n                        \n                    \n                \n            \n            \n                \ngenerateExercise(sessionId: string, prefs: string, questionTypes: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                prefs\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                questionTypes\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateLesson\n                        \n                    \n                \n            \n            \n                \ngenerateLesson(sessionId: string, prefs: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                prefs\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSubjects\n                        \n                    \n                \n            \n            \n                \ngetAllSubjects()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingestDocuments\n                        \n                    \n                \n            \n            \n                \ningestDocuments(sessionId: string, files: File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                files\n                                            \n                                                        File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        labelDocuments\n                        \n                    \n                \n            \n            \n                \nlabelDocuments(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectTopics\n                        \n                    \n                \n            \n            \n                \nselectTopics(sessionId: string, topicIds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                topicIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSessionProgress\n                        \n                    \n                \n            \n            \n                \nupdateSessionProgress(sessionId: string, progress: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                progress\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSessionStatus\n                        \n                    \n                \n            \n            \n                \nupdateSessionStatus(sessionId: string, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subjects.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpBaseService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/subjects.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpBaseService } from './http-base.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubjectsService {\n  http = inject(HttpBaseService);\n\n  getAllSubjects(): Observable {\n    return this.http.get('session/list');\n  }\n\n  createSubject(name: string): Observable {\n    return this.http.post('session/create', { name });\n  }\n\n  ingestDocuments(sessionId: string, files: File[]): Observable {\n    const formData = new FormData();\n    files.forEach((file) => formData.append('files', file));\n    return this.http.post(`session/${sessionId}/docs/ingest`, formData);\n  }\n\n  labelDocuments(sessionId: string): Observable {\n    return this.http.post(`session/${sessionId}/docs/label`, {});\n  }\n\n  selectTopics(sessionId: string, topicIds: string[]): Observable {\n    return this.http.post(`session/${sessionId}/select-topics`, { topics: topicIds });\n  }\n\n  generateLesson(sessionId: string, prefs: string): Observable {\n    return this.http.post(`session/${sessionId}/generate-lesson`, { lesson_preference: prefs });\n  }\n\n  generateExercise(sessionId: string, prefs: string, questionTypes: string[]): Observable {\n    return this.http.post(`session/${sessionId}/generate-exercises`, { exercise_preference: prefs, question_types: questionTypes });\n  }\n\n  generateExam(sessionId: string, prefs: string, questionTypes: string[], timeLimit: boolean = false): Observable {\n    return this.http.post(`session/${sessionId}/generate-exam`, { exam_preference: prefs, question_types: questionTypes, use_time_limit: timeLimit });\n  }\n\n  updateSessionStatus(sessionId: string, status: string): Observable {\n    return this.http.put(`session/${sessionId}/update-status`, { status });\n  }\n\n  updateSessionProgress(sessionId: string, progress: number): Observable {\n    return this.http.put(`session/${sessionId}/update-progress`, { update_tick: progress });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Subscription.html":{"url":"components/Subscription.html","title":"component - Subscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Subscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/dashboard/subscription/subscription.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-subscription\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                plans\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onCancel\n                            \n                            \n                                onSubscribe\n                            \n                            \n                                    Private\n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(subSvc: SubscriptionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/dashboard/subscription/subscription.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subSvc\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subscription/subscription.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subscription/subscription.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubscribe\n                        \n                    \n                \n            \n            \n                \nonSubscribe(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subscription/subscription.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/dashboard/subscription/subscription.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        plans\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal([])\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/dashboard/subscription/subscription.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/dashboard/subscription/subscription.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SubscriptionService } from '../../../core/services/subscription.service';\nimport {Plan, SubscriptionStatus} from '../../../core/models/subscription.model';\n\n@Component({\n  selector: 'app-subscription',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` `\n})\nexport class Subscription implements OnInit {\n  plans = signal([]);\n  status = signal(null);\n\n  constructor(private subSvc: SubscriptionService) {}\n\n  ngOnInit() {\n    this.subSvc.getPlans().subscribe(plans => this.plans.set(plans));\n    this.refresh();\n  }\n\n  onSubscribe(id: string) {\n    this.subSvc.subscribe(id).subscribe(() => this.refresh());\n  }\n\n  onCancel() {\n    this.subSvc.cancel().subscribe(() => this.refresh());\n  }\n\n  private refresh() {\n    this.subSvc.getStatus().subscribe(st => this.status.set(st));\n  }\n}\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Subscription'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SubscriptionGuard.html":{"url":"guards/SubscriptionGuard.html","title":"guard - SubscriptionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SubscriptionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n                File\n            \n            \n                src/app/core/guards/subscription.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(subSvc: SubscriptionService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/subscription.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subSvc\n                                                  \n                                                        \n                                                                        SubscriptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/subscription.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router\n} from '@angular/router';\nimport { map } from 'rxjs';\nimport { SubscriptionService } from '../services/subscription.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SubscriptionGuard implements CanActivate {\n  constructor(\n    private subSvc: SubscriptionService,\n    private router: Router\n  ) {}\n\n  canActivate() {\n    return this.subSvc.getStatus().pipe(\n      map(st => {\n        if (!st.isActive) {\n          this.router.navigate(['/dashboard/subscription']);\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionService.html":{"url":"injectables/SubscriptionService.html","title":"injectable - SubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                getPlans\n                            \n                            \n                                getStatus\n                            \n                            \n                                subscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/subscription.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancel\n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPlans\n                        \n                    \n                \n            \n            \n                \ngetPlans()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStatus\n                        \n                    \n                \n            \n            \n                \ngetStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscribe\n                        \n                    \n                \n            \n            \n                \nsubscribe(planId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/subscription.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                planId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '${environment.apiUrl}/subscriptions'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/subscription.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Plan, SubscriptionStatus } from '../models/subscription.model';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class SubscriptionService {\n  private baseUrl = '${environment.apiUrl}/subscriptions';\n\n  constructor(private http: HttpClient) {}\n\n  getPlans(): Observable {\n    return this.http.get(`${this.baseUrl}/plans`);\n  }\n\n  subscribe(planId: string): Observable {\n    return this.http.post(`${this.baseUrl}/subscribe`, { planId });\n  }\n\n  getStatus(): Observable {\n    return this.http.get(`${this.baseUrl}/status`);\n  }\n\n  cancel() : Observable {\n    return this.http.post(`${this.baseUrl}/cancel`, {});\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionStatus.html":{"url":"interfaces/SubscriptionStatus.html","title":"interface - SubscriptionStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscriptionStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/subscription.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expiresAt\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            plan\n                                        \n                                \n                                \n                                        \n                                            startedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        plan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        plan:         Plan\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Plan\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Plan {\n  id: string;\n  name: string;\n  price: number;\n  maxSubjects: number;\n  durationDays: number;\n}\n\nexport interface SubscriptionStatus {\n  plan: Plan;\n  startedAt: string;\n  expiresAt: string;\n  isActive: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Subtopic.html":{"url":"components/Subtopic.html","title":"component - Subtopic","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Subtopic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/lesson/subtopic/subtopic.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-subtopic\n            \n\n\n            \n                imports\n                \n                            MarkdownPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./subtopic.html\n            \n\n\n\n            \n                styleUrl\n                ./subtopic.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                nextSubtopic\n                            \n                            \n                                prevSubtopic\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentTopic\n                            \n                            \n                                currentView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                cycleSubtopic\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentTopic\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/subtopic/subtopic.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currentView\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/subtopic/subtopic.ts:13\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        cycleSubtopic\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/lesson/subtopic/subtopic.ts:14\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        nextSubtopic\n                        \n                    \n                \n            \n            \n                \nnextSubtopic()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/subtopic/subtopic.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prevSubtopic\n                        \n                    \n                \n            \n            \n                \nprevSubtopic()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/lesson/subtopic/subtopic.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, input, output } from '@angular/core';\nimport { MarkdownPipe } from '../../../shared/pipes/markdown-pipe';\n// import { MarkdownModule } from 'ngx-markdown';\n\n@Component({\n  selector: 'app-subtopic',\n  imports: [MarkdownPipe],\n  templateUrl: './subtopic.html',\n  styleUrl: './subtopic.css'\n})\nexport class Subtopic {\n  currentTopic = input();\n  currentView = input();\n  cycleSubtopic = output();\n\n  prevSubtopic() {\n    this.cycleSubtopic.emit({ id: this.currentTopic().id, direction: 'prev' });\n  }\n\n  nextSubtopic() {\n    this.cycleSubtopic.emit({ id: this.currentTopic().id, direction: 'next' });\n  }\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n      {{ currentTopic().title }}\n      \n      {{ currentView().content.title }}\n    \n    \n    \n      \n        \n        Previous\n      \n      \n        Next\n        \n      \n    \n  \n\n  \n  \n    \n      \n    \n    {{ currentView().content.title }}\n  \n\n  \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  {{ currentTopic().title }}            {{ currentView().content.title }}                                  Previous                    Next                                          {{ currentView().content.title }}      '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Subtopic'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubtopicModel.html":{"url":"interfaces/SubtopicModel.html","title":"interface - SubtopicModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubtopicModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/subtopic.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brief_description\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            read\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brief_description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brief_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SubtopicModel {\n  id: string;\n  title: string;\n  brief_description: string;\n  content: string;      // Text or markdown\n  read: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/Toast.html":{"url":"components/Toast.html","title":"component - Toast","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  Toast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/toast/toast.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                NotificationService\n                \n            \n\n\n            \n                selector\n                app-toast\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./toast.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                classes\n                            \n                            \n                                msg\n                            \n                            \n                                    Public\n                                notify\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notify: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/toast/toast.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notify\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/toast/toast.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => ({\n    'fixed bottom-4 right-4 z-50 flex items-center space-x-3 p-4 rounded shadow-lg text-white':\n      true,\n    'bg-green-500': this.type() === 'success',\n    'bg-red-500': this.type() === 'error',\n    'bg-blue-500': this.type() === 'info',\n    'bg-yellow-500': this.type() === 'warn'\n  }))\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/toast/toast.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        msg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/toast/toast.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        notify\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/toast/toast.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/toast/toast.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NotificationService } from '../../../core/services/notification.service';\n\n@Component({\n  selector: 'app-toast',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './toast.html',\n  providers: [NotificationService]\n})\nexport class Toast {\n  msg: any;\n  type: any;\n  classes = computed(() => ({\n    'fixed bottom-4 right-4 z-50 flex items-center space-x-3 p-4 rounded shadow-lg text-white':\n      true,\n    'bg-green-500': this.type() === 'success',\n    'bg-red-500': this.type() === 'error',\n    'bg-blue-500': this.type() === 'info',\n    'bg-yellow-500': this.type() === 'warn'\n  }));\n\n  constructor(public notify: NotificationService) {\n    this.msg = this.notify.message;\n    this.type = this.notify.type;\n  }\n  close() { this.notify.clear(); }\n}\n    \n\n    \n        \n  {{ msg() }}\n  ✕\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ msg() }}  ✕'\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'Toast'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TopicModel.html":{"url":"interfaces/TopicModel.html","title":"interface - TopicModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TopicModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/topic.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brief_description\n                                        \n                                \n                                \n                                        \n                                            completed\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brief_description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brief_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TopicModel {\n  id: string;\n  title: string;\n  brief_description: string;\n  completed: boolean;\n  selected: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TopicPreferences.html":{"url":"components/TopicPreferences.html","title":"component - TopicPreferences","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  TopicPreferences\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/subject-create/topic-preferences/topic-preferences.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-topic-preferences\n            \n\n\n            \n                imports\n                \n                                Header\n                                CreationStepTab\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./topic-preferences.html\n            \n\n\n\n            \n                styleUrl\n                ./topic-preferences.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                learningStyle\n                            \n                            \n                                    \n                                learningStyleCtrl\n                            \n                            \n                                lessonService\n                            \n                            \n                                loading\n                            \n                            \n                                old_topics\n                            \n                            \n                                subjectId\n                            \n                            \n                                subjectService\n                            \n                            \n                                topics\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                toggleTopicSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:83\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTopicSelection\n                        \n                    \n                \n            \n            \n                \ntoggleTopicSelection(topic_id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                topic_id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        learningStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        learningStyleCtrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('learningStyleCtrl')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lessonService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LessonService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        old_topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"id\": \"dksda-daidj2d-a2m90-1\",\n      \"name\": \"Definition\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-2\",\n      \"name\": \"Course Overview\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-3\",\n      \"name\": \"Key Features of the Course\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-4\",\n      \"name\": \"Learning Objectives\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-5\",\n      \"name\": \"Course Modules\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-6\",\n      \"name\": \"Assesment Methods\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-7\",\n      \"name\": \"Frequently Asked Questions (FAQs)\",\n      \"selected\": false\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subjectService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(SubjectsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topics\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TopicModel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/subject-create/topic-preferences/topic-preferences.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, inject, OnInit, ViewChild } from '@angular/core';\nimport { Header } from '../../../shared/components/header/header';\nimport { CreationStepTab } from '../creation-step-tab/creation-step-tab';\nimport { FormsModule, NgModel } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TopicModel } from '../../../core/models/topic.model';\nimport { SubjectsService } from '../../../core/services/subjects.service';\nimport { LessonService } from '../../../core/services/lesson.service';\n\ntype Topic = {\n  id: string,\n  name: string,\n  selected: boolean\n}\n\n@Component({\n  selector: 'app-topic-preferences',\n  imports: [Header, CreationStepTab, FormsModule],\n  templateUrl: './topic-preferences.html',\n  styleUrl: './topic-preferences.css'\n})\nexport class TopicPreferences implements OnInit {\n  learningStyle = '';\n  subjectId = '';\n  @ViewChild('learningStyleCtrl') learningStyleCtrl!: NgModel;\n  loading = false;\n  old_topics = [\n    {\n      \"id\": \"dksda-daidj2d-a2m90-1\",\n      \"name\": \"Definition\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-2\",\n      \"name\": \"Course Overview\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-3\",\n      \"name\": \"Key Features of the Course\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-4\",\n      \"name\": \"Learning Objectives\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-5\",\n      \"name\": \"Course Modules\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-6\",\n      \"name\": \"Assesment Methods\",\n      \"selected\": false\n    },\n    {\n      \"id\": \"dksda-daidj2d-a2m90-7\",\n      \"name\": \"Frequently Asked Questions (FAQs)\",\n      \"selected\": false\n    },\n  ];\n  topics: TopicModel[] = [];\n  subjectService = inject(SubjectsService)\n  lessonService = inject(LessonService)\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {\n    // Extract subjectId from the route parameters\n    const url = window.location.pathname;\n    const parts = url.split('/');\n    this.subjectId = parts[parts.length - 2]; // Assuming the last part is the subjectId\n  }\n\n  toggleTopicSelection(topic_id: any) {\n    this.topics.map(\n      (topic) => {\n        if (topic.id === topic_id) {topic.selected = !topic.selected}\n      }\n    )\n  }\n\n  ngOnInit(): void {\n    // Fetch topics from backend\n    this.lessonService.getAllTopics(this.subjectId).subscribe({\n      next: (response) => {\n        console.log(response)\n        this.topics = response.topics\n        console.log(this.topics)\n        this.cdr.detectChanges();\n      },\n      error: (err) => {\n        console.error('Error fetching topics:', err);\n        alert(\"Failed to load topics. Please try again later.\");\n      }\n    });\n  }\n\n  onSubmit() {\n    const selectedTopics = this.topics.filter((topic) => topic.selected);\n    this.loading = true;\n    if (selectedTopics.length == 0) {\n      alert(\"At least one topic must be selected\");\n      this.loading = false;\n      return\n    }\n    if (this.learningStyleCtrl.invalid) {\n      alert(\"Learning Style is required\");\n      this.loading = false;\n      return\n    }\n\n    // Here you would typically send the data to the backend\n    console.log(selectedTopics);\n    console.log(this.learningStyle);\n\n    // Select topics\n    this.subjectService.selectTopics(this.subjectId, selectedTopics.map((topic) => topic.id)).subscribe({\n      next: (response) => {\n        console.log(\"Topics selected:\", response);\n\n        // Generate lesson\n        this.subjectService.generateLesson(this.subjectId, this.learningStyle).subscribe({\n          next: (response) => {\n            console.log(\"Lesson generated:\", response);\n            this.router.navigate([`/subject-create/${this.subjectId}/question-settings`])\n            this.loading = false;\n          },\n\n          error: (err) => {\n            console.error('Error generating lesson:', err);\n            alert(\"Failed to generate lesson. Please try again later.\");\n            this.loading = false;\n          }\n        });\n      },\n      \n      error: (err) => {\n        console.error('Error selecting topics:', err);\n        alert(\"Failed to select topics. Please try again later.\");\n        this.loading = false;\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n\n  \n  \n    \n    \n    \n  \n\n  Create Your Personalized Lesson\n  \n    Select the specific topics from your document that you want Maestro to focus on for your lesson.\n  \n\n  \n  \n    @for (topic of topics; track topic.id) {\n      \n        @if (topic.selected) {\n          \n          \n        }\n        {{topic.title}}\n      \n    }\n  \n\n  \n  Learning Style\n  \n    How would you like this lesson to be?\n    \n    \n    @if (learningStyleCtrl.invalid && learningStyleCtrl.touched) {\n      \n        Learning Style is required\n      \n    }\n    \n      Next\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Create Your Personalized Lesson      Select the specific topics from your document that you want Maestro to focus on for your lesson.          @for (topic of topics; track topic.id) {              @if (topic.selected) {                            }        {{topic.title}}          }      Learning Style      How would you like this lesson to be?            @if (learningStyleCtrl.invalid && learningStyleCtrl.touched) {              Learning Style is required          }          Next            '\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'TopicPreferences'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserModel.html":{"url":"interfaces/UserModel.html","title":"interface - UserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            first_name\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            last_name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        first_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserModel {\n  id: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                currentUser$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fetchProfile\n                            \n                            \n                                getCurrentUser\n                            \n                            \n                                setCurrentUser\n                            \n                            \n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fetchProfile\n                        \n                    \n                \n            \n            \n                \nfetchProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrentUser\n                        \n                    \n                \n            \n            \n                \nsetCurrentUser(user: UserModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProfile\n                        \n                    \n                \n            \n            \n                \nupdateProfile(data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/users'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/user.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentUser$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/user.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { UserModel } from '../models/user.model';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  private baseUrl = '/api/users';\n  private currentUser$ = new BehaviorSubject(null);\n\n  constructor(private http: HttpClient) {}\n\n  fetchProfile(): Observable {\n    return this.http.get(`${this.baseUrl}/me`);\n  }\n\n  updateProfile(data: Partial): Observable {\n    return this.http.put(`${this.baseUrl}/me`, data);\n  }\n\n  setCurrentUser(user: UserModel): void {\n    this.currentUser$.next(user);\n  }\n\n  getCurrentUser(): Observable {\n    return this.currentUser$.asObservable();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/VerifyEmail.html":{"url":"components/VerifyEmail.html","title":"component - VerifyEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  VerifyEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/auth/verify-email/verify-email.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-verify-email\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./verify-email.html\n            \n\n\n\n            \n                styleUrl\n                ./verify-email.css\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-verify-email',\n  imports: [],\n  templateUrl: './verify-email.html',\n  styleUrl: './verify-email.css'\n})\nexport class VerifyEmail {\n\n}\n\n    \n\n    \n        verify-email works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'verify-email works!'\n    var COMPONENTS = [{'name': 'About', 'selector': 'app-about'},{'name': 'App', 'selector': 'app-root'},{'name': 'Chatbot', 'selector': 'app-chatbot'},{'name': 'ConfirmLogout', 'selector': 'app-confirm-logout'},{'name': 'Contact', 'selector': 'app-contact'},{'name': 'CreationStepTab', 'selector': 'app-creation-step-tab'},{'name': 'Features', 'selector': 'app-features'},{'name': 'Header', 'selector': 'app-header'},{'name': 'Home', 'selector': 'app-home'},{'name': 'Landing', 'selector': 'app-landing'},{'name': 'LessonPage', 'selector': 'app-lesson-page'},{'name': 'Login', 'selector': 'app-login'},{'name': 'NamingUpload', 'selector': 'app-naming-upload'},{'name': 'NotFound', 'selector': 'app-not-found'},{'name': 'Practice', 'selector': 'app-practice'},{'name': 'Pricing', 'selector': 'app-pricing'},{'name': 'QuestionSettings', 'selector': 'app-question-settings'},{'name': 'Sidebar', 'selector': 'app-sidebar'},{'name': 'Signup', 'selector': 'app-signup'},{'name': 'Subjects', 'selector': 'app-subjects'},{'name': 'Subscription', 'selector': 'app-subscription'},{'name': 'Subtopic', 'selector': 'app-subtopic'},{'name': 'Toast', 'selector': 'app-toast'},{'name': 'TopicPreferences', 'selector': 'app-topic-preferences'},{'name': 'VerifyEmail', 'selector': 'app-verify-email'}];\n    var DIRECTIVES = [{'name': 'FileTypeDirective', 'selector': '[appFileType]'},{'name': 'PasswordValidator', 'selector': '[appPasswordValidator]'}];\n    var ACTUAL_COMPONENT = {'name': 'VerifyEmail'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerifyEmailResponse.html":{"url":"interfaces/VerifyEmailResponse.html","title":"interface - VerifyEmailResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerifyEmailResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth-payload.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserModel } from \"./user.model\";\n\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  user: UserModel;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface SignupPayload {\n  name: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport interface VerifyEmailResponse {\n  success: boolean;\n  message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/app.routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/app.ts\n            \n            component\n            App\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/core/guards/subscription.guard.ts\n            \n            guard\n            SubscriptionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/core/interceptors/auth.interceptor.ts\n            \n            interceptor\n            AuthInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/core/interceptors/http-error.interceptor.ts\n            \n            variable\n            httpErrorInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/models/answer.model.ts\n            \n            interface\n            AnswerModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/core/models/auth-payload.model.ts\n            \n            interface\n            LoginPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/core/models/auth-payload.model.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/core/models/auth-payload.model.ts\n            \n            interface\n            SignupPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/core/models/auth-payload.model.ts\n            \n            interface\n            VerifyEmailResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/core/models/chat-message.model.ts\n            \n            interface\n            ChatMessage\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/core/models/chat-metadata.model.ts\n            \n            type alias\n            ChatMetadata\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/models/exam.model.ts\n            \n            interface\n            ExamModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/core/models/exercise.model.ts\n            \n            interface\n            ExerciseModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/core/models/question.model.ts\n            \n            interface\n            QuestionModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/core/models/question.model.ts\n            \n            interface\n            QuestionOption\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/core/models/question.model.ts\n            \n            interface\n            SaveQuestionData\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/core/models/question.model.ts\n            \n            type alias\n            QuestionType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/models/subject.model.ts\n            \n            type alias\n            SubjectModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/models/subscription.model.ts\n            \n            interface\n            Plan\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/core/models/subscription.model.ts\n            \n            interface\n            SubscriptionStatus\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/core/models/subtopic.model.ts\n            \n            interface\n            SubtopicModel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/core/models/topic.model.ts\n            \n            interface\n            TopicModel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/core/models/user.model.ts\n            \n            interface\n            UserModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/core/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/app/core/services/chatbot.service.ts\n            \n            injectable\n            ChatbotService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/core/services/exercise.service.ts\n            \n            injectable\n            ExerciseService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/core/services/http-base.service.ts\n            \n            injectable\n            HttpBaseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/core/services/lesson.service.ts\n            \n            injectable\n            LessonService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/app/core/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/core/services/notification.service.ts\n            \n            type alias\n            NoticeType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/services/subjects.service.ts\n            \n            injectable\n            SubjectsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/app/core/services/subscription.service.ts\n            \n            injectable\n            SubscriptionService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/core/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/pages/auth/login/login.ts\n            \n            component\n            Login\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/app/pages/auth/signup/signup.ts\n            \n            component\n            Signup\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                        src/app/pages/auth/verify-email/verify-email.ts\n            \n            component\n            VerifyEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/dashboard/subjects/subjects.ts\n            \n            component\n            Subjects\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/pages/dashboard/subscription/subscription.ts\n            \n            component\n            Subscription\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/pages/home/about-ignore/about.ts\n            \n            component\n            About\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/home/contact/contact.ts\n            \n            component\n            Contact\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/home/features/features.ts\n            \n            component\n            Features\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/home/home/home.ts\n            \n            component\n            Home\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/pages/home/landing/landing.ts\n            \n            component\n            Landing\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/pages/home/pricing/pricing.ts\n            \n            component\n            Pricing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/lesson/chatbot/chatbot.ts\n            \n            component\n            Chatbot\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                        src/app/pages/lesson/lesson-page/lesson-page.ts\n            \n            component\n            LessonPage\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                        src/app/pages/lesson/practice/practice.ts\n            \n            component\n            Practice\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                        src/app/pages/lesson/sidebar/sidebar.ts\n            \n            component\n            Sidebar\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/pages/lesson/subtopic/subtopic.ts\n            \n            component\n            Subtopic\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/pages/not-found/not-found.ts\n            \n            component\n            NotFound\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/creation-step-tab/creation-step-tab.ts\n            \n            component\n            CreationStepTab\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/naming-upload/naming-upload.ts\n            \n            component\n            NamingUpload\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/question-settings/question-settings.ts\n            \n            component\n            QuestionSettings\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/question-settings/question-settings.ts\n            \n            class\n            ExamSettings\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/question-settings/question-settings.ts\n            \n            class\n            ExerciseSettings\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/topic-preferences/topic-preferences.ts\n            \n            component\n            TopicPreferences\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/app/pages/subject-create/topic-preferences/topic-preferences.ts\n            \n            type alias\n            Topic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/shared/components/confirm-logout/confirm-logout.ts\n            \n            component\n            ConfirmLogout\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/shared/components/header/header.ts\n            \n            component\n            Header\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/app/shared/components/toast/toast.ts\n            \n            component\n            Toast\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/shared/directives/file-type.directive.ts\n            \n            directive\n            FileTypeDirective\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                        src/app/shared/directives/password-validator.ts\n            \n            directive\n            PasswordValidator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/shared/pipes/markdown-pipe.ts\n            \n            pipe\n            MarkdownPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/shared/utils/file-validation.util.ts\n            \n            function\n            isAllowedFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ^20.1.0\n        \n            @angular/compiler : ^20.1.0\n        \n            @angular/core : ^20.1.0\n        \n            @angular/forms : ^20.1.0\n        \n            @angular/platform-browser : ^20.1.0\n        \n            @angular/router : ^20.1.0\n        \n            katex : ^0.16.22\n        \n            markdown-it : ^14.1.0\n        \n            markdown-it-katex : ^2.0.3\n        \n            ngx-markdown : ^20.0.0\n        \n            rxjs : ~7.8.0\n        \n            tailwind-scrollbar : ^1.3.1\n        \n            tslib : ^2.3.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isAllowedFile   (src/.../file-validation.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/utils/file-validation.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAllowedFile\n                        \n                    \n                \n            \n            \n                \nisAllowedFile(file: File, types, maxBytes: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                types\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                maxBytes\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\nMaestroFrontend\nThis project was generated using Angular CLI version 20.1.5.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    25 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    16 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChatMetadata   (src/.../chat-metadata.model.ts)\n                        \n                        \n                            NoticeType   (src/.../notification.service.ts)\n                        \n                        \n                            QuestionType   (src/.../question.model.ts)\n                        \n                        \n                            SubjectModel   (src/.../subject.model.ts)\n                        \n                        \n                            Topic   (src/.../topic-preferences.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/models/chat-metadata.model.ts\n    \n    \n        \n            \n                \n                    \n                    ChatMetadata\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/core/services/notification.service.ts\n    \n    \n        \n            \n                \n                    \n                    NoticeType\n                \n            \n            \n                \n                        \"success\" | \"error\" | \"info\" | \"warn\"\n\n                \n            \n        \n    \n    src/app/core/models/question.model.ts\n    \n    \n        \n            \n                \n                    \n                    QuestionType\n                \n            \n            \n                \n                        \"multiple choice\" | \"multiple selection\" | \"essay\"\n\n                \n            \n        \n    \n    src/app/core/models/subject.model.ts\n    \n    \n        \n            \n                \n                    \n                    SubjectModel\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/pages/subject-create/topic-preferences/topic-preferences.ts\n    \n    \n        \n            \n                \n                    \n                    Topic\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            httpErrorInterceptor   (src/.../http-error.interceptor.ts)\n                        \n                        \n                            routes   (src/.../app.routes.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZonelessChangeDetection(),\n    provideRouter(routes),\n    provideHttpClient(withInterceptorsFromDi()),\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    provideMarkdown(),\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  apiUrl: 'https://your-backend-url.com/api' // deployed API\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  apiUrl: 'http://localhost:5000/api' // local dev API\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/interceptors/http-error.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        httpErrorInterceptor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpInterceptorFn\n\n                    \n                \n                \n                    \n                        Default value : (req, next) => {\n  const notify = inject(NotificationService);\n  return next(req).pipe({\n    error: (err: HttpErrorResponse) => {\n      const msg =\n        err.error?.message ||\n        err.statusText ||\n        'An unexpected error occurred.';\n      notify.showError(msg);\n      throw err;\n    }\n  } as any);\n}\n                    \n                \n\n\n        \n    \n\n    src/app/app.routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Routes\n\n                    \n                \n                \n                    \n                        Default value : [\n  // Home\n  { path: '', loadComponent: () => \"import('./pages/home/home/home').then(m => m.Home)\" },\n\n  // Auth\n  { path: 'signup', loadComponent: () => \"import('./pages/auth/signup/signup').then(m => m.Signup)\" },\n  { path: 'login', loadComponent: () => \"import('./pages/auth/login/login').then(m => m.Login)\" },\n  { path: 'verify-email', loadComponent: () => \"import('./pages/auth/verify-email/verify-email').then(m => m.VerifyEmail)\" },\n\n  // Dashboard\n  { path: 'dashboard', loadComponent: () => \"import('./pages/dashboard/subjects/subjects').then(m => m.Subjects)\" },\n  { path: 'dashboard/subscription', loadComponent: () => \"import('./pages/dashboard/subscription/subscription').then(m => m.Subscription)\" },\n\n  // Subject Creation (stepper flow, could be nested later if you want)\n  { path: 'subject-create/naming-upload', loadComponent: () => \"import('./pages/subject-create/naming-upload/naming-upload').then(m => m.NamingUpload)\" },\n  { path: 'subject-create/:sessionId/topic-preferences', loadComponent: () => \"import('./pages/subject-create/topic-preferences/topic-preferences').then(m => m.TopicPreferences)\" },\n  { path: 'subject-create/:sessionId/question-settings', loadComponent: () => \"import('./pages/subject-create/question-settings/question-settings').then(m => m.QuestionSettings)\" },\n\n  // Lesson\n  { path: 'lesson/:subjectId', loadComponent: () => \"import('./pages/lesson/lesson-page/lesson-page').then(m => m.LessonPage)\" },\n\n  // Not Found\n  { path: '**', loadComponent: () => \"import('./pages/not-found/not-found').then(m => m.NotFound)\" },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
